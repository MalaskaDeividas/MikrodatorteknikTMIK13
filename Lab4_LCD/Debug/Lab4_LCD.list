
Lab4_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003958  08003958  00004958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039bc  080039bc  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080039bc  080039bc  000049bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c4  080039c4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c4  080039c4  000049c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039c8  080039c8  000049c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080039cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  08003a28  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08003a28  000052b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec8b  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d85  00000000  00000000  00013d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00015aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8b  00000000  00000000  00016928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b20  00000000  00000000  000174b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001074b  00000000  00000000  00018fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e1ca  00000000  00000000  0002971e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b78e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d0  00000000  00000000  000b792c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000bbcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003940 	.word	0x08003940

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003940 	.word	0x08003940

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <cd_set>:
uint8_t hsec = 0;
struct clock_data my_clock;


void cd_set(struct clock_data *pcd, uint8_t hrs, uint8_t min, uint8_t sec)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	4608      	mov	r0, r1
 800058a:	4611      	mov	r1, r2
 800058c:	461a      	mov	r2, r3
 800058e:	4603      	mov	r3, r0
 8000590:	70fb      	strb	r3, [r7, #3]
 8000592:	460b      	mov	r3, r1
 8000594:	70bb      	strb	r3, [r7, #2]
 8000596:	4613      	mov	r3, r2
 8000598:	707b      	strb	r3, [r7, #1]
	pcd->hrs = hrs;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	78fa      	ldrb	r2, [r7, #3]
 800059e:	701a      	strb	r2, [r3, #0]
	pcd->min = min;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	78ba      	ldrb	r2, [r7, #2]
 80005a4:	705a      	strb	r2, [r3, #1]
	pcd->sec = sec;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	787a      	ldrb	r2, [r7, #1]
 80005aa:	709a      	strb	r2, [r3, #2]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <cd_tick>:

void cd_tick(struct clock_data *pcd)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	pcd->sec++; //ökar sec
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	789b      	ldrb	r3, [r3, #2]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	709a      	strb	r2, [r3, #2]

	//hanterar sec/min
	if(pcd->sec >= 60)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	2b3b      	cmp	r3, #59	@ 0x3b
 80005d2:	d908      	bls.n	80005e6 <cd_tick+0x2e>
	{
		pcd->sec = 0;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	709a      	strb	r2, [r3, #2]
		pcd->min++;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	3301      	adds	r3, #1
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	705a      	strb	r2, [r3, #1]
	}

	//hanterar min/hrs
	if(pcd->min >= 60)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	785b      	ldrb	r3, [r3, #1]
 80005ea:	2b3b      	cmp	r3, #59	@ 0x3b
 80005ec:	d908      	bls.n	8000600 <cd_tick+0x48>
	{
		pcd->min = 0;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	705a      	strb	r2, [r3, #1]
		pcd->hrs++;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	701a      	strb	r2, [r3, #0]
	}

	//slår om clk
	if(pcd->hrs >= 24)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b17      	cmp	r3, #23
 8000606:	d902      	bls.n	800060e <cd_tick+0x56>
	{
		pcd->hrs = 0;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
	}

}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800062c:	d114      	bne.n	8000658 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		hsec ^= 1;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	f083 0301 	eor.w	r3, r3, #1
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800063a:	701a      	strb	r2, [r3, #0]
		if (!hsec)
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			tick_flag = 1;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Transmit(&huart2, (uint8_t *)"Tick\n", 5, HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800064e:	2205      	movs	r2, #5
 8000650:	4905      	ldr	r1, [pc, #20]	@ (8000668 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000652:	4806      	ldr	r0, [pc, #24]	@ (800066c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000654:	f002 f904 	bl	8002860 <HAL_UART_Transmit>
	}
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000015d 	.word	0x2000015d
 8000664:	2000015c 	.word	0x2000015c
 8000668:	08003958 	.word	0x08003958
 800066c:	20000114 	.word	0x20000114

08000670 <uart_print_cd>:

void uart_print_cd(UART_HandleTypeDef *huart, struct clock_data *pcd)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af02      	add	r7, sp, #8
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	char buffer[20];

	snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d\r", pcd->hrs, pcd->min, pcd->sec);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4619      	mov	r1, r3
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	461a      	mov	r2, r3
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	f107 000c 	add.w	r0, r7, #12
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	9200      	str	r2, [sp, #0]
 8000692:	460b      	mov	r3, r1
 8000694:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <uart_print_cd+0x50>)
 8000696:	2114      	movs	r1, #20
 8000698:	f002 fc9e 	bl	8002fd8 <sniprintf>
	HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fd9d 	bl	80001e0 <strlen>
 80006a6:	4603      	mov	r3, r0
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	f107 010c 	add.w	r1, r7, #12
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f002 f8d4 	bl	8002860 <HAL_UART_Transmit>
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08003960 	.word	0x08003960

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	cd_set(&my_clock, 23, 59,45);
 80006ca:	232d      	movs	r3, #45	@ 0x2d
 80006cc:	223b      	movs	r2, #59	@ 0x3b
 80006ce:	2117      	movs	r1, #23
 80006d0:	4813      	ldr	r0, [pc, #76]	@ (8000720 <main+0x5c>)
 80006d2:	f7ff ff55 	bl	8000580 <cd_set>
	HAL_TIM_Base_Start_IT(&htim2);
 80006d6:	4813      	ldr	r0, [pc, #76]	@ (8000724 <main+0x60>)
 80006d8:	f001 fc88 	bl	8001fec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006dc:	f000 fb38 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e0:	f000 f826 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f000 f936 	bl	8000954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e8:	f000 f90a 	bl	8000900 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006ec:	f000 f8ba 	bl	8000864 <MX_TIM2_Init>
  MX_I2C1_Init();
 80006f0:	f000 f88a 	bl	8000808 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  char c = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	71fb      	strb	r3, [r7, #7]
  const char ASCII_CAPITAL_OFFSET = 'A';
 80006f8:	2341      	movs	r3, #65	@ 0x41
 80006fa:	71bb      	strb	r3, [r7, #6]
  const char LETTERS_TOTAL = 'Z' - 'A';
 80006fc:	2319      	movs	r3, #25
 80006fe:	717b      	strb	r3, [r7, #5]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (tick_flag)
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <main+0x64>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0fb      	beq.n	8000700 <main+0x3c>
	  {
		  tick_flag = 0;
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <main+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		  cd_tick(&my_clock);
 800070e:	4804      	ldr	r0, [pc, #16]	@ (8000720 <main+0x5c>)
 8000710:	f7ff ff52 	bl	80005b8 <cd_tick>
		  uart_print_cd(&huart2,&my_clock);
 8000714:	4902      	ldr	r1, [pc, #8]	@ (8000720 <main+0x5c>)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <main+0x68>)
 8000718:	f7ff ffaa 	bl	8000670 <uart_print_cd>
	  if (tick_flag)
 800071c:	e7f0      	b.n	8000700 <main+0x3c>
 800071e:	bf00      	nop
 8000720:	20000160 	.word	0x20000160
 8000724:	200000cc 	.word	0x200000cc
 8000728:	2000015c 	.word	0x2000015c
 800072c:	20000114 	.word	0x20000114

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	@ 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fc7e 	bl	8003040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemClock_Config+0xd0>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <SystemClock_Config+0xd0>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <SystemClock_Config+0xd4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800077c:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <SystemClock_Config+0xd4>)
 800077e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a4:	2310      	movs	r3, #16
 80007a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b2:	2307      	movs	r3, #7
 80007b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 ff2e 	bl	800161c <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007c6:	f000 f933 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2102      	movs	r1, #2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 f990 	bl	8001b0c <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007f2:	f000 f91d 	bl	8000a30 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	@ 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_I2C1_Init+0x50>)
 800080e:	4a13      	ldr	r2, [pc, #76]	@ (800085c <MX_I2C1_Init+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000814:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_I2C1_Init+0x58>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000826:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800082a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000846:	f000 fda5 	bl	8001394 <HAL_I2C_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000850:	f000 f8ee 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000078 	.word	0x20000078
 800085c:	40005400 	.word	0x40005400
 8000860:	000186a0 	.word	0x000186a0

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000880:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <MX_TIM2_Init+0x98>)
 8000882:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6000-1;
 8000888:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <MX_TIM2_Init+0x98>)
 800088a:	f241 726f 	movw	r2, #5999	@ 0x176f
 800088e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_TIM2_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000-1;
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <MX_TIM2_Init+0x98>)
 8000898:	f641 3257 	movw	r2, #6999	@ 0x1b57
 800089c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_TIM2_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_TIM2_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	@ (80008fc <MX_TIM2_Init+0x98>)
 80008ac:	f001 fb4e 	bl	8001f4c <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008b6:	f000 f8bb 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <MX_TIM2_Init+0x98>)
 80008c8:	f001 fce2 	bl	8002290 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008d2:	f000 f8ad 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <MX_TIM2_Init+0x98>)
 80008e4:	f001 feea 	bl	80026bc <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008ee:	f000 f89f 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000cc 	.word	0x200000cc

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	@ (8000950 <MX_USART2_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART2_UART_Init+0x4c>)
 8000938:	f001 ff42 	bl	80027c0 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 f875 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000114 	.word	0x20000114
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	@ 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a2c      	ldr	r2, [pc, #176]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a25      	ldr	r2, [pc, #148]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <MX_GPIO_Init+0xd4>)
 80009e0:	f000 fcbe 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <MX_GPIO_Init+0xd8>)
 80009fc:	f000 fb2c 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a00:	2320      	movs	r3, #32
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_GPIO_Init+0xd4>)
 8000a18:	f000 fb1e 	bl	8001058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	@ 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020800 	.word	0x40020800

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a7a:	2007      	movs	r0, #7
 8000a7c:	f000 faaa 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a19      	ldr	r2, [pc, #100]	@ (8000b10 <HAL_I2C_MspInit+0x84>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12b      	bne.n	8000b06 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a17      	ldr	r2, [pc, #92]	@ (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aca:	23c0      	movs	r3, #192	@ 0xc0
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ada:	2304      	movs	r3, #4
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <HAL_I2C_MspInit+0x8c>)
 8000ae6:	f000 fab7 	bl	8001058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <HAL_I2C_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	@ (8000b14 <HAL_I2C_MspInit+0x88>)
 8000af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_I2C_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	@ 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020400 	.word	0x40020400

08000b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b2c:	d115      	bne.n	8000b5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_TIM_Base_MspInit+0x48>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_TIM_Base_MspInit+0x48>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <HAL_TIM_Base_MspInit+0x48>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	201c      	movs	r0, #28
 8000b50:	f000 fa4b 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b54:	201c      	movs	r0, #28
 8000b56:	f000 fa64 	bl	8001022 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	@ (8000bec <HAL_UART_MspInit+0x84>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12b      	bne.n	8000be2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a10      	ldr	r2, [pc, #64]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <HAL_UART_MspInit+0x8c>)
 8000bde:	f000 fa3b 	bl	8001058 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x4>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4e:	f000 f8d1 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <TIM2_IRQHandler+0x10>)
 8000c5e:	f001 fa27 	bl	80020b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000cc 	.word	0x200000cc

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f002 f9d8 	bl	8003050 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20018000 	.word	0x20018000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000164 	.word	0x20000164
 8000cd4:	200002b8 	.word	0x200002b8

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d00:	f7ff ffea 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	@ (8000d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f002 f997 	bl	800305c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fcc9 	bl	80006c4 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d40:	080039cc 	.word	0x080039cc
  ldr r2, =_sbss
 8000d44:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d48:	200002b4 	.word	0x200002b4

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f92b 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe5a 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f943 	bl	800103e <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dd0:	f000 f90b 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	@ (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000004 	.word	0x20000004

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000168 	.word	0x20000168

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000168 	.word	0x20000168

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	@ (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	@ (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	@ (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	@ 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff3e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff31 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	@ 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e159      	b.n	8001328 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	429a      	cmp	r2, r3
 800108e:	f040 8148 	bne.w	8001322 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d005      	beq.n	80010aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d130      	bne.n	800110c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 0201 	and.w	r2, r3, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b03      	cmp	r3, #3
 8001116:	d017      	beq.n	8001148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d123      	bne.n	800119c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	69b9      	ldr	r1, [r7, #24]
 8001198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80a2 	beq.w	8001322 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b57      	ldr	r3, [pc, #348]	@ (8001340 <HAL_GPIO_Init+0x2e8>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	4a56      	ldr	r2, [pc, #344]	@ (8001340 <HAL_GPIO_Init+0x2e8>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ee:	4b54      	ldr	r3, [pc, #336]	@ (8001340 <HAL_GPIO_Init+0x2e8>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fa:	4a52      	ldr	r2, [pc, #328]	@ (8001344 <HAL_GPIO_Init+0x2ec>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a49      	ldr	r2, [pc, #292]	@ (8001348 <HAL_GPIO_Init+0x2f0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x202>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a48      	ldr	r2, [pc, #288]	@ (800134c <HAL_GPIO_Init+0x2f4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x1fe>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a47      	ldr	r2, [pc, #284]	@ (8001350 <HAL_GPIO_Init+0x2f8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x1fa>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a46      	ldr	r2, [pc, #280]	@ (8001354 <HAL_GPIO_Init+0x2fc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x1f6>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a45      	ldr	r2, [pc, #276]	@ (8001358 <HAL_GPIO_Init+0x300>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x1f2>
 8001246:	2304      	movs	r3, #4
 8001248:	e008      	b.n	800125c <HAL_GPIO_Init+0x204>
 800124a:	2307      	movs	r3, #7
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x204>
 800124e:	2303      	movs	r3, #3
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x204>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x204>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x204>
 800125a:	2300      	movs	r3, #0
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	f002 0203 	and.w	r2, r2, #3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800126c:	4935      	ldr	r1, [pc, #212]	@ (8001344 <HAL_GPIO_Init+0x2ec>)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	4b38      	ldr	r3, [pc, #224]	@ (800135c <HAL_GPIO_Init+0x304>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129e:	4a2f      	ldr	r2, [pc, #188]	@ (800135c <HAL_GPIO_Init+0x304>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <HAL_GPIO_Init+0x304>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c8:	4a24      	ldr	r2, [pc, #144]	@ (800135c <HAL_GPIO_Init+0x304>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ce:	4b23      	ldr	r3, [pc, #140]	@ (800135c <HAL_GPIO_Init+0x304>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f2:	4a1a      	ldr	r2, [pc, #104]	@ (800135c <HAL_GPIO_Init+0x304>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <HAL_GPIO_Init+0x304>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800131c:	4a0f      	ldr	r2, [pc, #60]	@ (800135c <HAL_GPIO_Init+0x304>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3301      	adds	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	f67f aea2 	bls.w	8001074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3724      	adds	r7, #36	@ 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40013800 	.word	0x40013800
 8001348:	40020000 	.word	0x40020000
 800134c:	40020400 	.word	0x40020400
 8001350:	40020800 	.word	0x40020800
 8001354:	40020c00 	.word	0x40020c00
 8001358:	40021000 	.word	0x40021000
 800135c:	40013c00 	.word	0x40013c00

08001360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
 800136c:	4613      	mov	r3, r2
 800136e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001370:	787b      	ldrb	r3, [r7, #1]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800137c:	e003      	b.n	8001386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	041a      	lsls	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	619a      	str	r2, [r3, #24]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e12b      	b.n	80015fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fb66 	bl	8000a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2224      	movs	r2, #36	@ 0x24
 80013c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013f8:	f000 fd80 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 80013fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4a81      	ldr	r2, [pc, #516]	@ (8001608 <HAL_I2C_Init+0x274>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d807      	bhi.n	8001418 <HAL_I2C_Init+0x84>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4a80      	ldr	r2, [pc, #512]	@ (800160c <HAL_I2C_Init+0x278>)
 800140c:	4293      	cmp	r3, r2
 800140e:	bf94      	ite	ls
 8001410:	2301      	movls	r3, #1
 8001412:	2300      	movhi	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	e006      	b.n	8001426 <HAL_I2C_Init+0x92>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4a7d      	ldr	r2, [pc, #500]	@ (8001610 <HAL_I2C_Init+0x27c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	bf94      	ite	ls
 8001420:	2301      	movls	r3, #1
 8001422:	2300      	movhi	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0e7      	b.n	80015fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4a78      	ldr	r2, [pc, #480]	@ (8001614 <HAL_I2C_Init+0x280>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	0c9b      	lsrs	r3, r3, #18
 8001438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a6a      	ldr	r2, [pc, #424]	@ (8001608 <HAL_I2C_Init+0x274>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d802      	bhi.n	8001468 <HAL_I2C_Init+0xd4>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3301      	adds	r3, #1
 8001466:	e009      	b.n	800147c <HAL_I2C_Init+0xe8>
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	4a69      	ldr	r2, [pc, #420]	@ (8001618 <HAL_I2C_Init+0x284>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	099b      	lsrs	r3, r3, #6
 800147a:	3301      	adds	r3, #1
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	430b      	orrs	r3, r1
 8001482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800148e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	495c      	ldr	r1, [pc, #368]	@ (8001608 <HAL_I2C_Init+0x274>)
 8001498:	428b      	cmp	r3, r1
 800149a:	d819      	bhi.n	80014d0 <HAL_I2C_Init+0x13c>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1e59      	subs	r1, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014aa:	1c59      	adds	r1, r3, #1
 80014ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014b0:	400b      	ands	r3, r1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00a      	beq.n	80014cc <HAL_I2C_Init+0x138>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1e59      	subs	r1, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ca:	e051      	b.n	8001570 <HAL_I2C_Init+0x1dc>
 80014cc:	2304      	movs	r3, #4
 80014ce:	e04f      	b.n	8001570 <HAL_I2C_Init+0x1dc>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d111      	bne.n	80014fc <HAL_I2C_Init+0x168>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1e58      	subs	r0, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6859      	ldr	r1, [r3, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	440b      	add	r3, r1
 80014e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf0c      	ite	eq
 80014f4:	2301      	moveq	r3, #1
 80014f6:	2300      	movne	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	e012      	b.n	8001522 <HAL_I2C_Init+0x18e>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e58      	subs	r0, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	0099      	lsls	r1, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001512:	3301      	adds	r3, #1
 8001514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_I2C_Init+0x196>
 8001526:	2301      	movs	r3, #1
 8001528:	e022      	b.n	8001570 <HAL_I2C_Init+0x1dc>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10e      	bne.n	8001550 <HAL_I2C_Init+0x1bc>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1e58      	subs	r0, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6859      	ldr	r1, [r3, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	440b      	add	r3, r1
 8001540:	fbb0 f3f3 	udiv	r3, r0, r3
 8001544:	3301      	adds	r3, #1
 8001546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800154e:	e00f      	b.n	8001570 <HAL_I2C_Init+0x1dc>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1e58      	subs	r0, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	0099      	lsls	r1, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	fbb0 f3f3 	udiv	r3, r0, r3
 8001566:	3301      	adds	r3, #1
 8001568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	6809      	ldr	r1, [r1, #0]
 8001574:	4313      	orrs	r3, r2
 8001576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69da      	ldr	r2, [r3, #28]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800159e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6911      	ldr	r1, [r2, #16]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68d2      	ldr	r2, [r2, #12]
 80015aa:	4311      	orrs	r1, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695a      	ldr	r2, [r3, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2220      	movs	r2, #32
 80015ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	000186a0 	.word	0x000186a0
 800160c:	001e847f 	.word	0x001e847f
 8001610:	003d08ff 	.word	0x003d08ff
 8001614:	431bde83 	.word	0x431bde83
 8001618:	10624dd3 	.word	0x10624dd3

0800161c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e267      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d075      	beq.n	8001726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800163a:	4b88      	ldr	r3, [pc, #544]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b04      	cmp	r3, #4
 8001644:	d00c      	beq.n	8001660 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001646:	4b85      	ldr	r3, [pc, #532]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800164e:	2b08      	cmp	r3, #8
 8001650:	d112      	bne.n	8001678 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001652:	4b82      	ldr	r3, [pc, #520]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800165a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800165e:	d10b      	bne.n	8001678 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	4b7e      	ldr	r3, [pc, #504]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d05b      	beq.n	8001724 <HAL_RCC_OscConfig+0x108>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d157      	bne.n	8001724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e242      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001680:	d106      	bne.n	8001690 <HAL_RCC_OscConfig+0x74>
 8001682:	4b76      	ldr	r3, [pc, #472]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a75      	ldr	r2, [pc, #468]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e01d      	b.n	80016cc <HAL_RCC_OscConfig+0xb0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x98>
 800169a:	4b70      	ldr	r3, [pc, #448]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a6f      	ldr	r2, [pc, #444]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b6d      	ldr	r3, [pc, #436]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6c      	ldr	r2, [pc, #432]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0xb0>
 80016b4:	4b69      	ldr	r3, [pc, #420]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a68      	ldr	r2, [pc, #416]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b66      	ldr	r3, [pc, #408]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a65      	ldr	r2, [pc, #404]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fba2 	bl	8000e1c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fb9e 	bl	8000e1c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	@ 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e207      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b5b      	ldr	r3, [pc, #364]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0xc0>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb8e 	bl	8000e1c <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fb8a 	bl	8000e1c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	@ 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1f3      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	4b51      	ldr	r3, [pc, #324]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0xe8>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d063      	beq.n	80017fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001732:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173e:	4b47      	ldr	r3, [pc, #284]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001746:	2b08      	cmp	r3, #8
 8001748:	d11c      	bne.n	8001784 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b44      	ldr	r3, [pc, #272]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d116      	bne.n	8001784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	4b41      	ldr	r3, [pc, #260]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x152>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e1c7      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b3b      	ldr	r3, [pc, #236]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4937      	ldr	r1, [pc, #220]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	e03a      	b.n	80017fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b34      	ldr	r3, [pc, #208]	@ (8001860 <HAL_RCC_OscConfig+0x244>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fb43 	bl	8000e1c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fb3f 	bl	8000e1c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1a8      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b28      	ldr	r3, [pc, #160]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4925      	ldr	r1, [pc, #148]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
 80017cc:	e015      	b.n	80017fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <HAL_RCC_OscConfig+0x244>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb22 	bl	8000e1c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff fb1e 	bl	8000e1c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e187      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d036      	beq.n	8001874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d016      	beq.n	800183c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_RCC_OscConfig+0x248>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7ff fb02 	bl	8000e1c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff fafe 	bl	8000e1c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e167      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_RCC_OscConfig+0x240>)
 8001830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x200>
 800183a:	e01b      	b.n	8001874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_RCC_OscConfig+0x248>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff faeb 	bl	8000e1c <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001848:	e00e      	b.n	8001868 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184a:	f7ff fae7 	bl	8000e1c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d907      	bls.n	8001868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e150      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
 800185c:	40023800 	.word	0x40023800
 8001860:	42470000 	.word	0x42470000
 8001864:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	4b88      	ldr	r3, [pc, #544]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 800186a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ea      	bne.n	800184a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8097 	beq.w	80019b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001886:	4b81      	ldr	r3, [pc, #516]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	4b7d      	ldr	r3, [pc, #500]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a2:	4b7a      	ldr	r3, [pc, #488]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ae:	2301      	movs	r3, #1
 80018b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b2:	4b77      	ldr	r3, [pc, #476]	@ (8001a90 <HAL_RCC_OscConfig+0x474>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d118      	bne.n	80018f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018be:	4b74      	ldr	r3, [pc, #464]	@ (8001a90 <HAL_RCC_OscConfig+0x474>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a73      	ldr	r2, [pc, #460]	@ (8001a90 <HAL_RCC_OscConfig+0x474>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ca:	f7ff faa7 	bl	8000e1c <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d2:	f7ff faa3 	bl	8000e1c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e10c      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a90 <HAL_RCC_OscConfig+0x474>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x2ea>
 80018f8:	4b64      	ldr	r3, [pc, #400]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fc:	4a63      	ldr	r2, [pc, #396]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	@ 0x70
 8001904:	e01c      	b.n	8001940 <HAL_RCC_OscConfig+0x324>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b05      	cmp	r3, #5
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x30c>
 800190e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001912:	4a5e      	ldr	r2, [pc, #376]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6713      	str	r3, [r2, #112]	@ 0x70
 800191a:	4b5c      	ldr	r3, [pc, #368]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191e:	4a5b      	ldr	r2, [pc, #364]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6713      	str	r3, [r2, #112]	@ 0x70
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0x324>
 8001928:	4b58      	ldr	r3, [pc, #352]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192c:	4a57      	ldr	r2, [pc, #348]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	6713      	str	r3, [r2, #112]	@ 0x70
 8001934:	4b55      	ldr	r3, [pc, #340]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001938:	4a54      	ldr	r2, [pc, #336]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 800193a:	f023 0304 	bic.w	r3, r3, #4
 800193e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d015      	beq.n	8001974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7ff fa68 	bl	8000e1c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff fa64 	bl	8000e1c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0cb      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001966:	4b49      	ldr	r3, [pc, #292]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0ee      	beq.n	8001950 <HAL_RCC_OscConfig+0x334>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001974:	f7ff fa52 	bl	8000e1c <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197a:	e00a      	b.n	8001992 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7ff fa4e 	bl	8000e1c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0b5      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001992:	4b3e      	ldr	r3, [pc, #248]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ee      	bne.n	800197c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a4:	4b39      	ldr	r3, [pc, #228]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	4a38      	ldr	r2, [pc, #224]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 80019aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80a1 	beq.w	8001afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ba:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d05c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d141      	bne.n	8001a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <HAL_RCC_OscConfig+0x478>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fa22 	bl	8000e1c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff fa1e 	bl	8000e1c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e087      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	4b27      	ldr	r3, [pc, #156]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	3b01      	subs	r3, #1
 8001a14:	041b      	lsls	r3, r3, #16
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	491b      	ldr	r1, [pc, #108]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <HAL_RCC_OscConfig+0x478>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f9f7 	bl	8000e1c <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f9f3 	bl	8000e1c <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e05c      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x416>
 8001a50:	e054      	b.n	8001afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_RCC_OscConfig+0x478>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff f9e0 	bl	8000e1c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f9dc 	bl	8000e1c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e045      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_RCC_OscConfig+0x470>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x444>
 8001a7e:	e03d      	b.n	8001afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e038      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40007000 	.word	0x40007000
 8001a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <HAL_RCC_OscConfig+0x4ec>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d028      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d121      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d11a      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d111      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0cc      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b68      	ldr	r3, [pc, #416]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d90c      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b65      	ldr	r3, [pc, #404]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b63      	ldr	r3, [pc, #396]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0b8      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d020      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b60:	4b59      	ldr	r3, [pc, #356]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a58      	ldr	r2, [pc, #352]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b78:	4b53      	ldr	r3, [pc, #332]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b84:	4b50      	ldr	r3, [pc, #320]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	494d      	ldr	r1, [pc, #308]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d044      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b47      	ldr	r3, [pc, #284]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d119      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e07f      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e06f      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bda:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e067      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bea:	4b37      	ldr	r3, [pc, #220]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4934      	ldr	r1, [pc, #208]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f90e 	bl	8000e1c <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff f90a 	bl	8000e1c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e04f      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 020c 	and.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1eb      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b25      	ldr	r3, [pc, #148]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d20c      	bcs.n	8001c54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e032      	b.n	8001cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4916      	ldr	r1, [pc, #88]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	490e      	ldr	r1, [pc, #56]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c92:	f000 f821 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	490a      	ldr	r1, [pc, #40]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	5ccb      	ldrb	r3, [r1, r3]
 8001ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8001caa:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f86e 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023c00 	.word	0x40023c00
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	08003970 	.word	0x08003970
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cdc:	b094      	sub	sp, #80	@ 0x50
 8001cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf0:	4b79      	ldr	r3, [pc, #484]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d00d      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x40>
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	f200 80e1 	bhi.w	8001ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x34>
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d0a:	e0db      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b73      	ldr	r3, [pc, #460]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x204>)
 8001d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d10:	e0db      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d12:	4b73      	ldr	r3, [pc, #460]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d16:	e0d8      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d18:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d20:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d22:	4b6d      	ldr	r3, [pc, #436]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d063      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	099b      	lsrs	r3, r3, #6
 8001d34:	2200      	movs	r2, #0
 8001d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	462b      	mov	r3, r5
 8001d4e:	f04f 0000 	mov.w	r0, #0
 8001d52:	f04f 0100 	mov.w	r1, #0
 8001d56:	0159      	lsls	r1, r3, #5
 8001d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d5c:	0150      	lsls	r0, r2, #5
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4621      	mov	r1, r4
 8001d64:	1a51      	subs	r1, r2, r1
 8001d66:	6139      	str	r1, [r7, #16]
 8001d68:	4629      	mov	r1, r5
 8001d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d7c:	4659      	mov	r1, fp
 8001d7e:	018b      	lsls	r3, r1, #6
 8001d80:	4651      	mov	r1, sl
 8001d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d86:	4651      	mov	r1, sl
 8001d88:	018a      	lsls	r2, r1, #6
 8001d8a:	4651      	mov	r1, sl
 8001d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d90:	4659      	mov	r1, fp
 8001d92:	eb63 0901 	sbc.w	r9, r3, r1
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001daa:	4690      	mov	r8, r2
 8001dac:	4699      	mov	r9, r3
 8001dae:	4623      	mov	r3, r4
 8001db0:	eb18 0303 	adds.w	r3, r8, r3
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	462b      	mov	r3, r5
 8001db8:	eb49 0303 	adc.w	r3, r9, r3
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dca:	4629      	mov	r1, r5
 8001dcc:	024b      	lsls	r3, r1, #9
 8001dce:	4621      	mov	r1, r4
 8001dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	024a      	lsls	r2, r1, #9
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dde:	2200      	movs	r2, #0
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001de8:	f7fe fa52 	bl	8000290 <__aeabi_uldivmod>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4613      	mov	r3, r2
 8001df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001df4:	e058      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df6:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	099b      	lsrs	r3, r3, #6
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	4611      	mov	r1, r2
 8001e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e10:	4642      	mov	r2, r8
 8001e12:	464b      	mov	r3, r9
 8001e14:	f04f 0000 	mov.w	r0, #0
 8001e18:	f04f 0100 	mov.w	r1, #0
 8001e1c:	0159      	lsls	r1, r3, #5
 8001e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e22:	0150      	lsls	r0, r2, #5
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4641      	mov	r1, r8
 8001e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e2e:	4649      	mov	r1, r9
 8001e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e48:	ebb2 040a 	subs.w	r4, r2, sl
 8001e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	00eb      	lsls	r3, r5, #3
 8001e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e5e:	00e2      	lsls	r2, r4, #3
 8001e60:	4614      	mov	r4, r2
 8001e62:	461d      	mov	r5, r3
 8001e64:	4643      	mov	r3, r8
 8001e66:	18e3      	adds	r3, r4, r3
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	eb45 0303 	adc.w	r3, r5, r3
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e7e:	4629      	mov	r1, r5
 8001e80:	028b      	lsls	r3, r1, #10
 8001e82:	4621      	mov	r1, r4
 8001e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e88:	4621      	mov	r1, r4
 8001e8a:	028a      	lsls	r2, r1, #10
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e92:	2200      	movs	r2, #0
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	61fa      	str	r2, [r7, #28]
 8001e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e9c:	f7fe f9f8 	bl	8000290 <__aeabi_uldivmod>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ec2:	e002      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3750      	adds	r7, #80	@ 0x50
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	00f42400 	.word	0x00f42400
 8001ee0:	007a1200 	.word	0x007a1200

08001ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f00:	f7ff fff0 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0a9b      	lsrs	r3, r3, #10
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	@ (8001f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	08003980 	.word	0x08003980

08001f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f28:	f7ff ffdc 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0b5b      	lsrs	r3, r3, #13
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	@ (8001f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	08003980 	.word	0x08003980

08001f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e041      	b.n	8001fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fdd2 	bl	8000b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 fa70 	bl	8002470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d001      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e044      	b.n	800208e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <HAL_TIM_Base_Start_IT+0xb0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d018      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202e:	d013      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1a      	ldr	r2, [pc, #104]	@ (80020a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00e      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a17      	ldr	r2, [pc, #92]	@ (80020a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a16      	ldr	r2, [pc, #88]	@ (80020ac <HAL_TIM_Base_Start_IT+0xc0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b06      	cmp	r3, #6
 8002068:	d010      	beq.n	800208c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207a:	e007      	b.n	800208c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	40014000 	.word	0x40014000

080020b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d020      	beq.n	8002114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01b      	beq.n	8002114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0202 	mvn.w	r2, #2
 80020e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f999 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f98b 	bl	800241e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f99c 	bl	8002446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d020      	beq.n	8002160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0204 	mvn.w	r2, #4
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f973 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f965 	bl	800241e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f976 	bl	8002446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d020      	beq.n	80021ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0208 	mvn.w	r2, #8
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2204      	movs	r2, #4
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f94d 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f93f 	bl	800241e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f950 	bl	8002446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d020      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0210 	mvn.w	r2, #16
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2208      	movs	r2, #8
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f927 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f919 	bl	800241e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f92a 	bl	8002446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00c      	beq.n	800221c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0201 	mvn.w	r2, #1
 8002214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fa00 	bl	800061c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00c      	beq.n	8002240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fab6 	bl	80027ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8fb 	bl	800245a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0220 	mvn.w	r2, #32
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fa88 	bl	8002798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_TIM_ConfigClockSource+0x1c>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e0b4      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x186>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80022ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022e4:	d03e      	beq.n	8002364 <HAL_TIM_ConfigClockSource+0xd4>
 80022e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022ea:	f200 8087 	bhi.w	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 80022ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022f2:	f000 8086 	beq.w	8002402 <HAL_TIM_ConfigClockSource+0x172>
 80022f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022fa:	d87f      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 80022fc:	2b70      	cmp	r3, #112	@ 0x70
 80022fe:	d01a      	beq.n	8002336 <HAL_TIM_ConfigClockSource+0xa6>
 8002300:	2b70      	cmp	r3, #112	@ 0x70
 8002302:	d87b      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b60      	cmp	r3, #96	@ 0x60
 8002306:	d050      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x11a>
 8002308:	2b60      	cmp	r3, #96	@ 0x60
 800230a:	d877      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b50      	cmp	r3, #80	@ 0x50
 800230e:	d03c      	beq.n	800238a <HAL_TIM_ConfigClockSource+0xfa>
 8002310:	2b50      	cmp	r3, #80	@ 0x50
 8002312:	d873      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b40      	cmp	r3, #64	@ 0x40
 8002316:	d058      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x13a>
 8002318:	2b40      	cmp	r3, #64	@ 0x40
 800231a:	d86f      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 800231c:	2b30      	cmp	r3, #48	@ 0x30
 800231e:	d064      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x15a>
 8002320:	2b30      	cmp	r3, #48	@ 0x30
 8002322:	d86b      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 8002324:	2b20      	cmp	r3, #32
 8002326:	d060      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x15a>
 8002328:	2b20      	cmp	r3, #32
 800232a:	d867      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 800232c:	2b00      	cmp	r3, #0
 800232e:	d05c      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x15a>
 8002330:	2b10      	cmp	r3, #16
 8002332:	d05a      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x15a>
 8002334:	e062      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002346:	f000 f999 	bl	800267c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	609a      	str	r2, [r3, #8]
      break;
 8002362:	e04f      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002374:	f000 f982 	bl	800267c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002386:	609a      	str	r2, [r3, #8]
      break;
 8002388:	e03c      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002396:	461a      	mov	r2, r3
 8002398:	f000 f8f6 	bl	8002588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2150      	movs	r1, #80	@ 0x50
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f94f 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 80023a8:	e02c      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023b6:	461a      	mov	r2, r3
 80023b8:	f000 f915 	bl	80025e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2160      	movs	r1, #96	@ 0x60
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f93f 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 80023c8:	e01c      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d6:	461a      	mov	r2, r3
 80023d8:	f000 f8d6 	bl	8002588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2140      	movs	r1, #64	@ 0x40
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f92f 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 80023e8:	e00c      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f000 f926 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 80023fa:	e003      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002400:	e000      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3a      	ldr	r2, [pc, #232]	@ (800256c <TIM_Base_SetConfig+0xfc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00f      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800248e:	d00b      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a37      	ldr	r2, [pc, #220]	@ (8002570 <TIM_Base_SetConfig+0x100>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a36      	ldr	r2, [pc, #216]	@ (8002574 <TIM_Base_SetConfig+0x104>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a35      	ldr	r2, [pc, #212]	@ (8002578 <TIM_Base_SetConfig+0x108>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d108      	bne.n	80024ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a2b      	ldr	r2, [pc, #172]	@ (800256c <TIM_Base_SetConfig+0xfc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01b      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c8:	d017      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a28      	ldr	r2, [pc, #160]	@ (8002570 <TIM_Base_SetConfig+0x100>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a27      	ldr	r2, [pc, #156]	@ (8002574 <TIM_Base_SetConfig+0x104>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00f      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a26      	ldr	r2, [pc, #152]	@ (8002578 <TIM_Base_SetConfig+0x108>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00b      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a25      	ldr	r2, [pc, #148]	@ (800257c <TIM_Base_SetConfig+0x10c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a24      	ldr	r2, [pc, #144]	@ (8002580 <TIM_Base_SetConfig+0x110>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a23      	ldr	r2, [pc, #140]	@ (8002584 <TIM_Base_SetConfig+0x114>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d108      	bne.n	800250c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a0e      	ldr	r2, [pc, #56]	@ (800256c <TIM_Base_SetConfig+0xfc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f023 0201 	bic.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]
  }
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40010000 	.word	0x40010000
 8002570:	40000400 	.word	0x40000400
 8002574:	40000800 	.word	0x40000800
 8002578:	40000c00 	.word	0x40000c00
 800257c:	40014000 	.word	0x40014000
 8002580:	40014400 	.word	0x40014400
 8002584:	40014800 	.word	0x40014800

08002588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f023 0201 	bic.w	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f023 030a 	bic.w	r3, r3, #10
 80025c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	621a      	str	r2, [r3, #32]
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b087      	sub	sp, #28
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 0210 	bic.w	r2, r3, #16
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	031b      	lsls	r3, r3, #12
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002622:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	621a      	str	r2, [r3, #32]
}
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800265c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	f043 0307 	orr.w	r3, r3, #7
 8002668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	021a      	lsls	r2, r3, #8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	431a      	orrs	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e050      	b.n	8002776 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1c      	ldr	r2, [pc, #112]	@ (8002784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d018      	beq.n	800274a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002720:	d013      	beq.n	800274a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a18      	ldr	r2, [pc, #96]	@ (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00e      	beq.n	800274a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a16      	ldr	r2, [pc, #88]	@ (800278c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a15      	ldr	r2, [pc, #84]	@ (8002790 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a13      	ldr	r2, [pc, #76]	@ (8002794 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10c      	bne.n	8002764 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	4313      	orrs	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000
 8002788:	40000400 	.word	0x40000400
 800278c:	40000800 	.word	0x40000800
 8002790:	40000c00 	.word	0x40000c00
 8002794:	40014000 	.word	0x40014000

08002798 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e042      	b.n	8002858 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe f9be 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2224      	movs	r2, #36	@ 0x24
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f973 	bl	8002af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	@ 0x28
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	d175      	bne.n	800296c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_UART_Transmit+0x2c>
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e06e      	b.n	800296e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2221      	movs	r2, #33	@ 0x21
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800289e:	f7fe fabd 	bl	8000e1c <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	88fa      	ldrh	r2, [r7, #6]
 80028a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028b8:	d108      	bne.n	80028cc <HAL_UART_Transmit+0x6c>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d104      	bne.n	80028cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	e003      	b.n	80028d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028d4:	e02e      	b.n	8002934 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	2180      	movs	r1, #128	@ 0x80
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f848 	bl	8002976 <UART_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e03a      	b.n	800296e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800290c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	3302      	adds	r3, #2
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	e007      	b.n	8002926 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	3301      	adds	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1cb      	bne.n	80028d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2200      	movs	r2, #0
 8002946:	2140      	movs	r1, #64	@ 0x40
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f814 	bl	8002976 <UART_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e006      	b.n	800296e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002986:	e03b      	b.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800298e:	d037      	beq.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002990:	f7fe fa44 	bl	8000e1c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	429a      	cmp	r2, r3
 800299e:	d302      	bcc.n	80029a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e03a      	b.n	8002a20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d023      	beq.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b80      	cmp	r3, #128	@ 0x80
 80029bc:	d020      	beq.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b40      	cmp	r3, #64	@ 0x40
 80029c2:	d01d      	beq.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d116      	bne.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f81d 	bl	8002a28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2208      	movs	r2, #8
 80029f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e00f      	b.n	8002a20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d0b4      	beq.n	8002988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b095      	sub	sp, #84	@ 0x54
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3a:	e853 3f00 	ldrex	r3, [r3]
 8002a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a50:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a58:	e841 2300 	strex	r3, r2, [r1]
 8002a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e5      	bne.n	8002a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3314      	adds	r3, #20
 8002a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	e853 3f00 	ldrex	r3, [r3]
 8002a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3314      	adds	r3, #20
 8002a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a8c:	e841 2300 	strex	r3, r2, [r1]
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e5      	bne.n	8002a64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d119      	bne.n	8002ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f023 0310 	bic.w	r3, r3, #16
 8002ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ac0:	61ba      	str	r2, [r7, #24]
 8002ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	6979      	ldr	r1, [r7, #20]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e5      	bne.n	8002aa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ae2:	bf00      	nop
 8002ae4:	3754      	adds	r7, #84	@ 0x54
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af4:	b0c0      	sub	sp, #256	@ 0x100
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0c:	68d9      	ldr	r1, [r3, #12]
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	ea40 0301 	orr.w	r3, r0, r1
 8002b18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b48:	f021 010c 	bic.w	r1, r1, #12
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b56:	430b      	orrs	r3, r1
 8002b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6a:	6999      	ldr	r1, [r3, #24]
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	ea40 0301 	orr.w	r3, r0, r1
 8002b76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b8f      	ldr	r3, [pc, #572]	@ (8002dbc <UART_SetConfig+0x2cc>)
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d005      	beq.n	8002b90 <UART_SetConfig+0xa0>
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc0 <UART_SetConfig+0x2d0>)
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d104      	bne.n	8002b9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b90:	f7ff f9c8 	bl	8001f24 <HAL_RCC_GetPCLK2Freq>
 8002b94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b98:	e003      	b.n	8002ba2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b9a:	f7ff f9af 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002b9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bac:	f040 810c 	bne.w	8002dc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	1891      	adds	r1, r2, r2
 8002bc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bca:	415b      	adcs	r3, r3
 8002bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	eb12 0801 	adds.w	r8, r2, r1
 8002bd8:	4629      	mov	r1, r5
 8002bda:	eb43 0901 	adc.w	r9, r3, r1
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf2:	4690      	mov	r8, r2
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	eb18 0303 	adds.w	r3, r8, r3
 8002bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c00:	462b      	mov	r3, r5
 8002c02:	eb49 0303 	adc.w	r3, r9, r3
 8002c06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c1e:	460b      	mov	r3, r1
 8002c20:	18db      	adds	r3, r3, r3
 8002c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c24:	4613      	mov	r3, r2
 8002c26:	eb42 0303 	adc.w	r3, r2, r3
 8002c2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c34:	f7fd fb2c 	bl	8000290 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4b61      	ldr	r3, [pc, #388]	@ (8002dc4 <UART_SetConfig+0x2d4>)
 8002c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	011c      	lsls	r4, r3, #4
 8002c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c58:	4642      	mov	r2, r8
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	1891      	adds	r1, r2, r2
 8002c5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c60:	415b      	adcs	r3, r3
 8002c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c68:	4641      	mov	r1, r8
 8002c6a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c6e:	4649      	mov	r1, r9
 8002c70:	eb43 0b01 	adc.w	fp, r3, r1
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c88:	4692      	mov	sl, r2
 8002c8a:	469b      	mov	fp, r3
 8002c8c:	4643      	mov	r3, r8
 8002c8e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c96:	464b      	mov	r3, r9
 8002c98:	eb4b 0303 	adc.w	r3, fp, r3
 8002c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002cb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	18db      	adds	r3, r3, r3
 8002cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cba:	4613      	mov	r3, r2
 8002cbc:	eb42 0303 	adc.w	r3, r2, r3
 8002cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cca:	f7fd fae1 	bl	8000290 <__aeabi_uldivmod>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc4 <UART_SetConfig+0x2d4>)
 8002cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2264      	movs	r2, #100	@ 0x64
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	1acb      	subs	r3, r1, r3
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cea:	4b36      	ldr	r3, [pc, #216]	@ (8002dc4 <UART_SetConfig+0x2d4>)
 8002cec:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cf8:	441c      	add	r4, r3
 8002cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	464b      	mov	r3, r9
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d14:	415b      	adcs	r3, r3
 8002d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	1851      	adds	r1, r2, r1
 8002d20:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d22:	4649      	mov	r1, r9
 8002d24:	414b      	adcs	r3, r1
 8002d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d34:	4659      	mov	r1, fp
 8002d36:	00cb      	lsls	r3, r1, #3
 8002d38:	4651      	mov	r1, sl
 8002d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3e:	4651      	mov	r1, sl
 8002d40:	00ca      	lsls	r2, r1, #3
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	4642      	mov	r2, r8
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d50:	464b      	mov	r3, r9
 8002d52:	460a      	mov	r2, r1
 8002d54:	eb42 0303 	adc.w	r3, r2, r3
 8002d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d70:	460b      	mov	r3, r1
 8002d72:	18db      	adds	r3, r3, r3
 8002d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d76:	4613      	mov	r3, r2
 8002d78:	eb42 0303 	adc.w	r3, r2, r3
 8002d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d86:	f7fd fa83 	bl	8000290 <__aeabi_uldivmod>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <UART_SetConfig+0x2d4>)
 8002d90:	fba3 1302 	umull	r1, r3, r3, r2
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	2164      	movs	r1, #100	@ 0x64
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	3332      	adds	r3, #50	@ 0x32
 8002da2:	4a08      	ldr	r2, [pc, #32]	@ (8002dc4 <UART_SetConfig+0x2d4>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	f003 0207 	and.w	r2, r3, #7
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4422      	add	r2, r4
 8002db6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002db8:	e106      	b.n	8002fc8 <UART_SetConfig+0x4d8>
 8002dba:	bf00      	nop
 8002dbc:	40011000 	.word	0x40011000
 8002dc0:	40011400 	.word	0x40011400
 8002dc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002dd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002dd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dda:	4642      	mov	r2, r8
 8002ddc:	464b      	mov	r3, r9
 8002dde:	1891      	adds	r1, r2, r2
 8002de0:	6239      	str	r1, [r7, #32]
 8002de2:	415b      	adcs	r3, r3
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dea:	4641      	mov	r1, r8
 8002dec:	1854      	adds	r4, r2, r1
 8002dee:	4649      	mov	r1, r9
 8002df0:	eb43 0501 	adc.w	r5, r3, r1
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	00eb      	lsls	r3, r5, #3
 8002dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e02:	00e2      	lsls	r2, r4, #3
 8002e04:	4614      	mov	r4, r2
 8002e06:	461d      	mov	r5, r3
 8002e08:	4643      	mov	r3, r8
 8002e0a:	18e3      	adds	r3, r4, r3
 8002e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e10:	464b      	mov	r3, r9
 8002e12:	eb45 0303 	adc.w	r3, r5, r3
 8002e16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e36:	4629      	mov	r1, r5
 8002e38:	008b      	lsls	r3, r1, #2
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e40:	4621      	mov	r1, r4
 8002e42:	008a      	lsls	r2, r1, #2
 8002e44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e48:	f7fd fa22 	bl	8000290 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4b60      	ldr	r3, [pc, #384]	@ (8002fd4 <UART_SetConfig+0x4e4>)
 8002e52:	fba3 2302 	umull	r2, r3, r3, r2
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	011c      	lsls	r4, r3, #4
 8002e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	464b      	mov	r3, r9
 8002e70:	1891      	adds	r1, r2, r2
 8002e72:	61b9      	str	r1, [r7, #24]
 8002e74:	415b      	adcs	r3, r3
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	1851      	adds	r1, r2, r1
 8002e80:	6139      	str	r1, [r7, #16]
 8002e82:	4649      	mov	r1, r9
 8002e84:	414b      	adcs	r3, r1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e94:	4659      	mov	r1, fp
 8002e96:	00cb      	lsls	r3, r1, #3
 8002e98:	4651      	mov	r1, sl
 8002e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	00ca      	lsls	r2, r1, #3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	eb42 0303 	adc.w	r3, r2, r3
 8002eb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ec6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	008b      	lsls	r3, r1, #2
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ede:	4641      	mov	r1, r8
 8002ee0:	008a      	lsls	r2, r1, #2
 8002ee2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ee6:	f7fd f9d3 	bl	8000290 <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4b38      	ldr	r3, [pc, #224]	@ (8002fd4 <UART_SetConfig+0x4e4>)
 8002ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2264      	movs	r2, #100	@ 0x64
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	1acb      	subs	r3, r1, r3
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	3332      	adds	r3, #50	@ 0x32
 8002f04:	4a33      	ldr	r2, [pc, #204]	@ (8002fd4 <UART_SetConfig+0x4e4>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f10:	441c      	add	r4, r3
 8002f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f16:	2200      	movs	r2, #0
 8002f18:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f20:	4642      	mov	r2, r8
 8002f22:	464b      	mov	r3, r9
 8002f24:	1891      	adds	r1, r2, r2
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	415b      	adcs	r3, r3
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f30:	4641      	mov	r1, r8
 8002f32:	1851      	adds	r1, r2, r1
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	4649      	mov	r1, r9
 8002f38:	414b      	adcs	r3, r1
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f48:	4659      	mov	r1, fp
 8002f4a:	00cb      	lsls	r3, r1, #3
 8002f4c:	4651      	mov	r1, sl
 8002f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f52:	4651      	mov	r1, sl
 8002f54:	00ca      	lsls	r2, r1, #3
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f62:	464b      	mov	r3, r9
 8002f64:	460a      	mov	r2, r1
 8002f66:	eb42 0303 	adc.w	r3, r2, r3
 8002f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f76:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f84:	4649      	mov	r1, r9
 8002f86:	008b      	lsls	r3, r1, #2
 8002f88:	4641      	mov	r1, r8
 8002f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f8e:	4641      	mov	r1, r8
 8002f90:	008a      	lsls	r2, r1, #2
 8002f92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f96:	f7fd f97b 	bl	8000290 <__aeabi_uldivmod>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <UART_SetConfig+0x4e4>)
 8002fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	2164      	movs	r1, #100	@ 0x64
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	3332      	adds	r3, #50	@ 0x32
 8002fb2:	4a08      	ldr	r2, [pc, #32]	@ (8002fd4 <UART_SetConfig+0x4e4>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	f003 020f 	and.w	r2, r3, #15
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4422      	add	r2, r4
 8002fc6:	609a      	str	r2, [r3, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd4:	51eb851f 	.word	0x51eb851f

08002fd8 <sniprintf>:
 8002fd8:	b40c      	push	{r2, r3}
 8002fda:	b530      	push	{r4, r5, lr}
 8002fdc:	4b17      	ldr	r3, [pc, #92]	@ (800303c <sniprintf+0x64>)
 8002fde:	1e0c      	subs	r4, r1, #0
 8002fe0:	681d      	ldr	r5, [r3, #0]
 8002fe2:	b09d      	sub	sp, #116	@ 0x74
 8002fe4:	da08      	bge.n	8002ff8 <sniprintf+0x20>
 8002fe6:	238b      	movs	r3, #139	@ 0x8b
 8002fe8:	602b      	str	r3, [r5, #0]
 8002fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fee:	b01d      	add	sp, #116	@ 0x74
 8002ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ff4:	b002      	add	sp, #8
 8002ff6:	4770      	bx	lr
 8002ff8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002ffc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003000:	bf14      	ite	ne
 8003002:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003006:	4623      	moveq	r3, r4
 8003008:	9304      	str	r3, [sp, #16]
 800300a:	9307      	str	r3, [sp, #28]
 800300c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003010:	9002      	str	r0, [sp, #8]
 8003012:	9006      	str	r0, [sp, #24]
 8003014:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003018:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800301a:	ab21      	add	r3, sp, #132	@ 0x84
 800301c:	a902      	add	r1, sp, #8
 800301e:	4628      	mov	r0, r5
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	f000 f995 	bl	8003350 <_svfiprintf_r>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	bfbc      	itt	lt
 800302a:	238b      	movlt	r3, #139	@ 0x8b
 800302c:	602b      	strlt	r3, [r5, #0]
 800302e:	2c00      	cmp	r4, #0
 8003030:	d0dd      	beq.n	8002fee <sniprintf+0x16>
 8003032:	9b02      	ldr	r3, [sp, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e7d9      	b.n	8002fee <sniprintf+0x16>
 800303a:	bf00      	nop
 800303c:	2000000c 	.word	0x2000000c

08003040 <memset>:
 8003040:	4402      	add	r2, r0
 8003042:	4603      	mov	r3, r0
 8003044:	4293      	cmp	r3, r2
 8003046:	d100      	bne.n	800304a <memset+0xa>
 8003048:	4770      	bx	lr
 800304a:	f803 1b01 	strb.w	r1, [r3], #1
 800304e:	e7f9      	b.n	8003044 <memset+0x4>

08003050 <__errno>:
 8003050:	4b01      	ldr	r3, [pc, #4]	@ (8003058 <__errno+0x8>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	2000000c 	.word	0x2000000c

0800305c <__libc_init_array>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	4d0d      	ldr	r5, [pc, #52]	@ (8003094 <__libc_init_array+0x38>)
 8003060:	4c0d      	ldr	r4, [pc, #52]	@ (8003098 <__libc_init_array+0x3c>)
 8003062:	1b64      	subs	r4, r4, r5
 8003064:	10a4      	asrs	r4, r4, #2
 8003066:	2600      	movs	r6, #0
 8003068:	42a6      	cmp	r6, r4
 800306a:	d109      	bne.n	8003080 <__libc_init_array+0x24>
 800306c:	4d0b      	ldr	r5, [pc, #44]	@ (800309c <__libc_init_array+0x40>)
 800306e:	4c0c      	ldr	r4, [pc, #48]	@ (80030a0 <__libc_init_array+0x44>)
 8003070:	f000 fc66 	bl	8003940 <_init>
 8003074:	1b64      	subs	r4, r4, r5
 8003076:	10a4      	asrs	r4, r4, #2
 8003078:	2600      	movs	r6, #0
 800307a:	42a6      	cmp	r6, r4
 800307c:	d105      	bne.n	800308a <__libc_init_array+0x2e>
 800307e:	bd70      	pop	{r4, r5, r6, pc}
 8003080:	f855 3b04 	ldr.w	r3, [r5], #4
 8003084:	4798      	blx	r3
 8003086:	3601      	adds	r6, #1
 8003088:	e7ee      	b.n	8003068 <__libc_init_array+0xc>
 800308a:	f855 3b04 	ldr.w	r3, [r5], #4
 800308e:	4798      	blx	r3
 8003090:	3601      	adds	r6, #1
 8003092:	e7f2      	b.n	800307a <__libc_init_array+0x1e>
 8003094:	080039c4 	.word	0x080039c4
 8003098:	080039c4 	.word	0x080039c4
 800309c:	080039c4 	.word	0x080039c4
 80030a0:	080039c8 	.word	0x080039c8

080030a4 <__retarget_lock_acquire_recursive>:
 80030a4:	4770      	bx	lr

080030a6 <__retarget_lock_release_recursive>:
 80030a6:	4770      	bx	lr

080030a8 <_free_r>:
 80030a8:	b538      	push	{r3, r4, r5, lr}
 80030aa:	4605      	mov	r5, r0
 80030ac:	2900      	cmp	r1, #0
 80030ae:	d041      	beq.n	8003134 <_free_r+0x8c>
 80030b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030b4:	1f0c      	subs	r4, r1, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bfb8      	it	lt
 80030ba:	18e4      	addlt	r4, r4, r3
 80030bc:	f000 f8e0 	bl	8003280 <__malloc_lock>
 80030c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <_free_r+0x90>)
 80030c2:	6813      	ldr	r3, [r2, #0]
 80030c4:	b933      	cbnz	r3, 80030d4 <_free_r+0x2c>
 80030c6:	6063      	str	r3, [r4, #4]
 80030c8:	6014      	str	r4, [r2, #0]
 80030ca:	4628      	mov	r0, r5
 80030cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030d0:	f000 b8dc 	b.w	800328c <__malloc_unlock>
 80030d4:	42a3      	cmp	r3, r4
 80030d6:	d908      	bls.n	80030ea <_free_r+0x42>
 80030d8:	6820      	ldr	r0, [r4, #0]
 80030da:	1821      	adds	r1, r4, r0
 80030dc:	428b      	cmp	r3, r1
 80030de:	bf01      	itttt	eq
 80030e0:	6819      	ldreq	r1, [r3, #0]
 80030e2:	685b      	ldreq	r3, [r3, #4]
 80030e4:	1809      	addeq	r1, r1, r0
 80030e6:	6021      	streq	r1, [r4, #0]
 80030e8:	e7ed      	b.n	80030c6 <_free_r+0x1e>
 80030ea:	461a      	mov	r2, r3
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	b10b      	cbz	r3, 80030f4 <_free_r+0x4c>
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	d9fa      	bls.n	80030ea <_free_r+0x42>
 80030f4:	6811      	ldr	r1, [r2, #0]
 80030f6:	1850      	adds	r0, r2, r1
 80030f8:	42a0      	cmp	r0, r4
 80030fa:	d10b      	bne.n	8003114 <_free_r+0x6c>
 80030fc:	6820      	ldr	r0, [r4, #0]
 80030fe:	4401      	add	r1, r0
 8003100:	1850      	adds	r0, r2, r1
 8003102:	4283      	cmp	r3, r0
 8003104:	6011      	str	r1, [r2, #0]
 8003106:	d1e0      	bne.n	80030ca <_free_r+0x22>
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	6053      	str	r3, [r2, #4]
 800310e:	4408      	add	r0, r1
 8003110:	6010      	str	r0, [r2, #0]
 8003112:	e7da      	b.n	80030ca <_free_r+0x22>
 8003114:	d902      	bls.n	800311c <_free_r+0x74>
 8003116:	230c      	movs	r3, #12
 8003118:	602b      	str	r3, [r5, #0]
 800311a:	e7d6      	b.n	80030ca <_free_r+0x22>
 800311c:	6820      	ldr	r0, [r4, #0]
 800311e:	1821      	adds	r1, r4, r0
 8003120:	428b      	cmp	r3, r1
 8003122:	bf04      	itt	eq
 8003124:	6819      	ldreq	r1, [r3, #0]
 8003126:	685b      	ldreq	r3, [r3, #4]
 8003128:	6063      	str	r3, [r4, #4]
 800312a:	bf04      	itt	eq
 800312c:	1809      	addeq	r1, r1, r0
 800312e:	6021      	streq	r1, [r4, #0]
 8003130:	6054      	str	r4, [r2, #4]
 8003132:	e7ca      	b.n	80030ca <_free_r+0x22>
 8003134:	bd38      	pop	{r3, r4, r5, pc}
 8003136:	bf00      	nop
 8003138:	200002b0 	.word	0x200002b0

0800313c <sbrk_aligned>:
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	4e0f      	ldr	r6, [pc, #60]	@ (800317c <sbrk_aligned+0x40>)
 8003140:	460c      	mov	r4, r1
 8003142:	6831      	ldr	r1, [r6, #0]
 8003144:	4605      	mov	r5, r0
 8003146:	b911      	cbnz	r1, 800314e <sbrk_aligned+0x12>
 8003148:	f000 fba6 	bl	8003898 <_sbrk_r>
 800314c:	6030      	str	r0, [r6, #0]
 800314e:	4621      	mov	r1, r4
 8003150:	4628      	mov	r0, r5
 8003152:	f000 fba1 	bl	8003898 <_sbrk_r>
 8003156:	1c43      	adds	r3, r0, #1
 8003158:	d103      	bne.n	8003162 <sbrk_aligned+0x26>
 800315a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800315e:	4620      	mov	r0, r4
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	1cc4      	adds	r4, r0, #3
 8003164:	f024 0403 	bic.w	r4, r4, #3
 8003168:	42a0      	cmp	r0, r4
 800316a:	d0f8      	beq.n	800315e <sbrk_aligned+0x22>
 800316c:	1a21      	subs	r1, r4, r0
 800316e:	4628      	mov	r0, r5
 8003170:	f000 fb92 	bl	8003898 <_sbrk_r>
 8003174:	3001      	adds	r0, #1
 8003176:	d1f2      	bne.n	800315e <sbrk_aligned+0x22>
 8003178:	e7ef      	b.n	800315a <sbrk_aligned+0x1e>
 800317a:	bf00      	nop
 800317c:	200002ac 	.word	0x200002ac

08003180 <_malloc_r>:
 8003180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003184:	1ccd      	adds	r5, r1, #3
 8003186:	f025 0503 	bic.w	r5, r5, #3
 800318a:	3508      	adds	r5, #8
 800318c:	2d0c      	cmp	r5, #12
 800318e:	bf38      	it	cc
 8003190:	250c      	movcc	r5, #12
 8003192:	2d00      	cmp	r5, #0
 8003194:	4606      	mov	r6, r0
 8003196:	db01      	blt.n	800319c <_malloc_r+0x1c>
 8003198:	42a9      	cmp	r1, r5
 800319a:	d904      	bls.n	80031a6 <_malloc_r+0x26>
 800319c:	230c      	movs	r3, #12
 800319e:	6033      	str	r3, [r6, #0]
 80031a0:	2000      	movs	r0, #0
 80031a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800327c <_malloc_r+0xfc>
 80031aa:	f000 f869 	bl	8003280 <__malloc_lock>
 80031ae:	f8d8 3000 	ldr.w	r3, [r8]
 80031b2:	461c      	mov	r4, r3
 80031b4:	bb44      	cbnz	r4, 8003208 <_malloc_r+0x88>
 80031b6:	4629      	mov	r1, r5
 80031b8:	4630      	mov	r0, r6
 80031ba:	f7ff ffbf 	bl	800313c <sbrk_aligned>
 80031be:	1c43      	adds	r3, r0, #1
 80031c0:	4604      	mov	r4, r0
 80031c2:	d158      	bne.n	8003276 <_malloc_r+0xf6>
 80031c4:	f8d8 4000 	ldr.w	r4, [r8]
 80031c8:	4627      	mov	r7, r4
 80031ca:	2f00      	cmp	r7, #0
 80031cc:	d143      	bne.n	8003256 <_malloc_r+0xd6>
 80031ce:	2c00      	cmp	r4, #0
 80031d0:	d04b      	beq.n	800326a <_malloc_r+0xea>
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	4639      	mov	r1, r7
 80031d6:	4630      	mov	r0, r6
 80031d8:	eb04 0903 	add.w	r9, r4, r3
 80031dc:	f000 fb5c 	bl	8003898 <_sbrk_r>
 80031e0:	4581      	cmp	r9, r0
 80031e2:	d142      	bne.n	800326a <_malloc_r+0xea>
 80031e4:	6821      	ldr	r1, [r4, #0]
 80031e6:	1a6d      	subs	r5, r5, r1
 80031e8:	4629      	mov	r1, r5
 80031ea:	4630      	mov	r0, r6
 80031ec:	f7ff ffa6 	bl	800313c <sbrk_aligned>
 80031f0:	3001      	adds	r0, #1
 80031f2:	d03a      	beq.n	800326a <_malloc_r+0xea>
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	442b      	add	r3, r5
 80031f8:	6023      	str	r3, [r4, #0]
 80031fa:	f8d8 3000 	ldr.w	r3, [r8]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	bb62      	cbnz	r2, 800325c <_malloc_r+0xdc>
 8003202:	f8c8 7000 	str.w	r7, [r8]
 8003206:	e00f      	b.n	8003228 <_malloc_r+0xa8>
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	1b52      	subs	r2, r2, r5
 800320c:	d420      	bmi.n	8003250 <_malloc_r+0xd0>
 800320e:	2a0b      	cmp	r2, #11
 8003210:	d917      	bls.n	8003242 <_malloc_r+0xc2>
 8003212:	1961      	adds	r1, r4, r5
 8003214:	42a3      	cmp	r3, r4
 8003216:	6025      	str	r5, [r4, #0]
 8003218:	bf18      	it	ne
 800321a:	6059      	strne	r1, [r3, #4]
 800321c:	6863      	ldr	r3, [r4, #4]
 800321e:	bf08      	it	eq
 8003220:	f8c8 1000 	streq.w	r1, [r8]
 8003224:	5162      	str	r2, [r4, r5]
 8003226:	604b      	str	r3, [r1, #4]
 8003228:	4630      	mov	r0, r6
 800322a:	f000 f82f 	bl	800328c <__malloc_unlock>
 800322e:	f104 000b 	add.w	r0, r4, #11
 8003232:	1d23      	adds	r3, r4, #4
 8003234:	f020 0007 	bic.w	r0, r0, #7
 8003238:	1ac2      	subs	r2, r0, r3
 800323a:	bf1c      	itt	ne
 800323c:	1a1b      	subne	r3, r3, r0
 800323e:	50a3      	strne	r3, [r4, r2]
 8003240:	e7af      	b.n	80031a2 <_malloc_r+0x22>
 8003242:	6862      	ldr	r2, [r4, #4]
 8003244:	42a3      	cmp	r3, r4
 8003246:	bf0c      	ite	eq
 8003248:	f8c8 2000 	streq.w	r2, [r8]
 800324c:	605a      	strne	r2, [r3, #4]
 800324e:	e7eb      	b.n	8003228 <_malloc_r+0xa8>
 8003250:	4623      	mov	r3, r4
 8003252:	6864      	ldr	r4, [r4, #4]
 8003254:	e7ae      	b.n	80031b4 <_malloc_r+0x34>
 8003256:	463c      	mov	r4, r7
 8003258:	687f      	ldr	r7, [r7, #4]
 800325a:	e7b6      	b.n	80031ca <_malloc_r+0x4a>
 800325c:	461a      	mov	r2, r3
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	42a3      	cmp	r3, r4
 8003262:	d1fb      	bne.n	800325c <_malloc_r+0xdc>
 8003264:	2300      	movs	r3, #0
 8003266:	6053      	str	r3, [r2, #4]
 8003268:	e7de      	b.n	8003228 <_malloc_r+0xa8>
 800326a:	230c      	movs	r3, #12
 800326c:	6033      	str	r3, [r6, #0]
 800326e:	4630      	mov	r0, r6
 8003270:	f000 f80c 	bl	800328c <__malloc_unlock>
 8003274:	e794      	b.n	80031a0 <_malloc_r+0x20>
 8003276:	6005      	str	r5, [r0, #0]
 8003278:	e7d6      	b.n	8003228 <_malloc_r+0xa8>
 800327a:	bf00      	nop
 800327c:	200002b0 	.word	0x200002b0

08003280 <__malloc_lock>:
 8003280:	4801      	ldr	r0, [pc, #4]	@ (8003288 <__malloc_lock+0x8>)
 8003282:	f7ff bf0f 	b.w	80030a4 <__retarget_lock_acquire_recursive>
 8003286:	bf00      	nop
 8003288:	200002a8 	.word	0x200002a8

0800328c <__malloc_unlock>:
 800328c:	4801      	ldr	r0, [pc, #4]	@ (8003294 <__malloc_unlock+0x8>)
 800328e:	f7ff bf0a 	b.w	80030a6 <__retarget_lock_release_recursive>
 8003292:	bf00      	nop
 8003294:	200002a8 	.word	0x200002a8

08003298 <__ssputs_r>:
 8003298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800329c:	688e      	ldr	r6, [r1, #8]
 800329e:	461f      	mov	r7, r3
 80032a0:	42be      	cmp	r6, r7
 80032a2:	680b      	ldr	r3, [r1, #0]
 80032a4:	4682      	mov	sl, r0
 80032a6:	460c      	mov	r4, r1
 80032a8:	4690      	mov	r8, r2
 80032aa:	d82d      	bhi.n	8003308 <__ssputs_r+0x70>
 80032ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80032b4:	d026      	beq.n	8003304 <__ssputs_r+0x6c>
 80032b6:	6965      	ldr	r5, [r4, #20]
 80032b8:	6909      	ldr	r1, [r1, #16]
 80032ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032be:	eba3 0901 	sub.w	r9, r3, r1
 80032c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032c6:	1c7b      	adds	r3, r7, #1
 80032c8:	444b      	add	r3, r9
 80032ca:	106d      	asrs	r5, r5, #1
 80032cc:	429d      	cmp	r5, r3
 80032ce:	bf38      	it	cc
 80032d0:	461d      	movcc	r5, r3
 80032d2:	0553      	lsls	r3, r2, #21
 80032d4:	d527      	bpl.n	8003326 <__ssputs_r+0x8e>
 80032d6:	4629      	mov	r1, r5
 80032d8:	f7ff ff52 	bl	8003180 <_malloc_r>
 80032dc:	4606      	mov	r6, r0
 80032de:	b360      	cbz	r0, 800333a <__ssputs_r+0xa2>
 80032e0:	6921      	ldr	r1, [r4, #16]
 80032e2:	464a      	mov	r2, r9
 80032e4:	f000 fae8 	bl	80038b8 <memcpy>
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f2:	81a3      	strh	r3, [r4, #12]
 80032f4:	6126      	str	r6, [r4, #16]
 80032f6:	6165      	str	r5, [r4, #20]
 80032f8:	444e      	add	r6, r9
 80032fa:	eba5 0509 	sub.w	r5, r5, r9
 80032fe:	6026      	str	r6, [r4, #0]
 8003300:	60a5      	str	r5, [r4, #8]
 8003302:	463e      	mov	r6, r7
 8003304:	42be      	cmp	r6, r7
 8003306:	d900      	bls.n	800330a <__ssputs_r+0x72>
 8003308:	463e      	mov	r6, r7
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	4632      	mov	r2, r6
 800330e:	4641      	mov	r1, r8
 8003310:	f000 faa8 	bl	8003864 <memmove>
 8003314:	68a3      	ldr	r3, [r4, #8]
 8003316:	1b9b      	subs	r3, r3, r6
 8003318:	60a3      	str	r3, [r4, #8]
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	4433      	add	r3, r6
 800331e:	6023      	str	r3, [r4, #0]
 8003320:	2000      	movs	r0, #0
 8003322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003326:	462a      	mov	r2, r5
 8003328:	f000 fad4 	bl	80038d4 <_realloc_r>
 800332c:	4606      	mov	r6, r0
 800332e:	2800      	cmp	r0, #0
 8003330:	d1e0      	bne.n	80032f4 <__ssputs_r+0x5c>
 8003332:	6921      	ldr	r1, [r4, #16]
 8003334:	4650      	mov	r0, sl
 8003336:	f7ff feb7 	bl	80030a8 <_free_r>
 800333a:	230c      	movs	r3, #12
 800333c:	f8ca 3000 	str.w	r3, [sl]
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003346:	81a3      	strh	r3, [r4, #12]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800334c:	e7e9      	b.n	8003322 <__ssputs_r+0x8a>
	...

08003350 <_svfiprintf_r>:
 8003350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003354:	4698      	mov	r8, r3
 8003356:	898b      	ldrh	r3, [r1, #12]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	b09d      	sub	sp, #116	@ 0x74
 800335c:	4607      	mov	r7, r0
 800335e:	460d      	mov	r5, r1
 8003360:	4614      	mov	r4, r2
 8003362:	d510      	bpl.n	8003386 <_svfiprintf_r+0x36>
 8003364:	690b      	ldr	r3, [r1, #16]
 8003366:	b973      	cbnz	r3, 8003386 <_svfiprintf_r+0x36>
 8003368:	2140      	movs	r1, #64	@ 0x40
 800336a:	f7ff ff09 	bl	8003180 <_malloc_r>
 800336e:	6028      	str	r0, [r5, #0]
 8003370:	6128      	str	r0, [r5, #16]
 8003372:	b930      	cbnz	r0, 8003382 <_svfiprintf_r+0x32>
 8003374:	230c      	movs	r3, #12
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800337c:	b01d      	add	sp, #116	@ 0x74
 800337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003382:	2340      	movs	r3, #64	@ 0x40
 8003384:	616b      	str	r3, [r5, #20]
 8003386:	2300      	movs	r3, #0
 8003388:	9309      	str	r3, [sp, #36]	@ 0x24
 800338a:	2320      	movs	r3, #32
 800338c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003390:	f8cd 800c 	str.w	r8, [sp, #12]
 8003394:	2330      	movs	r3, #48	@ 0x30
 8003396:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003534 <_svfiprintf_r+0x1e4>
 800339a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800339e:	f04f 0901 	mov.w	r9, #1
 80033a2:	4623      	mov	r3, r4
 80033a4:	469a      	mov	sl, r3
 80033a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033aa:	b10a      	cbz	r2, 80033b0 <_svfiprintf_r+0x60>
 80033ac:	2a25      	cmp	r2, #37	@ 0x25
 80033ae:	d1f9      	bne.n	80033a4 <_svfiprintf_r+0x54>
 80033b0:	ebba 0b04 	subs.w	fp, sl, r4
 80033b4:	d00b      	beq.n	80033ce <_svfiprintf_r+0x7e>
 80033b6:	465b      	mov	r3, fp
 80033b8:	4622      	mov	r2, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	4638      	mov	r0, r7
 80033be:	f7ff ff6b 	bl	8003298 <__ssputs_r>
 80033c2:	3001      	adds	r0, #1
 80033c4:	f000 80a7 	beq.w	8003516 <_svfiprintf_r+0x1c6>
 80033c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033ca:	445a      	add	r2, fp
 80033cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80033ce:	f89a 3000 	ldrb.w	r3, [sl]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 809f 	beq.w	8003516 <_svfiprintf_r+0x1c6>
 80033d8:	2300      	movs	r3, #0
 80033da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033e2:	f10a 0a01 	add.w	sl, sl, #1
 80033e6:	9304      	str	r3, [sp, #16]
 80033e8:	9307      	str	r3, [sp, #28]
 80033ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80033f0:	4654      	mov	r4, sl
 80033f2:	2205      	movs	r2, #5
 80033f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f8:	484e      	ldr	r0, [pc, #312]	@ (8003534 <_svfiprintf_r+0x1e4>)
 80033fa:	f7fc fef9 	bl	80001f0 <memchr>
 80033fe:	9a04      	ldr	r2, [sp, #16]
 8003400:	b9d8      	cbnz	r0, 800343a <_svfiprintf_r+0xea>
 8003402:	06d0      	lsls	r0, r2, #27
 8003404:	bf44      	itt	mi
 8003406:	2320      	movmi	r3, #32
 8003408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800340c:	0711      	lsls	r1, r2, #28
 800340e:	bf44      	itt	mi
 8003410:	232b      	movmi	r3, #43	@ 0x2b
 8003412:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003416:	f89a 3000 	ldrb.w	r3, [sl]
 800341a:	2b2a      	cmp	r3, #42	@ 0x2a
 800341c:	d015      	beq.n	800344a <_svfiprintf_r+0xfa>
 800341e:	9a07      	ldr	r2, [sp, #28]
 8003420:	4654      	mov	r4, sl
 8003422:	2000      	movs	r0, #0
 8003424:	f04f 0c0a 	mov.w	ip, #10
 8003428:	4621      	mov	r1, r4
 800342a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800342e:	3b30      	subs	r3, #48	@ 0x30
 8003430:	2b09      	cmp	r3, #9
 8003432:	d94b      	bls.n	80034cc <_svfiprintf_r+0x17c>
 8003434:	b1b0      	cbz	r0, 8003464 <_svfiprintf_r+0x114>
 8003436:	9207      	str	r2, [sp, #28]
 8003438:	e014      	b.n	8003464 <_svfiprintf_r+0x114>
 800343a:	eba0 0308 	sub.w	r3, r0, r8
 800343e:	fa09 f303 	lsl.w	r3, r9, r3
 8003442:	4313      	orrs	r3, r2
 8003444:	9304      	str	r3, [sp, #16]
 8003446:	46a2      	mov	sl, r4
 8003448:	e7d2      	b.n	80033f0 <_svfiprintf_r+0xa0>
 800344a:	9b03      	ldr	r3, [sp, #12]
 800344c:	1d19      	adds	r1, r3, #4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	9103      	str	r1, [sp, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	bfbb      	ittet	lt
 8003456:	425b      	neglt	r3, r3
 8003458:	f042 0202 	orrlt.w	r2, r2, #2
 800345c:	9307      	strge	r3, [sp, #28]
 800345e:	9307      	strlt	r3, [sp, #28]
 8003460:	bfb8      	it	lt
 8003462:	9204      	strlt	r2, [sp, #16]
 8003464:	7823      	ldrb	r3, [r4, #0]
 8003466:	2b2e      	cmp	r3, #46	@ 0x2e
 8003468:	d10a      	bne.n	8003480 <_svfiprintf_r+0x130>
 800346a:	7863      	ldrb	r3, [r4, #1]
 800346c:	2b2a      	cmp	r3, #42	@ 0x2a
 800346e:	d132      	bne.n	80034d6 <_svfiprintf_r+0x186>
 8003470:	9b03      	ldr	r3, [sp, #12]
 8003472:	1d1a      	adds	r2, r3, #4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	9203      	str	r2, [sp, #12]
 8003478:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800347c:	3402      	adds	r4, #2
 800347e:	9305      	str	r3, [sp, #20]
 8003480:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003544 <_svfiprintf_r+0x1f4>
 8003484:	7821      	ldrb	r1, [r4, #0]
 8003486:	2203      	movs	r2, #3
 8003488:	4650      	mov	r0, sl
 800348a:	f7fc feb1 	bl	80001f0 <memchr>
 800348e:	b138      	cbz	r0, 80034a0 <_svfiprintf_r+0x150>
 8003490:	9b04      	ldr	r3, [sp, #16]
 8003492:	eba0 000a 	sub.w	r0, r0, sl
 8003496:	2240      	movs	r2, #64	@ 0x40
 8003498:	4082      	lsls	r2, r0
 800349a:	4313      	orrs	r3, r2
 800349c:	3401      	adds	r4, #1
 800349e:	9304      	str	r3, [sp, #16]
 80034a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a4:	4824      	ldr	r0, [pc, #144]	@ (8003538 <_svfiprintf_r+0x1e8>)
 80034a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034aa:	2206      	movs	r2, #6
 80034ac:	f7fc fea0 	bl	80001f0 <memchr>
 80034b0:	2800      	cmp	r0, #0
 80034b2:	d036      	beq.n	8003522 <_svfiprintf_r+0x1d2>
 80034b4:	4b21      	ldr	r3, [pc, #132]	@ (800353c <_svfiprintf_r+0x1ec>)
 80034b6:	bb1b      	cbnz	r3, 8003500 <_svfiprintf_r+0x1b0>
 80034b8:	9b03      	ldr	r3, [sp, #12]
 80034ba:	3307      	adds	r3, #7
 80034bc:	f023 0307 	bic.w	r3, r3, #7
 80034c0:	3308      	adds	r3, #8
 80034c2:	9303      	str	r3, [sp, #12]
 80034c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034c6:	4433      	add	r3, r6
 80034c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ca:	e76a      	b.n	80033a2 <_svfiprintf_r+0x52>
 80034cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80034d0:	460c      	mov	r4, r1
 80034d2:	2001      	movs	r0, #1
 80034d4:	e7a8      	b.n	8003428 <_svfiprintf_r+0xd8>
 80034d6:	2300      	movs	r3, #0
 80034d8:	3401      	adds	r4, #1
 80034da:	9305      	str	r3, [sp, #20]
 80034dc:	4619      	mov	r1, r3
 80034de:	f04f 0c0a 	mov.w	ip, #10
 80034e2:	4620      	mov	r0, r4
 80034e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034e8:	3a30      	subs	r2, #48	@ 0x30
 80034ea:	2a09      	cmp	r2, #9
 80034ec:	d903      	bls.n	80034f6 <_svfiprintf_r+0x1a6>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0c6      	beq.n	8003480 <_svfiprintf_r+0x130>
 80034f2:	9105      	str	r1, [sp, #20]
 80034f4:	e7c4      	b.n	8003480 <_svfiprintf_r+0x130>
 80034f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80034fa:	4604      	mov	r4, r0
 80034fc:	2301      	movs	r3, #1
 80034fe:	e7f0      	b.n	80034e2 <_svfiprintf_r+0x192>
 8003500:	ab03      	add	r3, sp, #12
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	462a      	mov	r2, r5
 8003506:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <_svfiprintf_r+0x1f0>)
 8003508:	a904      	add	r1, sp, #16
 800350a:	4638      	mov	r0, r7
 800350c:	f3af 8000 	nop.w
 8003510:	1c42      	adds	r2, r0, #1
 8003512:	4606      	mov	r6, r0
 8003514:	d1d6      	bne.n	80034c4 <_svfiprintf_r+0x174>
 8003516:	89ab      	ldrh	r3, [r5, #12]
 8003518:	065b      	lsls	r3, r3, #25
 800351a:	f53f af2d 	bmi.w	8003378 <_svfiprintf_r+0x28>
 800351e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003520:	e72c      	b.n	800337c <_svfiprintf_r+0x2c>
 8003522:	ab03      	add	r3, sp, #12
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	462a      	mov	r2, r5
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <_svfiprintf_r+0x1f0>)
 800352a:	a904      	add	r1, sp, #16
 800352c:	4638      	mov	r0, r7
 800352e:	f000 f879 	bl	8003624 <_printf_i>
 8003532:	e7ed      	b.n	8003510 <_svfiprintf_r+0x1c0>
 8003534:	08003988 	.word	0x08003988
 8003538:	08003992 	.word	0x08003992
 800353c:	00000000 	.word	0x00000000
 8003540:	08003299 	.word	0x08003299
 8003544:	0800398e 	.word	0x0800398e

08003548 <_printf_common>:
 8003548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354c:	4616      	mov	r6, r2
 800354e:	4698      	mov	r8, r3
 8003550:	688a      	ldr	r2, [r1, #8]
 8003552:	690b      	ldr	r3, [r1, #16]
 8003554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003558:	4293      	cmp	r3, r2
 800355a:	bfb8      	it	lt
 800355c:	4613      	movlt	r3, r2
 800355e:	6033      	str	r3, [r6, #0]
 8003560:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003564:	4607      	mov	r7, r0
 8003566:	460c      	mov	r4, r1
 8003568:	b10a      	cbz	r2, 800356e <_printf_common+0x26>
 800356a:	3301      	adds	r3, #1
 800356c:	6033      	str	r3, [r6, #0]
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	0699      	lsls	r1, r3, #26
 8003572:	bf42      	ittt	mi
 8003574:	6833      	ldrmi	r3, [r6, #0]
 8003576:	3302      	addmi	r3, #2
 8003578:	6033      	strmi	r3, [r6, #0]
 800357a:	6825      	ldr	r5, [r4, #0]
 800357c:	f015 0506 	ands.w	r5, r5, #6
 8003580:	d106      	bne.n	8003590 <_printf_common+0x48>
 8003582:	f104 0a19 	add.w	sl, r4, #25
 8003586:	68e3      	ldr	r3, [r4, #12]
 8003588:	6832      	ldr	r2, [r6, #0]
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	42ab      	cmp	r3, r5
 800358e:	dc26      	bgt.n	80035de <_printf_common+0x96>
 8003590:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	3b00      	subs	r3, #0
 8003598:	bf18      	it	ne
 800359a:	2301      	movne	r3, #1
 800359c:	0692      	lsls	r2, r2, #26
 800359e:	d42b      	bmi.n	80035f8 <_printf_common+0xb0>
 80035a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035a4:	4641      	mov	r1, r8
 80035a6:	4638      	mov	r0, r7
 80035a8:	47c8      	blx	r9
 80035aa:	3001      	adds	r0, #1
 80035ac:	d01e      	beq.n	80035ec <_printf_common+0xa4>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	6922      	ldr	r2, [r4, #16]
 80035b2:	f003 0306 	and.w	r3, r3, #6
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf02      	ittt	eq
 80035ba:	68e5      	ldreq	r5, [r4, #12]
 80035bc:	6833      	ldreq	r3, [r6, #0]
 80035be:	1aed      	subeq	r5, r5, r3
 80035c0:	68a3      	ldr	r3, [r4, #8]
 80035c2:	bf0c      	ite	eq
 80035c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035c8:	2500      	movne	r5, #0
 80035ca:	4293      	cmp	r3, r2
 80035cc:	bfc4      	itt	gt
 80035ce:	1a9b      	subgt	r3, r3, r2
 80035d0:	18ed      	addgt	r5, r5, r3
 80035d2:	2600      	movs	r6, #0
 80035d4:	341a      	adds	r4, #26
 80035d6:	42b5      	cmp	r5, r6
 80035d8:	d11a      	bne.n	8003610 <_printf_common+0xc8>
 80035da:	2000      	movs	r0, #0
 80035dc:	e008      	b.n	80035f0 <_printf_common+0xa8>
 80035de:	2301      	movs	r3, #1
 80035e0:	4652      	mov	r2, sl
 80035e2:	4641      	mov	r1, r8
 80035e4:	4638      	mov	r0, r7
 80035e6:	47c8      	blx	r9
 80035e8:	3001      	adds	r0, #1
 80035ea:	d103      	bne.n	80035f4 <_printf_common+0xac>
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f4:	3501      	adds	r5, #1
 80035f6:	e7c6      	b.n	8003586 <_printf_common+0x3e>
 80035f8:	18e1      	adds	r1, r4, r3
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	2030      	movs	r0, #48	@ 0x30
 80035fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003602:	4422      	add	r2, r4
 8003604:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003608:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800360c:	3302      	adds	r3, #2
 800360e:	e7c7      	b.n	80035a0 <_printf_common+0x58>
 8003610:	2301      	movs	r3, #1
 8003612:	4622      	mov	r2, r4
 8003614:	4641      	mov	r1, r8
 8003616:	4638      	mov	r0, r7
 8003618:	47c8      	blx	r9
 800361a:	3001      	adds	r0, #1
 800361c:	d0e6      	beq.n	80035ec <_printf_common+0xa4>
 800361e:	3601      	adds	r6, #1
 8003620:	e7d9      	b.n	80035d6 <_printf_common+0x8e>
	...

08003624 <_printf_i>:
 8003624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	7e0f      	ldrb	r7, [r1, #24]
 800362a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800362c:	2f78      	cmp	r7, #120	@ 0x78
 800362e:	4691      	mov	r9, r2
 8003630:	4680      	mov	r8, r0
 8003632:	460c      	mov	r4, r1
 8003634:	469a      	mov	sl, r3
 8003636:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800363a:	d807      	bhi.n	800364c <_printf_i+0x28>
 800363c:	2f62      	cmp	r7, #98	@ 0x62
 800363e:	d80a      	bhi.n	8003656 <_printf_i+0x32>
 8003640:	2f00      	cmp	r7, #0
 8003642:	f000 80d2 	beq.w	80037ea <_printf_i+0x1c6>
 8003646:	2f58      	cmp	r7, #88	@ 0x58
 8003648:	f000 80b9 	beq.w	80037be <_printf_i+0x19a>
 800364c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003650:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003654:	e03a      	b.n	80036cc <_printf_i+0xa8>
 8003656:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800365a:	2b15      	cmp	r3, #21
 800365c:	d8f6      	bhi.n	800364c <_printf_i+0x28>
 800365e:	a101      	add	r1, pc, #4	@ (adr r1, 8003664 <_printf_i+0x40>)
 8003660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003664:	080036bd 	.word	0x080036bd
 8003668:	080036d1 	.word	0x080036d1
 800366c:	0800364d 	.word	0x0800364d
 8003670:	0800364d 	.word	0x0800364d
 8003674:	0800364d 	.word	0x0800364d
 8003678:	0800364d 	.word	0x0800364d
 800367c:	080036d1 	.word	0x080036d1
 8003680:	0800364d 	.word	0x0800364d
 8003684:	0800364d 	.word	0x0800364d
 8003688:	0800364d 	.word	0x0800364d
 800368c:	0800364d 	.word	0x0800364d
 8003690:	080037d1 	.word	0x080037d1
 8003694:	080036fb 	.word	0x080036fb
 8003698:	0800378b 	.word	0x0800378b
 800369c:	0800364d 	.word	0x0800364d
 80036a0:	0800364d 	.word	0x0800364d
 80036a4:	080037f3 	.word	0x080037f3
 80036a8:	0800364d 	.word	0x0800364d
 80036ac:	080036fb 	.word	0x080036fb
 80036b0:	0800364d 	.word	0x0800364d
 80036b4:	0800364d 	.word	0x0800364d
 80036b8:	08003793 	.word	0x08003793
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6032      	str	r2, [r6, #0]
 80036c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036cc:	2301      	movs	r3, #1
 80036ce:	e09d      	b.n	800380c <_printf_i+0x1e8>
 80036d0:	6833      	ldr	r3, [r6, #0]
 80036d2:	6820      	ldr	r0, [r4, #0]
 80036d4:	1d19      	adds	r1, r3, #4
 80036d6:	6031      	str	r1, [r6, #0]
 80036d8:	0606      	lsls	r6, r0, #24
 80036da:	d501      	bpl.n	80036e0 <_printf_i+0xbc>
 80036dc:	681d      	ldr	r5, [r3, #0]
 80036de:	e003      	b.n	80036e8 <_printf_i+0xc4>
 80036e0:	0645      	lsls	r5, r0, #25
 80036e2:	d5fb      	bpl.n	80036dc <_printf_i+0xb8>
 80036e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	da03      	bge.n	80036f4 <_printf_i+0xd0>
 80036ec:	232d      	movs	r3, #45	@ 0x2d
 80036ee:	426d      	negs	r5, r5
 80036f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036f4:	4859      	ldr	r0, [pc, #356]	@ (800385c <_printf_i+0x238>)
 80036f6:	230a      	movs	r3, #10
 80036f8:	e011      	b.n	800371e <_printf_i+0xfa>
 80036fa:	6821      	ldr	r1, [r4, #0]
 80036fc:	6833      	ldr	r3, [r6, #0]
 80036fe:	0608      	lsls	r0, r1, #24
 8003700:	f853 5b04 	ldr.w	r5, [r3], #4
 8003704:	d402      	bmi.n	800370c <_printf_i+0xe8>
 8003706:	0649      	lsls	r1, r1, #25
 8003708:	bf48      	it	mi
 800370a:	b2ad      	uxthmi	r5, r5
 800370c:	2f6f      	cmp	r7, #111	@ 0x6f
 800370e:	4853      	ldr	r0, [pc, #332]	@ (800385c <_printf_i+0x238>)
 8003710:	6033      	str	r3, [r6, #0]
 8003712:	bf14      	ite	ne
 8003714:	230a      	movne	r3, #10
 8003716:	2308      	moveq	r3, #8
 8003718:	2100      	movs	r1, #0
 800371a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800371e:	6866      	ldr	r6, [r4, #4]
 8003720:	60a6      	str	r6, [r4, #8]
 8003722:	2e00      	cmp	r6, #0
 8003724:	bfa2      	ittt	ge
 8003726:	6821      	ldrge	r1, [r4, #0]
 8003728:	f021 0104 	bicge.w	r1, r1, #4
 800372c:	6021      	strge	r1, [r4, #0]
 800372e:	b90d      	cbnz	r5, 8003734 <_printf_i+0x110>
 8003730:	2e00      	cmp	r6, #0
 8003732:	d04b      	beq.n	80037cc <_printf_i+0x1a8>
 8003734:	4616      	mov	r6, r2
 8003736:	fbb5 f1f3 	udiv	r1, r5, r3
 800373a:	fb03 5711 	mls	r7, r3, r1, r5
 800373e:	5dc7      	ldrb	r7, [r0, r7]
 8003740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003744:	462f      	mov	r7, r5
 8003746:	42bb      	cmp	r3, r7
 8003748:	460d      	mov	r5, r1
 800374a:	d9f4      	bls.n	8003736 <_printf_i+0x112>
 800374c:	2b08      	cmp	r3, #8
 800374e:	d10b      	bne.n	8003768 <_printf_i+0x144>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	07df      	lsls	r7, r3, #31
 8003754:	d508      	bpl.n	8003768 <_printf_i+0x144>
 8003756:	6923      	ldr	r3, [r4, #16]
 8003758:	6861      	ldr	r1, [r4, #4]
 800375a:	4299      	cmp	r1, r3
 800375c:	bfde      	ittt	le
 800375e:	2330      	movle	r3, #48	@ 0x30
 8003760:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003764:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003768:	1b92      	subs	r2, r2, r6
 800376a:	6122      	str	r2, [r4, #16]
 800376c:	f8cd a000 	str.w	sl, [sp]
 8003770:	464b      	mov	r3, r9
 8003772:	aa03      	add	r2, sp, #12
 8003774:	4621      	mov	r1, r4
 8003776:	4640      	mov	r0, r8
 8003778:	f7ff fee6 	bl	8003548 <_printf_common>
 800377c:	3001      	adds	r0, #1
 800377e:	d14a      	bne.n	8003816 <_printf_i+0x1f2>
 8003780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003784:	b004      	add	sp, #16
 8003786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	f043 0320 	orr.w	r3, r3, #32
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	4833      	ldr	r0, [pc, #204]	@ (8003860 <_printf_i+0x23c>)
 8003794:	2778      	movs	r7, #120	@ 0x78
 8003796:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	6831      	ldr	r1, [r6, #0]
 800379e:	061f      	lsls	r7, r3, #24
 80037a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80037a4:	d402      	bmi.n	80037ac <_printf_i+0x188>
 80037a6:	065f      	lsls	r7, r3, #25
 80037a8:	bf48      	it	mi
 80037aa:	b2ad      	uxthmi	r5, r5
 80037ac:	6031      	str	r1, [r6, #0]
 80037ae:	07d9      	lsls	r1, r3, #31
 80037b0:	bf44      	itt	mi
 80037b2:	f043 0320 	orrmi.w	r3, r3, #32
 80037b6:	6023      	strmi	r3, [r4, #0]
 80037b8:	b11d      	cbz	r5, 80037c2 <_printf_i+0x19e>
 80037ba:	2310      	movs	r3, #16
 80037bc:	e7ac      	b.n	8003718 <_printf_i+0xf4>
 80037be:	4827      	ldr	r0, [pc, #156]	@ (800385c <_printf_i+0x238>)
 80037c0:	e7e9      	b.n	8003796 <_printf_i+0x172>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	f023 0320 	bic.w	r3, r3, #32
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	e7f6      	b.n	80037ba <_printf_i+0x196>
 80037cc:	4616      	mov	r6, r2
 80037ce:	e7bd      	b.n	800374c <_printf_i+0x128>
 80037d0:	6833      	ldr	r3, [r6, #0]
 80037d2:	6825      	ldr	r5, [r4, #0]
 80037d4:	6961      	ldr	r1, [r4, #20]
 80037d6:	1d18      	adds	r0, r3, #4
 80037d8:	6030      	str	r0, [r6, #0]
 80037da:	062e      	lsls	r6, r5, #24
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	d501      	bpl.n	80037e4 <_printf_i+0x1c0>
 80037e0:	6019      	str	r1, [r3, #0]
 80037e2:	e002      	b.n	80037ea <_printf_i+0x1c6>
 80037e4:	0668      	lsls	r0, r5, #25
 80037e6:	d5fb      	bpl.n	80037e0 <_printf_i+0x1bc>
 80037e8:	8019      	strh	r1, [r3, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	6123      	str	r3, [r4, #16]
 80037ee:	4616      	mov	r6, r2
 80037f0:	e7bc      	b.n	800376c <_printf_i+0x148>
 80037f2:	6833      	ldr	r3, [r6, #0]
 80037f4:	1d1a      	adds	r2, r3, #4
 80037f6:	6032      	str	r2, [r6, #0]
 80037f8:	681e      	ldr	r6, [r3, #0]
 80037fa:	6862      	ldr	r2, [r4, #4]
 80037fc:	2100      	movs	r1, #0
 80037fe:	4630      	mov	r0, r6
 8003800:	f7fc fcf6 	bl	80001f0 <memchr>
 8003804:	b108      	cbz	r0, 800380a <_printf_i+0x1e6>
 8003806:	1b80      	subs	r0, r0, r6
 8003808:	6060      	str	r0, [r4, #4]
 800380a:	6863      	ldr	r3, [r4, #4]
 800380c:	6123      	str	r3, [r4, #16]
 800380e:	2300      	movs	r3, #0
 8003810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003814:	e7aa      	b.n	800376c <_printf_i+0x148>
 8003816:	6923      	ldr	r3, [r4, #16]
 8003818:	4632      	mov	r2, r6
 800381a:	4649      	mov	r1, r9
 800381c:	4640      	mov	r0, r8
 800381e:	47d0      	blx	sl
 8003820:	3001      	adds	r0, #1
 8003822:	d0ad      	beq.n	8003780 <_printf_i+0x15c>
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	079b      	lsls	r3, r3, #30
 8003828:	d413      	bmi.n	8003852 <_printf_i+0x22e>
 800382a:	68e0      	ldr	r0, [r4, #12]
 800382c:	9b03      	ldr	r3, [sp, #12]
 800382e:	4298      	cmp	r0, r3
 8003830:	bfb8      	it	lt
 8003832:	4618      	movlt	r0, r3
 8003834:	e7a6      	b.n	8003784 <_printf_i+0x160>
 8003836:	2301      	movs	r3, #1
 8003838:	4632      	mov	r2, r6
 800383a:	4649      	mov	r1, r9
 800383c:	4640      	mov	r0, r8
 800383e:	47d0      	blx	sl
 8003840:	3001      	adds	r0, #1
 8003842:	d09d      	beq.n	8003780 <_printf_i+0x15c>
 8003844:	3501      	adds	r5, #1
 8003846:	68e3      	ldr	r3, [r4, #12]
 8003848:	9903      	ldr	r1, [sp, #12]
 800384a:	1a5b      	subs	r3, r3, r1
 800384c:	42ab      	cmp	r3, r5
 800384e:	dcf2      	bgt.n	8003836 <_printf_i+0x212>
 8003850:	e7eb      	b.n	800382a <_printf_i+0x206>
 8003852:	2500      	movs	r5, #0
 8003854:	f104 0619 	add.w	r6, r4, #25
 8003858:	e7f5      	b.n	8003846 <_printf_i+0x222>
 800385a:	bf00      	nop
 800385c:	08003999 	.word	0x08003999
 8003860:	080039aa 	.word	0x080039aa

08003864 <memmove>:
 8003864:	4288      	cmp	r0, r1
 8003866:	b510      	push	{r4, lr}
 8003868:	eb01 0402 	add.w	r4, r1, r2
 800386c:	d902      	bls.n	8003874 <memmove+0x10>
 800386e:	4284      	cmp	r4, r0
 8003870:	4623      	mov	r3, r4
 8003872:	d807      	bhi.n	8003884 <memmove+0x20>
 8003874:	1e43      	subs	r3, r0, #1
 8003876:	42a1      	cmp	r1, r4
 8003878:	d008      	beq.n	800388c <memmove+0x28>
 800387a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800387e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003882:	e7f8      	b.n	8003876 <memmove+0x12>
 8003884:	4402      	add	r2, r0
 8003886:	4601      	mov	r1, r0
 8003888:	428a      	cmp	r2, r1
 800388a:	d100      	bne.n	800388e <memmove+0x2a>
 800388c:	bd10      	pop	{r4, pc}
 800388e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003896:	e7f7      	b.n	8003888 <memmove+0x24>

08003898 <_sbrk_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4d06      	ldr	r5, [pc, #24]	@ (80038b4 <_sbrk_r+0x1c>)
 800389c:	2300      	movs	r3, #0
 800389e:	4604      	mov	r4, r0
 80038a0:	4608      	mov	r0, r1
 80038a2:	602b      	str	r3, [r5, #0]
 80038a4:	f7fd f9e2 	bl	8000c6c <_sbrk>
 80038a8:	1c43      	adds	r3, r0, #1
 80038aa:	d102      	bne.n	80038b2 <_sbrk_r+0x1a>
 80038ac:	682b      	ldr	r3, [r5, #0]
 80038ae:	b103      	cbz	r3, 80038b2 <_sbrk_r+0x1a>
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	bd38      	pop	{r3, r4, r5, pc}
 80038b4:	200002a4 	.word	0x200002a4

080038b8 <memcpy>:
 80038b8:	440a      	add	r2, r1
 80038ba:	4291      	cmp	r1, r2
 80038bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80038c0:	d100      	bne.n	80038c4 <memcpy+0xc>
 80038c2:	4770      	bx	lr
 80038c4:	b510      	push	{r4, lr}
 80038c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ce:	4291      	cmp	r1, r2
 80038d0:	d1f9      	bne.n	80038c6 <memcpy+0xe>
 80038d2:	bd10      	pop	{r4, pc}

080038d4 <_realloc_r>:
 80038d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d8:	4680      	mov	r8, r0
 80038da:	4615      	mov	r5, r2
 80038dc:	460c      	mov	r4, r1
 80038de:	b921      	cbnz	r1, 80038ea <_realloc_r+0x16>
 80038e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038e4:	4611      	mov	r1, r2
 80038e6:	f7ff bc4b 	b.w	8003180 <_malloc_r>
 80038ea:	b92a      	cbnz	r2, 80038f8 <_realloc_r+0x24>
 80038ec:	f7ff fbdc 	bl	80030a8 <_free_r>
 80038f0:	2400      	movs	r4, #0
 80038f2:	4620      	mov	r0, r4
 80038f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f8:	f000 f81a 	bl	8003930 <_malloc_usable_size_r>
 80038fc:	4285      	cmp	r5, r0
 80038fe:	4606      	mov	r6, r0
 8003900:	d802      	bhi.n	8003908 <_realloc_r+0x34>
 8003902:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003906:	d8f4      	bhi.n	80038f2 <_realloc_r+0x1e>
 8003908:	4629      	mov	r1, r5
 800390a:	4640      	mov	r0, r8
 800390c:	f7ff fc38 	bl	8003180 <_malloc_r>
 8003910:	4607      	mov	r7, r0
 8003912:	2800      	cmp	r0, #0
 8003914:	d0ec      	beq.n	80038f0 <_realloc_r+0x1c>
 8003916:	42b5      	cmp	r5, r6
 8003918:	462a      	mov	r2, r5
 800391a:	4621      	mov	r1, r4
 800391c:	bf28      	it	cs
 800391e:	4632      	movcs	r2, r6
 8003920:	f7ff ffca 	bl	80038b8 <memcpy>
 8003924:	4621      	mov	r1, r4
 8003926:	4640      	mov	r0, r8
 8003928:	f7ff fbbe 	bl	80030a8 <_free_r>
 800392c:	463c      	mov	r4, r7
 800392e:	e7e0      	b.n	80038f2 <_realloc_r+0x1e>

08003930 <_malloc_usable_size_r>:
 8003930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003934:	1f18      	subs	r0, r3, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	bfbc      	itt	lt
 800393a:	580b      	ldrlt	r3, [r1, r0]
 800393c:	18c0      	addlt	r0, r0, r3
 800393e:	4770      	bx	lr

08003940 <_init>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	bf00      	nop
 8003944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003946:	bc08      	pop	{r3}
 8003948:	469e      	mov	lr, r3
 800394a:	4770      	bx	lr

0800394c <_fini>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	bf00      	nop
 8003950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003952:	bc08      	pop	{r3}
 8003954:	469e      	mov	lr, r3
 8003956:	4770      	bx	lr
