
Lab3_klocka_och_knapp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004654  08004654  00005654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800483c  0800483c  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  0800483c  0800483c  0000583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004844  08004844  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004844  08004844  00005844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004848  08004848  00005848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800484c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000078  080048c4  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080048c4  00006284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9c8  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cff  00000000  00000000  00012a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00014770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099c  00000000  00000000  000153b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a38  00000000  00000000  00015d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2d1  00000000  00000000  0002b78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bce4  00000000  00000000  00038a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4741  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf0  00000000  00000000  000c4784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c8374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800463c 	.word	0x0800463c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800463c 	.word	0x0800463c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <button_mode>:
int unhandled_exti = 0;
int button_held = 0;
uint32_t last_flank_causing_exti = 0;


void button_mode(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

	int my_btn_pressed;

	while(1){

		if(unhandled_exti)
 8000586:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <button_mode+0x78>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d020      	beq.n	80005d0 <button_mode+0x50>
		{
			//make debounce_time_start = current time

			//check if debounce time has passed
			if ((HAL_GetTick() - last_flank_causing_exti) >= BOUNCE_DELAY_NS){
 800058e:	f000 fe9b 	bl	80012c8 <HAL_GetTick>
 8000592:	4602      	mov	r2, r0
 8000594:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <button_mode+0x7c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	4a19      	ldr	r2, [pc, #100]	@ (8000600 <button_mode+0x80>)
 800059c:	6812      	ldr	r2, [r2, #0]
 800059e:	4293      	cmp	r3, r2
 80005a0:	d316      	bcc.n	80005d0 <button_mode+0x50>

				// Read the button state again after the delay
				my_btn_pressed = GPIO_PIN_RESET == HAL_GPIO_ReadPin(MY_BTN_GPIO_Port, MY_BTN_Pin);
 80005a2:	2101      	movs	r1, #1
 80005a4:	4817      	ldr	r0, [pc, #92]	@ (8000604 <button_mode+0x84>)
 80005a6:	f001 f931 	bl	800180c <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	bf0c      	ite	eq
 80005b0:	2301      	moveq	r3, #1
 80005b2:	2300      	movne	r3, #0
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	607b      	str	r3, [r7, #4]

				if (my_btn_pressed)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d005      	beq.n	80005ca <button_mode+0x4a>
				{
					//if button still pressed after debounce, count as valid press
					button_debounced_count++;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <button_mode+0x88>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <button_mode+0x88>)
 80005c8:	801a      	strh	r2, [r3, #0]
					//display

				}
	            unhandled_exti = 0;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <button_mode+0x78>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]





	    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 80005d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <button_mode+0x84>)
 80005d6:	f001 f919 	bl	800180c <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d105      	bne.n	80005ec <button_mode+0x6c>
	        // Display the debounced count when b1 is pressed
	        qs_put_big_num(button_exti_count);
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <button_mode+0x8c>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fc5b 	bl	8000ea0 <qs_put_big_num>
 80005ea:	e7cc      	b.n	8000586 <button_mode+0x6>
	    }
		else
	    {
	    	qs_put_big_num(button_debounced_count);
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <button_mode+0x88>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fc55 	bl	8000ea0 <qs_put_big_num>
		if(unhandled_exti)
 80005f6:	e7c6      	b.n	8000586 <button_mode+0x6>
 80005f8:	20000128 	.word	0x20000128
 80005fc:	2000012c 	.word	0x2000012c
 8000600:	20000000 	.word	0x20000000
 8000604:	40020800 	.word	0x40020800
 8000608:	20000126 	.word	0x20000126
 800060c:	20000124 	.word	0x20000124

08000610 <HAL_GPIO_EXTI_Callback>:

	}

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == MY_BTN_Pin){
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d10d      	bne.n	800063c <HAL_GPIO_EXTI_Callback+0x2c>
		button_exti_count++;
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <HAL_GPIO_EXTI_Callback+0x34>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_GPIO_EXTI_Callback+0x34>)
 800062a:	801a      	strh	r2, [r3, #0]
		unhandled_exti = 1;
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x38>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
		last_flank_causing_exti = HAL_GetTick();
 8000632:	f000 fe49 	bl	80012c8 <HAL_GetTick>
 8000636:	4603      	mov	r3, r0
 8000638:	4a04      	ldr	r2, [pc, #16]	@ (800064c <HAL_GPIO_EXTI_Callback+0x3c>)
 800063a:	6013      	str	r3, [r2, #0]

	}
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000124 	.word	0x20000124
 8000648:	20000128 	.word	0x20000128
 800064c:	2000012c 	.word	0x2000012c

08000650 <uart_print_menu>:

void uart_print_menu(){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	char *menu = "Menu: 1. Clock mode. 2. Button mode.";
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <uart_print_menu+0x28>)
 8000658:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)menu, strlen(menu), HAL_MAX_DELAY);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff fdc0 	bl	80001e0 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	4804      	ldr	r0, [pc, #16]	@ (800067c <uart_print_menu+0x2c>)
 800066c:	f002 fa3a 	bl	8002ae4 <HAL_UART_Transmit>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	08004654 	.word	0x08004654
 800067c:	200000dc 	.word	0x200000dc

08000680 <uart_get_menu_choice>:

int uart_get_menu_choice()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	char str[1] = {'\0'};
 8000686:	2300      	movs	r3, #0
 8000688:	713b      	strb	r3, [r7, #4]
	uint16_t str_len = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive(&huart2,(uint8_t *) str, str_len, HAL_MAX_DELAY);
 800068e:	88fa      	ldrh	r2, [r7, #6]
 8000690:	1d39      	adds	r1, r7, #4
 8000692:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000696:	4808      	ldr	r0, [pc, #32]	@ (80006b8 <uart_get_menu_choice+0x38>)
 8000698:	f002 faaf 	bl	8002bfa <HAL_UART_Receive>
	int ret = -1;
 800069c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006a0:	603b      	str	r3, [r7, #0]
	sscanf(str, "%d", &ret);
 80006a2:	463a      	mov	r2, r7
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4905      	ldr	r1, [pc, #20]	@ (80006bc <uart_get_menu_choice+0x3c>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fea1 	bl	80033f0 <siscanf>
	return ret;
 80006ae:	683b      	ldr	r3, [r7, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000dc 	.word	0x200000dc
 80006bc:	0800467c 	.word	0x0800467c

080006c0 <uart_print_choice>:

void uart_print_choice(int choice)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b090      	sub	sp, #64	@ 0x40
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    char message[50];

    switch (choice)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d003      	beq.n	80006d6 <uart_print_choice+0x16>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d008      	beq.n	80006e6 <uart_print_choice+0x26>
 80006d4:	e00f      	b.n	80006f6 <uart_print_choice+0x36>
    {
        case 1:
            snprintf(message, sizeof(message), "You picked 1.\n");
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	4a14      	ldr	r2, [pc, #80]	@ (800072c <uart_print_choice+0x6c>)
 80006dc:	2132      	movs	r1, #50	@ 0x32
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fe52 	bl	8003388 <sniprintf>
            break;
 80006e4:	e00f      	b.n	8000706 <uart_print_choice+0x46>
        case 2:
            snprintf(message, sizeof(message), "You picked 2.\n");
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4a11      	ldr	r2, [pc, #68]	@ (8000730 <uart_print_choice+0x70>)
 80006ec:	2132      	movs	r1, #50	@ 0x32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fe4a 	bl	8003388 <sniprintf>
            break;
 80006f4:	e007      	b.n	8000706 <uart_print_choice+0x46>
        default:
            snprintf(message, sizeof(message), "Error: Invalid choice, pick 1 or 2.\n");
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000734 <uart_print_choice+0x74>)
 80006fc:	2132      	movs	r1, #50	@ 0x32
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fe42 	bl	8003388 <sniprintf>
            break;
 8000704:	bf00      	nop
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd68 	bl	80001e0 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	f107 010c 	add.w	r1, r7, #12
 8000718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800071c:	4806      	ldr	r0, [pc, #24]	@ (8000738 <uart_print_choice+0x78>)
 800071e:	f002 f9e1 	bl	8002ae4 <HAL_UART_Transmit>
}
 8000722:	bf00      	nop
 8000724:	3740      	adds	r7, #64	@ 0x40
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	08004680 	.word	0x08004680
 8000730:	08004690 	.word	0x08004690
 8000734:	080046a0 	.word	0x080046a0
 8000738:	200000dc 	.word	0x200000dc

0800073c <clock_mode>:
uint8_t hours = 23;
uint8_t minutes = 59;
uint8_t seconds = 0;

void clock_mode()
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af02      	add	r7, sp, #8
    // Start the timer once
    HAL_TIM_Base_Start_IT(&htim2);
 8000742:	4832      	ldr	r0, [pc, #200]	@ (800080c <clock_mode+0xd0>)
 8000744:	f001 fd94 	bl	8002270 <HAL_TIM_Base_Start_IT>
    while (1) {
        /*** main loop ***/

        // Prepare digit values based on button state
        uint8_t d0, d1, d2, d3; // d0: thousands, d1: hundreds, d2: tens, d3: units
        uint8_t colon = colon_on; // Use the colon state from the timer callback
 8000748:	4b31      	ldr	r3, [pc, #196]	@ (8000810 <clock_mode+0xd4>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	70fb      	strb	r3, [r7, #3]

        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 800074e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000752:	4830      	ldr	r0, [pc, #192]	@ (8000814 <clock_mode+0xd8>)
 8000754:	f001 f85a 	bl	800180c <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d126      	bne.n	80007ac <clock_mode+0x70>
            // Show HH:MM
            d0 = hours / 10;       // Tens of hours
 800075e:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <clock_mode+0xdc>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4a2e      	ldr	r2, [pc, #184]	@ (800081c <clock_mode+0xe0>)
 8000764:	fba2 2303 	umull	r2, r3, r2, r3
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	71fb      	strb	r3, [r7, #7]
            d1 = hours % 10;       // Units of hours
 800076c:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <clock_mode+0xdc>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <clock_mode+0xe0>)
 8000772:	fba3 1302 	umull	r1, r3, r3, r2
 8000776:	08d9      	lsrs	r1, r3, #3
 8000778:	460b      	mov	r3, r1
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	440b      	add	r3, r1
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	71bb      	strb	r3, [r7, #6]
            d2 = minutes / 10;     // Tens of minutes
 8000784:	4b26      	ldr	r3, [pc, #152]	@ (8000820 <clock_mode+0xe4>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4a24      	ldr	r2, [pc, #144]	@ (800081c <clock_mode+0xe0>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	717b      	strb	r3, [r7, #5]
            d3 = minutes % 10;     // Units of minutes
 8000792:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <clock_mode+0xe4>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <clock_mode+0xe0>)
 8000798:	fba3 1302 	umull	r1, r3, r3, r2
 800079c:	08d9      	lsrs	r1, r3, #3
 800079e:	460b      	mov	r3, r1
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	440b      	add	r3, r1
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	713b      	strb	r3, [r7, #4]
 80007aa:	e025      	b.n	80007f8 <clock_mode+0xbc>
        } else {
            // Show MM:SS
            d0 = minutes / 10;     // Tens of minutes
 80007ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <clock_mode+0xe4>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4a1a      	ldr	r2, [pc, #104]	@ (800081c <clock_mode+0xe0>)
 80007b2:	fba2 2303 	umull	r2, r3, r2, r3
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	71fb      	strb	r3, [r7, #7]
            d1 = minutes % 10;     // Units of minutes
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <clock_mode+0xe4>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <clock_mode+0xe0>)
 80007c0:	fba3 1302 	umull	r1, r3, r3, r2
 80007c4:	08d9      	lsrs	r1, r3, #3
 80007c6:	460b      	mov	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	71bb      	strb	r3, [r7, #6]
            d2 = seconds / 10;      // Tens of seconds
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <clock_mode+0xe8>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4a11      	ldr	r2, [pc, #68]	@ (800081c <clock_mode+0xe0>)
 80007d8:	fba2 2303 	umull	r2, r3, r2, r3
 80007dc:	08db      	lsrs	r3, r3, #3
 80007de:	717b      	strb	r3, [r7, #5]
            d3 = seconds % 10;      // Units of seconds
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <clock_mode+0xe8>)
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <clock_mode+0xe0>)
 80007e6:	fba3 1302 	umull	r1, r3, r3, r2
 80007ea:	08d9      	lsrs	r1, r3, #3
 80007ec:	460b      	mov	r3, r1
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	440b      	add	r3, r1
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	713b      	strb	r3, [r7, #4]
        }

        // Call the function to update the display
        qs_put_digits(d0, d1, d2, d3, colon);
 80007f8:	79f8      	ldrb	r0, [r7, #7]
 80007fa:	79b9      	ldrb	r1, [r7, #6]
 80007fc:	797a      	ldrb	r2, [r7, #5]
 80007fe:	793c      	ldrb	r4, [r7, #4]
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	4623      	mov	r3, r4
 8000806:	f000 fb1d 	bl	8000e44 <qs_put_digits>
    while (1) {
 800080a:	e79d      	b.n	8000748 <clock_mode+0xc>
 800080c:	20000094 	.word	0x20000094
 8000810:	20000130 	.word	0x20000130
 8000814:	40020800 	.word	0x40020800
 8000818:	20000004 	.word	0x20000004
 800081c:	cccccccd 	.word	0xcccccccd
 8000820:	20000005 	.word	0x20000005
 8000824:	20000132 	.word	0x20000132

08000828 <HAL_TIM_PeriodElapsedCallback>:
    }
}


void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim )
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	uint16_t	display_value;

	if (htim -> Instance == TIM2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000838:	d138      	bne.n	80008ac <HAL_TIM_PeriodElapsedCallback+0x84>
	{
		half_second ^= 1;
 800083a:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f083 0301 	eor.w	r3, r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000846:	701a      	strb	r2, [r3, #0]

		if (half_second) {
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d003      	beq.n	8000858 <HAL_TIM_PeriodElapsedCallback+0x30>
			colon_on = 1;
 8000850:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000856:	e029      	b.n	80008ac <HAL_TIM_PeriodElapsedCallback+0x84>
			colon_on = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
			seconds++;
 800085e:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000868:	701a      	strb	r2, [r3, #0]
		if (seconds >= 60)
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000870:	d908      	bls.n	8000884 <HAL_TIM_PeriodElapsedCallback+0x5c>
			seconds = 0;
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
			minutes++;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000882:	701a      	strb	r2, [r3, #0]
		if (minutes >= 60)
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b3b      	cmp	r3, #59	@ 0x3b
 800088a:	d908      	bls.n	800089e <HAL_TIM_PeriodElapsedCallback+0x76>
			minutes = 0;
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
			hours++;
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3301      	adds	r3, #1
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800089c:	701a      	strb	r2, [r3, #0]
		if (hours >= 24)
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b17      	cmp	r3, #23
 80008a4:	d902      	bls.n	80008ac <HAL_TIM_PeriodElapsedCallback+0x84>
			hours = 0;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	20000131 	.word	0x20000131
 80008bc:	20000130 	.word	0x20000130
 80008c0:	20000132 	.word	0x20000132
 80008c4:	20000005 	.word	0x20000005
 80008c8:	20000004 	.word	0x20000004

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 fc93 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f827 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f000 f909 	bl	8000af0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008de:	f000 f8dd 	bl	8000a9c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008e2:	f000 f88d 	bl	8000a00 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //button_mode();
	  uart_print_menu();
 80008e6:	f7ff feb3 	bl	8000650 <uart_print_menu>


	  int menu_choice = -1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ee:	607b      	str	r3, [r7, #4]
      while (menu_choice != 1 && menu_choice != 2)
 80008f0:	e005      	b.n	80008fe <main+0x32>
      {
          menu_choice = uart_get_menu_choice();
 80008f2:	f7ff fec5 	bl	8000680 <uart_get_menu_choice>
 80008f6:	6078      	str	r0, [r7, #4]
          uart_print_choice(menu_choice);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff fee1 	bl	80006c0 <uart_print_choice>
      while (menu_choice != 1 && menu_choice != 2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d002      	beq.n	800090a <main+0x3e>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d1f3      	bne.n	80008f2 <main+0x26>
      }

	  switch (menu_choice)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d003      	beq.n	8000918 <main+0x4c>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d003      	beq.n	800091e <main+0x52>
 8000916:	e005      	b.n	8000924 <main+0x58>
	  {
	  case 1:		clock_mode(); 				break;
 8000918:	f7ff ff10 	bl	800073c <clock_mode>
 800091c:	e002      	b.n	8000924 <main+0x58>
	  case 2: 		button_mode(); 				break;
 800091e:	f7ff fe2f 	bl	8000580 <button_mode>
 8000922:	bf00      	nop
  {
 8000924:	e7df      	b.n	80008e6 <main+0x1a>
	...

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	@ 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	@ 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fd86 	bl	8003448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <SystemClock_Config+0xd0>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	4a28      	ldr	r2, [pc, #160]	@ (80009f8 <SystemClock_Config+0xd0>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	@ 0x40
 800095c:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <SystemClock_Config+0xd0>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <SystemClock_Config+0xd4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000974:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <SystemClock_Config+0xd4>)
 8000976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <SystemClock_Config+0xd4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	2310      	movs	r3, #16
 8000992:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800099c:	2310      	movs	r3, #16
 800099e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a6:	2304      	movs	r3, #4
 80009a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009aa:	2307      	movs	r3, #7
 80009ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 ff74 	bl	80018a0 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009be:	f000 f92f 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2302      	movs	r3, #2
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2102      	movs	r1, #2
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 f9d6 	bl	8001d90 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ea:	f000 f919 	bl	8000c20 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	@ 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a26:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10499;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a34:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a46:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a48:	f001 fbc2 	bl	80021d0 <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a52:	f000 f8e5 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a64:	f001 fd56 	bl	8002514 <HAL_TIM_ConfigClockSource>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a6e:	f000 f8d7 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a80:	f001 ff5e 	bl	8002940 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a8a:	f000 f8c9 	bl	8000c20 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000094 	.word	0x20000094

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <MX_USART2_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f001 ffb6 	bl	8002a44 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 f89f 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000dc 	.word	0x200000dc
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b42      	ldr	r3, [pc, #264]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a41      	ldr	r2, [pc, #260]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b3f      	ldr	r3, [pc, #252]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b3b      	ldr	r3, [pc, #236]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a3a      	ldr	r2, [pc, #232]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b38      	ldr	r3, [pc, #224]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b34      	ldr	r3, [pc, #208]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a33      	ldr	r2, [pc, #204]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a2c      	ldr	r2, [pc, #176]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c14 <MX_GPIO_Init+0x124>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_DIO_Pin|SEG_CLK_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210c      	movs	r1, #12
 8000b7a:	4827      	ldr	r0, [pc, #156]	@ (8000c18 <MX_GPIO_Init+0x128>)
 8000b7c:	f000 fe5e 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2120      	movs	r1, #32
 8000b84:	4825      	ldr	r0, [pc, #148]	@ (8000c1c <MX_GPIO_Init+0x12c>)
 8000b86:	f000 fe59 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin MY_BTN_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MY_BTN_Pin;
 8000b8a:	f242 0301 	movw	r3, #8193	@ 0x2001
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481d      	ldr	r0, [pc, #116]	@ (8000c18 <MX_GPIO_Init+0x128>)
 8000ba2:	f000 fcaf 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_DIO_Pin */
  GPIO_InitStruct.Pin = SEG_DIO_Pin;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000baa:	2311      	movs	r3, #17
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEG_DIO_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4816      	ldr	r0, [pc, #88]	@ (8000c18 <MX_GPIO_Init+0x128>)
 8000bbe:	f000 fca1 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_CLK_Pin */
  GPIO_InitStruct.Pin = SEG_CLK_Pin;
 8000bc2:	2308      	movs	r3, #8
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEG_CLK_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480f      	ldr	r0, [pc, #60]	@ (8000c18 <MX_GPIO_Init+0x128>)
 8000bda:	f000 fc93 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bde:	2320      	movs	r3, #32
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <MX_GPIO_Init+0x12c>)
 8000bf6:	f000 fc85 	bl	8001504 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f000 fc49 	bl	8001496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c04:	2006      	movs	r0, #6
 8000c06:	f000 fc62 	bl	80014ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <Error_Handler+0x8>

08000c2c <TM1637_Delay>:
 *
 */
#define DELAY_NOP_COUNTER 250

void TM1637_Delay()
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
	for (int i = 0; i < DELAY_NOP_COUNTER; i++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e003      	b.n	8000c40 <TM1637_Delay+0x14>
	{
		__NOP();
 8000c38:	bf00      	nop
	for (int i = 0; i < DELAY_NOP_COUNTER; i++)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2bf9      	cmp	r3, #249	@ 0xf9
 8000c44:	ddf8      	ble.n	8000c38 <TM1637_Delay+0xc>
	}
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <TM1637_Strt>:


void TM1637_Strt()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	480a      	ldr	r0, [pc, #40]	@ (8000c88 <TM1637_Strt+0x34>)
 8000c5e:	f000 fded 	bl	800183c <HAL_GPIO_WritePin>
 8000c62:	f7ff ffe3 	bl	8000c2c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000c66:	2201      	movs	r2, #1
 8000c68:	2108      	movs	r1, #8
 8000c6a:	4807      	ldr	r0, [pc, #28]	@ (8000c88 <TM1637_Strt+0x34>)
 8000c6c:	f000 fde6 	bl	800183c <HAL_GPIO_WritePin>
 8000c70:	f7ff ffdc 	bl	8000c2c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000c74:	2200      	movs	r2, #0
 8000c76:	2104      	movs	r1, #4
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <TM1637_Strt+0x34>)
 8000c7a:	f000 fddf 	bl	800183c <HAL_GPIO_WritePin>
 8000c7e:	f7ff ffd5 	bl	8000c2c <TM1637_Delay>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40020800 	.word	0x40020800

08000c8c <TM1637_Stop>:

void TM1637_Stop()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000c90:	2200      	movs	r2, #0
 8000c92:	2108      	movs	r1, #8
 8000c94:	4814      	ldr	r0, [pc, #80]	@ (8000ce8 <TM1637_Stop+0x5c>)
 8000c96:	f000 fdd1 	bl	800183c <HAL_GPIO_WritePin>
 8000c9a:	f7ff ffc7 	bl	8000c2c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	4811      	ldr	r0, [pc, #68]	@ (8000ce8 <TM1637_Stop+0x5c>)
 8000ca4:	f000 fdca 	bl	800183c <HAL_GPIO_WritePin>
 8000ca8:	f7ff ffc0 	bl	8000c2c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000cac:	2200      	movs	r2, #0
 8000cae:	2108      	movs	r1, #8
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <TM1637_Stop+0x5c>)
 8000cb2:	f000 fdc3 	bl	800183c <HAL_GPIO_WritePin>
 8000cb6:	f7ff ffb9 	bl	8000c2c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	480a      	ldr	r0, [pc, #40]	@ (8000ce8 <TM1637_Stop+0x5c>)
 8000cc0:	f000 fdbc 	bl	800183c <HAL_GPIO_WritePin>
 8000cc4:	f7ff ffb2 	bl	8000c2c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2108      	movs	r1, #8
 8000ccc:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <TM1637_Stop+0x5c>)
 8000cce:	f000 fdb5 	bl	800183c <HAL_GPIO_WritePin>
 8000cd2:	f7ff ffab 	bl	8000c2c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2104      	movs	r1, #4
 8000cda:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <TM1637_Stop+0x5c>)
 8000cdc:	f000 fdae 	bl	800183c <HAL_GPIO_WritePin>
 8000ce0:	f7ff ffa4 	bl	8000c2c <TM1637_Delay>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40020800 	.word	0x40020800

08000cec <TM1637_WriteByte>:

void TM1637_WriteByte(uint8_t byte)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t c = 0; c < 8; c++) {
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	e023      	b.n	8000d44 <TM1637_WriteByte+0x58>
		HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2108      	movs	r1, #8
 8000d00:	4824      	ldr	r0, [pc, #144]	@ (8000d94 <TM1637_WriteByte+0xa8>)
 8000d02:	f000 fd9b 	bl	800183c <HAL_GPIO_WritePin>
		if ( (byte & 0x01) == 0 )
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d105      	bne.n	8000d1c <TM1637_WriteByte+0x30>
		{
			HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2104      	movs	r1, #4
 8000d14:	481f      	ldr	r0, [pc, #124]	@ (8000d94 <TM1637_WriteByte+0xa8>)
 8000d16:	f000 fd91 	bl	800183c <HAL_GPIO_WritePin>
 8000d1a:	e004      	b.n	8000d26 <TM1637_WriteByte+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2104      	movs	r1, #4
 8000d20:	481c      	ldr	r0, [pc, #112]	@ (8000d94 <TM1637_WriteByte+0xa8>)
 8000d22:	f000 fd8b 	bl	800183c <HAL_GPIO_WritePin>
		}
		byte = byte >> 1;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	085b      	lsrs	r3, r3, #1
 8000d2a:	71fb      	strb	r3, [r7, #7]
		TM1637_Delay();
 8000d2c:	f7ff ff7e 	bl	8000c2c <TM1637_Delay>
		HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2108      	movs	r1, #8
 8000d34:	4817      	ldr	r0, [pc, #92]	@ (8000d94 <TM1637_WriteByte+0xa8>)
 8000d36:	f000 fd81 	bl	800183c <HAL_GPIO_WritePin>
		TM1637_Delay();
 8000d3a:	f7ff ff77 	bl	8000c2c <TM1637_Delay>
	for (uint8_t c = 0; c < 8; c++) {
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	3301      	adds	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	2b07      	cmp	r3, #7
 8000d48:	d9d8      	bls.n	8000cfc <TM1637_WriteByte+0x10>
	}

	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	4811      	ldr	r0, [pc, #68]	@ (8000d94 <TM1637_WriteByte+0xa8>)
 8000d50:	f000 fd74 	bl	800183c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2108      	movs	r1, #8
 8000d58:	480e      	ldr	r0, [pc, #56]	@ (8000d94 <TM1637_WriteByte+0xa8>)
 8000d5a:	f000 fd6f 	bl	800183c <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000d5e:	f7ff ff65 	bl	8000c2c <TM1637_Delay>
	while( HAL_GPIO_ReadPin(SEG_DIO_GPIO_Port, SEG_DIO_Pin) == GPIO_PIN_SET )
 8000d62:	bf00      	nop
 8000d64:	2104      	movs	r1, #4
 8000d66:	480b      	ldr	r0, [pc, #44]	@ (8000d94 <TM1637_WriteByte+0xa8>)
 8000d68:	f000 fd50 	bl	800180c <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d0f8      	beq.n	8000d64 <TM1637_WriteByte+0x78>
	{
		// Wait here until it goes low
	}
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2104      	movs	r1, #4
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <TM1637_WriteByte+0xa8>)
 8000d78:	f000 fd60 	bl	800183c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2108      	movs	r1, #8
 8000d80:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <TM1637_WriteByte+0xa8>)
 8000d82:	f000 fd5b 	bl	800183c <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000d86:	f7ff ff51 	bl	8000c2c <TM1637_Delay>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020800 	.word	0x40020800

08000d98 <TM1637_WriteCmnd>:


void TM1637_WriteCmnd(uint8_t cmd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	TM1637_Strt();
 8000da2:	f7ff ff57 	bl	8000c54 <TM1637_Strt>
	TM1637_WriteByte(cmd);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff9f 	bl	8000cec <TM1637_WriteByte>
	TM1637_Stop();
 8000dae:	f7ff ff6d 	bl	8000c8c <TM1637_Stop>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <TM1637_WriteData>:

void TM1637_WriteData(uint8_t addr, uint8_t data)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	71bb      	strb	r3, [r7, #6]
	TM1637_Strt();
 8000dca:	f7ff ff43 	bl	8000c54 <TM1637_Strt>
	TM1637_WriteByte(addr);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff8b 	bl	8000cec <TM1637_WriteByte>
	TM1637_WriteByte(data);
 8000dd6:	79bb      	ldrb	r3, [r7, #6]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff87 	bl	8000cec <TM1637_WriteByte>
	TM1637_Stop();
 8000dde:	f7ff ff55 	bl	8000c8c <TM1637_Stop>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <qs_put_bitmasks>:




void qs_put_bitmasks(uint8_t bm0, uint8_t bm1, uint8_t bm2, uint8_t bm3)
{
 8000dea:	b590      	push	{r4, r7, lr}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4604      	mov	r4, r0
 8000df2:	4608      	mov	r0, r1
 8000df4:	4611      	mov	r1, r2
 8000df6:	461a      	mov	r2, r3
 8000df8:	4623      	mov	r3, r4
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71bb      	strb	r3, [r7, #6]
 8000e00:	460b      	mov	r3, r1
 8000e02:	717b      	strb	r3, [r7, #5]
 8000e04:	4613      	mov	r3, r2
 8000e06:	713b      	strb	r3, [r7, #4]
	TM1637_WriteCmnd(0x44);
 8000e08:	2044      	movs	r0, #68	@ 0x44
 8000e0a:	f7ff ffc5 	bl	8000d98 <TM1637_WriteCmnd>
	TM1637_WriteData(0xC0, bm0);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4619      	mov	r1, r3
 8000e12:	20c0      	movs	r0, #192	@ 0xc0
 8000e14:	f7ff ffd1 	bl	8000dba <TM1637_WriteData>
	TM1637_WriteData(0xC1, bm1);
 8000e18:	79bb      	ldrb	r3, [r7, #6]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	20c1      	movs	r0, #193	@ 0xc1
 8000e1e:	f7ff ffcc 	bl	8000dba <TM1637_WriteData>
	TM1637_WriteData(0xC2, bm2);
 8000e22:	797b      	ldrb	r3, [r7, #5]
 8000e24:	4619      	mov	r1, r3
 8000e26:	20c2      	movs	r0, #194	@ 0xc2
 8000e28:	f7ff ffc7 	bl	8000dba <TM1637_WriteData>
	TM1637_WriteData(0xC3, bm3);
 8000e2c:	793b      	ldrb	r3, [r7, #4]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	20c3      	movs	r0, #195	@ 0xc3
 8000e32:	f7ff ffc2 	bl	8000dba <TM1637_WriteData>
	TM1637_WriteCmnd(0x8A);
 8000e36:	208a      	movs	r0, #138	@ 0x8a
 8000e38:	f7ff ffae 	bl	8000d98 <TM1637_WriteCmnd>
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}

08000e44 <qs_put_digits>:
	}
}


void qs_put_digits(uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t colon)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	461a      	mov	r2, r3
 8000e52:	4623      	mov	r3, r4
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	4603      	mov	r3, r0
 8000e58:	71bb      	strb	r3, [r7, #6]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	717b      	strb	r3, [r7, #5]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	713b      	strb	r3, [r7, #4]
	qs_put_bitmasks(seg_array[d0],
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <qs_put_digits+0x58>)
 8000e66:	5cd0      	ldrb	r0, [r2, r3]
					seg_array[d1] | (colon ? 0x80 : 0x00),
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e9c <qs_put_digits+0x58>)
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	7e3a      	ldrb	r2, [r7, #24]
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d002      	beq.n	8000e7c <qs_put_digits+0x38>
 8000e76:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8000e7a:	e000      	b.n	8000e7e <qs_put_digits+0x3a>
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b25b      	sxtb	r3, r3
	qs_put_bitmasks(seg_array[d0],
 8000e82:	b2d9      	uxtb	r1, r3
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <qs_put_digits+0x58>)
 8000e88:	5cd2      	ldrb	r2, [r2, r3]
 8000e8a:	793b      	ldrb	r3, [r7, #4]
 8000e8c:	4c03      	ldr	r4, [pc, #12]	@ (8000e9c <qs_put_digits+0x58>)
 8000e8e:	5ce3      	ldrb	r3, [r4, r3]
 8000e90:	f7ff ffab 	bl	8000dea <qs_put_bitmasks>
					seg_array[d2],
					seg_array[d3]);
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd90      	pop	{r4, r7, pc}
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <qs_put_big_num>:



void qs_put_big_num(uint16_t big_num)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
	uint8_t ones = (big_num /    1) % 10;
 8000eaa:	88fa      	ldrh	r2, [r7, #6]
 8000eac:	4b2c      	ldr	r3, [pc, #176]	@ (8000f60 <qs_put_big_num+0xc0>)
 8000eae:	fba3 1302 	umull	r1, r3, r3, r2
 8000eb2:	08d9      	lsrs	r1, r3, #3
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	733b      	strb	r3, [r7, #12]
	uint8_t tens = (big_num /   10) % 10;
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	4a26      	ldr	r2, [pc, #152]	@ (8000f60 <qs_put_big_num+0xc0>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	08db      	lsrs	r3, r3, #3
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <qs_put_big_num+0xc0>)
 8000ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed4:	08d9      	lsrs	r1, r3, #3
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	73fb      	strb	r3, [r7, #15]
	uint8_t huns = (big_num /  100) % 10;
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f64 <qs_put_big_num+0xc4>)
 8000ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eec:	095b      	lsrs	r3, r3, #5
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <qs_put_big_num+0xc0>)
 8000ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ef6:	08d9      	lsrs	r1, r3, #3
 8000ef8:	460b      	mov	r3, r1
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	73bb      	strb	r3, [r7, #14]
	uint8_t thus = (big_num / 1000) % 10;
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <qs_put_big_num+0xc8>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	099b      	lsrs	r3, r3, #6
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <qs_put_big_num+0xc0>)
 8000f14:	fba3 1302 	umull	r1, r3, r3, r2
 8000f18:	08d9      	lsrs	r1, r3, #3
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	737b      	strb	r3, [r7, #13]

	if (thus == 0)
 8000f28:	7b7b      	ldrb	r3, [r7, #13]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10b      	bne.n	8000f46 <qs_put_big_num+0xa6>
	{
		thus = QS_BLANK;
 8000f2e:	2310      	movs	r3, #16
 8000f30:	737b      	strb	r3, [r7, #13]
		if (huns == 0)
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d106      	bne.n	8000f46 <qs_put_big_num+0xa6>
		{
			huns = QS_BLANK;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	73bb      	strb	r3, [r7, #14]
			if (tens == 0)
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <qs_put_big_num+0xa6>
			{
				tens = QS_BLANK;
 8000f42:	2310      	movs	r3, #16
 8000f44:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	qs_put_digits(thus, huns, tens, ones, 0);
 8000f46:	7b3b      	ldrb	r3, [r7, #12]
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	7bb9      	ldrb	r1, [r7, #14]
 8000f4c:	7b78      	ldrb	r0, [r7, #13]
 8000f4e:	2400      	movs	r4, #0
 8000f50:	9400      	str	r4, [sp, #0]
 8000f52:	f7ff ff77 	bl	8000e44 <qs_put_digits>
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	cccccccd 	.word	0xcccccccd
 8000f64:	51eb851f 	.word	0x51eb851f
 8000f68:	10624dd3 	.word	0x10624dd3

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a08      	ldr	r2, [pc, #32]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000faa:	2007      	movs	r0, #7
 8000fac:	f000 fa68 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fcc:	d115      	bne.n	8000ffa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <HAL_TIM_Base_MspInit+0x48>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <HAL_TIM_Base_MspInit+0x48>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <HAL_TIM_Base_MspInit+0x48>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	201c      	movs	r0, #28
 8000ff0:	f000 fa51 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff4:	201c      	movs	r0, #28
 8000ff6:	f000 fa6a 	bl	80014ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	@ 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a19      	ldr	r2, [pc, #100]	@ (800108c <HAL_UART_MspInit+0x84>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d12b      	bne.n	8001082 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HAL_UART_MspInit+0x88>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	4a17      	ldr	r2, [pc, #92]	@ (8001090 <HAL_UART_MspInit+0x88>)
 8001034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001038:	6413      	str	r3, [r2, #64]	@ 0x40
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <HAL_UART_MspInit+0x88>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <HAL_UART_MspInit+0x88>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <HAL_UART_MspInit+0x88>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_UART_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001062:	230c      	movs	r3, #12
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001072:	2307      	movs	r3, #7
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	@ (8001094 <HAL_UART_MspInit+0x8c>)
 800107e:	f000 fa41 	bl	8001504 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	@ 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40004400 	.word	0x40004400
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <NMI_Handler+0x4>

080010a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <MemManage_Handler+0x4>

080010b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <UsageFault_Handler+0x4>

080010c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ee:	f000 f8d7 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MY_BTN_Pin);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f000 fbb8 	bl	8001870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <TIM2_IRQHandler+0x10>)
 800110a:	f001 f913 	bl	8002334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000094 	.word	0x20000094

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	@ (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f002 f986 	bl	8003458 <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20018000 	.word	0x20018000
 8001178:	00000400 	.word	0x00000400
 800117c:	20000134 	.word	0x20000134
 8001180:	20000288 	.word	0x20000288

08001184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011ac:	f7ff ffea 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <LoopFillZerobss+0x1a>)
				debounce_time_start = 0;
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	@ (80011f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80011d6:	f002 f945 	bl	8003464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff fb77 	bl	80008cc <main>
  bx  lr    
 80011de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011ec:	0800484c 	.word	0x0800484c
  ldr r2, =_sbss
 80011f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011f4:	20000284 	.word	0x20000284

080011f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001200:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <HAL_Init+0x40>)
 8001206:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800120a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <HAL_Init+0x40>)
 8001212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	@ (800123c <HAL_Init+0x40>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f92b 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f808 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fe9c 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023c00 	.word	0x40023c00

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_InitTick+0x54>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_InitTick+0x58>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f943 	bl	80014ea <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800127c:	f000 f90b 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	@ (800129c <HAL_InitTick+0x5c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000001c 	.word	0x2000001c
 8001298:	20000024 	.word	0x20000024
 800129c:	20000020 	.word	0x20000020

080012a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000024 	.word	0x20000024
 80012c4:	20000138 	.word	0x20000138

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000138 	.word	0x20000138

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4907      	ldr	r1, [pc, #28]	@ (800137c <__NVIC_EnableIRQ+0x38>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	@ (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	@ (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	@ 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
         );
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	@ 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001460:	f7ff ff8e 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff29 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff3e 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff8e 	bl	80013d4 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff31 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	@ 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	e159      	b.n	80017d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	429a      	cmp	r2, r3
 800153a:	f040 8148 	bne.w	80017ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d005      	beq.n	8001556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001552:	2b02      	cmp	r3, #2
 8001554:	d130      	bne.n	80015b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800158c:	2201      	movs	r2, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 0201 	and.w	r2, r3, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d017      	beq.n	80015f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d123      	bne.n	8001648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3208      	adds	r2, #8
 8001608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	69b9      	ldr	r1, [r7, #24]
 8001644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0203 	and.w	r2, r3, #3
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80a2 	beq.w	80017ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b57      	ldr	r3, [pc, #348]	@ (80017ec <HAL_GPIO_Init+0x2e8>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	4a56      	ldr	r2, [pc, #344]	@ (80017ec <HAL_GPIO_Init+0x2e8>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001698:	6453      	str	r3, [r2, #68]	@ 0x44
 800169a:	4b54      	ldr	r3, [pc, #336]	@ (80017ec <HAL_GPIO_Init+0x2e8>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a6:	4a52      	ldr	r2, [pc, #328]	@ (80017f0 <HAL_GPIO_Init+0x2ec>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a49      	ldr	r2, [pc, #292]	@ (80017f4 <HAL_GPIO_Init+0x2f0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x202>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a48      	ldr	r2, [pc, #288]	@ (80017f8 <HAL_GPIO_Init+0x2f4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x1fe>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a47      	ldr	r2, [pc, #284]	@ (80017fc <HAL_GPIO_Init+0x2f8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x1fa>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a46      	ldr	r2, [pc, #280]	@ (8001800 <HAL_GPIO_Init+0x2fc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x1f6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a45      	ldr	r2, [pc, #276]	@ (8001804 <HAL_GPIO_Init+0x300>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x1f2>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e008      	b.n	8001708 <HAL_GPIO_Init+0x204>
 80016f6:	2307      	movs	r3, #7
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x204>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e004      	b.n	8001708 <HAL_GPIO_Init+0x204>
 80016fe:	2302      	movs	r3, #2
 8001700:	e002      	b.n	8001708 <HAL_GPIO_Init+0x204>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x204>
 8001706:	2300      	movs	r3, #0
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	f002 0203 	and.w	r2, r2, #3
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	4093      	lsls	r3, r2
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001718:	4935      	ldr	r1, [pc, #212]	@ (80017f0 <HAL_GPIO_Init+0x2ec>)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001726:	4b38      	ldr	r3, [pc, #224]	@ (8001808 <HAL_GPIO_Init+0x304>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800174a:	4a2f      	ldr	r2, [pc, #188]	@ (8001808 <HAL_GPIO_Init+0x304>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001750:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <HAL_GPIO_Init+0x304>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001774:	4a24      	ldr	r2, [pc, #144]	@ (8001808 <HAL_GPIO_Init+0x304>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <HAL_GPIO_Init+0x304>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179e:	4a1a      	ldr	r2, [pc, #104]	@ (8001808 <HAL_GPIO_Init+0x304>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a4:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <HAL_GPIO_Init+0x304>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001808 <HAL_GPIO_Init+0x304>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3301      	adds	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	f67f aea2 	bls.w	8001520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3724      	adds	r7, #36	@ 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40013800 	.word	0x40013800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40013c00 	.word	0x40013c00

0800180c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e001      	b.n	800182e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe febe 	bl	8000610 <HAL_GPIO_EXTI_Callback>
  }
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40013c00 	.word	0x40013c00

080018a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e267      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d075      	beq.n	80019aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018be:	4b88      	ldr	r3, [pc, #544]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d00c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ca:	4b85      	ldr	r3, [pc, #532]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d112      	bne.n	80018fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d6:	4b82      	ldr	r3, [pc, #520]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018e2:	d10b      	bne.n	80018fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d05b      	beq.n	80019a8 <HAL_RCC_OscConfig+0x108>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d157      	bne.n	80019a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e242      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x74>
 8001906:	4b76      	ldr	r3, [pc, #472]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a75      	ldr	r2, [pc, #468]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0xb0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x98>
 800191e:	4b70      	ldr	r3, [pc, #448]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6f      	ldr	r2, [pc, #444]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6c      	ldr	r2, [pc, #432]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xb0>
 8001938:	4b69      	ldr	r3, [pc, #420]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a68      	ldr	r2, [pc, #416]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b66      	ldr	r3, [pc, #408]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a65      	ldr	r2, [pc, #404]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fcb6 	bl	80012c8 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fcb2 	bl	80012c8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	@ 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e207      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b5b      	ldr	r3, [pc, #364]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0xc0>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fca2 	bl	80012c8 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fc9e 	bl	80012c8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1f3      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b51      	ldr	r3, [pc, #324]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0xe8>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019b6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c2:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d11c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ce:	4b44      	ldr	r3, [pc, #272]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x152>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e1c7      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4937      	ldr	r1, [pc, #220]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	e03a      	b.n	8001a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff fc57 	bl	80012c8 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fc53 	bl	80012c8 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1a8      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4925      	ldr	r1, [pc, #148]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fc36 	bl	80012c8 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fc32 	bl	80012c8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e187      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d036      	beq.n	8001af8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d016      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_RCC_OscConfig+0x248>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff fc16 	bl	80012c8 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fc12 	bl	80012c8 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e167      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x200>
 8001abe:	e01b      	b.n	8001af8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_OscConfig+0x248>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fbff 	bl	80012c8 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	e00e      	b.n	8001aec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff fbfb 	bl	80012c8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d907      	bls.n	8001aec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e150      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	42470000 	.word	0x42470000
 8001ae8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b88      	ldr	r3, [pc, #544]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ea      	bne.n	8001ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8097 	beq.w	8001c34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b81      	ldr	r3, [pc, #516]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b7a      	ldr	r3, [pc, #488]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b77      	ldr	r3, [pc, #476]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b42:	4b74      	ldr	r3, [pc, #464]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a73      	ldr	r2, [pc, #460]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fbbb 	bl	80012c8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7ff fbb7 	bl	80012c8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e10c      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	4b6a      	ldr	r3, [pc, #424]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2ea>
 8001b7c:	4b64      	ldr	r3, [pc, #400]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b80:	4a63      	ldr	r2, [pc, #396]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b88:	e01c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x324>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x30c>
 8001b92:	4b5f      	ldr	r3, [pc, #380]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b96:	4a5e      	ldr	r2, [pc, #376]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x324>
 8001bac:	4b58      	ldr	r3, [pc, #352]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb0:	4a57      	ldr	r2, [pc, #348]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb8:	4b55      	ldr	r3, [pc, #340]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbc:	4a54      	ldr	r2, [pc, #336]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d015      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fb7c 	bl	80012c8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fb78 	bl	80012c8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0cb      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	4b49      	ldr	r3, [pc, #292]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0ee      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x334>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fb66 	bl	80012c8 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7ff fb62 	bl	80012c8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0b5      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	4b3e      	ldr	r3, [pc, #248]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ee      	bne.n	8001c00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c28:	4b39      	ldr	r3, [pc, #228]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	4a38      	ldr	r2, [pc, #224]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a1 	beq.w	8001d80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c3e:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d05c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d141      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fb36 	bl	80012c8 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff fb32 	bl	80012c8 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e087      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	085b      	lsrs	r3, r3, #1
 8001c96:	3b01      	subs	r3, #1
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	491b      	ldr	r1, [pc, #108]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff fb0b 	bl	80012c8 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7ff fb07 	bl	80012c8 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e05c      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x416>
 8001cd4:	e054      	b.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff faf4 	bl	80012c8 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff faf0 	bl	80012c8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e045      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x444>
 8001d02:	e03d      	b.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e038      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <HAL_RCC_OscConfig+0x4ec>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d028      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d121      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d11a      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d111      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0cc      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b68      	ldr	r3, [pc, #416]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d90c      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b65      	ldr	r3, [pc, #404]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0b8      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de4:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfc:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a52      	ldr	r2, [pc, #328]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b50      	ldr	r3, [pc, #320]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	494d      	ldr	r1, [pc, #308]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d044      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d119      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e067      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b37      	ldr	r3, [pc, #220]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4934      	ldr	r1, [pc, #208]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e80:	f7ff fa22 	bl	80012c8 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7ff fa1e 	bl	80012c8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e04f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d20c      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e032      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4916      	ldr	r1, [pc, #88]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	490e      	ldr	r1, [pc, #56]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f16:	f000 f821 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	490a      	ldr	r1, [pc, #40]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f982 	bl	8001240 <HAL_InitTick>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	080046d4 	.word	0x080046d4
 8001f54:	2000001c 	.word	0x2000001c
 8001f58:	20000020 	.word	0x20000020

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f60:	b094      	sub	sp, #80	@ 0x50
 8001f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f74:	4b79      	ldr	r3, [pc, #484]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d00d      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x40>
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	f200 80e1 	bhi.w	8002148 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x34>
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d003      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f8e:	e0db      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b73      	ldr	r3, [pc, #460]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f94:	e0db      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f96:	4b73      	ldr	r3, [pc, #460]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f9a:	e0d8      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fa4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	2200      	movs	r2, #0
 8001fba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fce:	4622      	mov	r2, r4
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	0159      	lsls	r1, r3, #5
 8001fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe0:	0150      	lsls	r0, r2, #5
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	1a51      	subs	r1, r2, r1
 8001fea:	6139      	str	r1, [r7, #16]
 8001fec:	4629      	mov	r1, r5
 8001fee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002000:	4659      	mov	r1, fp
 8002002:	018b      	lsls	r3, r1, #6
 8002004:	4651      	mov	r1, sl
 8002006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800200a:	4651      	mov	r1, sl
 800200c:	018a      	lsls	r2, r1, #6
 800200e:	4651      	mov	r1, sl
 8002010:	ebb2 0801 	subs.w	r8, r2, r1
 8002014:	4659      	mov	r1, fp
 8002016:	eb63 0901 	sbc.w	r9, r3, r1
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800202a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800202e:	4690      	mov	r8, r2
 8002030:	4699      	mov	r9, r3
 8002032:	4623      	mov	r3, r4
 8002034:	eb18 0303 	adds.w	r3, r8, r3
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	462b      	mov	r3, r5
 800203c:	eb49 0303 	adc.w	r3, r9, r3
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800204e:	4629      	mov	r1, r5
 8002050:	024b      	lsls	r3, r1, #9
 8002052:	4621      	mov	r1, r4
 8002054:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002058:	4621      	mov	r1, r4
 800205a:	024a      	lsls	r2, r1, #9
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002062:	2200      	movs	r2, #0
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800206c:	f7fe f910 	bl	8000290 <__aeabi_uldivmod>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4613      	mov	r3, r2
 8002076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002078:	e058      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207a:	4b38      	ldr	r3, [pc, #224]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	2200      	movs	r2, #0
 8002082:	4618      	mov	r0, r3
 8002084:	4611      	mov	r1, r2
 8002086:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800208a:	623b      	str	r3, [r7, #32]
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002094:	4642      	mov	r2, r8
 8002096:	464b      	mov	r3, r9
 8002098:	f04f 0000 	mov.w	r0, #0
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	0159      	lsls	r1, r3, #5
 80020a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a6:	0150      	lsls	r0, r2, #5
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4641      	mov	r1, r8
 80020ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80020b2:	4649      	mov	r1, r9
 80020b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020cc:	ebb2 040a 	subs.w	r4, r2, sl
 80020d0:	eb63 050b 	sbc.w	r5, r3, fp
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	00eb      	lsls	r3, r5, #3
 80020de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020e2:	00e2      	lsls	r2, r4, #3
 80020e4:	4614      	mov	r4, r2
 80020e6:	461d      	mov	r5, r3
 80020e8:	4643      	mov	r3, r8
 80020ea:	18e3      	adds	r3, r4, r3
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	464b      	mov	r3, r9
 80020f0:	eb45 0303 	adc.w	r3, r5, r3
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002102:	4629      	mov	r1, r5
 8002104:	028b      	lsls	r3, r1, #10
 8002106:	4621      	mov	r1, r4
 8002108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800210c:	4621      	mov	r1, r4
 800210e:	028a      	lsls	r2, r1, #10
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002116:	2200      	movs	r2, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	61fa      	str	r2, [r7, #28]
 800211c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002120:	f7fe f8b6 	bl	8000290 <__aeabi_uldivmod>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4613      	mov	r3, r2
 800212a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800213c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800213e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x204>)
 800214a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002150:	4618      	mov	r0, r3
 8002152:	3750      	adds	r7, #80	@ 0x50
 8002154:	46bd      	mov	sp, r7
 8002156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	00f42400 	.word	0x00f42400
 8002164:	007a1200 	.word	0x007a1200

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <HAL_RCC_GetHCLKFreq+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000001c 	.word	0x2000001c

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002184:	f7ff fff0 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0a9b      	lsrs	r3, r3, #10
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	@ (80021a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	080046e4 	.word	0x080046e4

080021a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ac:	f7ff ffdc 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	0b5b      	lsrs	r3, r3, #13
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4903      	ldr	r1, [pc, #12]	@ (80021cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	080046e4 	.word	0x080046e4

080021d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e041      	b.n	8002266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fee0 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3304      	adds	r3, #4
 800220c:	4619      	mov	r1, r3
 800220e:	4610      	mov	r0, r2
 8002210:	f000 fa70 	bl	80026f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d001      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e044      	b.n	8002312 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002320 <HAL_TIM_Base_Start_IT+0xb0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d018      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x6c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b2:	d013      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x6c>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002324 <HAL_TIM_Base_Start_IT+0xb4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00e      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x6c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a19      	ldr	r2, [pc, #100]	@ (8002328 <HAL_TIM_Base_Start_IT+0xb8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d009      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x6c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a17      	ldr	r2, [pc, #92]	@ (800232c <HAL_TIM_Base_Start_IT+0xbc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d004      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x6c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a16      	ldr	r2, [pc, #88]	@ (8002330 <HAL_TIM_Base_Start_IT+0xc0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d111      	bne.n	8002300 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d010      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0201 	orr.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fe:	e007      	b.n	8002310 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40010000 	.word	0x40010000
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800
 800232c:	40000c00 	.word	0x40000c00
 8002330:	40014000 	.word	0x40014000

08002334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d020      	beq.n	8002398 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0202 	mvn.w	r2, #2
 8002368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f999 	bl	80026b6 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f98b 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f99c 	bl	80026ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d020      	beq.n	80023e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01b      	beq.n	80023e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0204 	mvn.w	r2, #4
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2202      	movs	r2, #2
 80023ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f973 	bl	80026b6 <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f965 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f976 	bl	80026ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d020      	beq.n	8002430 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01b      	beq.n	8002430 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0208 	mvn.w	r2, #8
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2204      	movs	r2, #4
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f94d 	bl	80026b6 <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f93f 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f950 	bl	80026ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d020      	beq.n	800247c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01b      	beq.n	800247c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0210 	mvn.w	r2, #16
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2208      	movs	r2, #8
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f927 	bl	80026b6 <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f919 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f92a 	bl	80026ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00c      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0201 	mvn.w	r2, #1
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe f9c4 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fab6 	bl	8002a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00c      	beq.n	80024e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f8fb 	bl	80026de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00c      	beq.n	800250c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0220 	mvn.w	r2, #32
 8002504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa88 	bl	8002a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_TIM_ConfigClockSource+0x1c>
 800252c:	2302      	movs	r3, #2
 800252e:	e0b4      	b.n	800269a <HAL_TIM_ConfigClockSource+0x186>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800254e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002568:	d03e      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0xd4>
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800256e:	f200 8087 	bhi.w	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002576:	f000 8086 	beq.w	8002686 <HAL_TIM_ConfigClockSource+0x172>
 800257a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800257e:	d87f      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b70      	cmp	r3, #112	@ 0x70
 8002582:	d01a      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0xa6>
 8002584:	2b70      	cmp	r3, #112	@ 0x70
 8002586:	d87b      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b60      	cmp	r3, #96	@ 0x60
 800258a:	d050      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x11a>
 800258c:	2b60      	cmp	r3, #96	@ 0x60
 800258e:	d877      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b50      	cmp	r3, #80	@ 0x50
 8002592:	d03c      	beq.n	800260e <HAL_TIM_ConfigClockSource+0xfa>
 8002594:	2b50      	cmp	r3, #80	@ 0x50
 8002596:	d873      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b40      	cmp	r3, #64	@ 0x40
 800259a:	d058      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x13a>
 800259c:	2b40      	cmp	r3, #64	@ 0x40
 800259e:	d86f      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b30      	cmp	r3, #48	@ 0x30
 80025a2:	d064      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	2b30      	cmp	r3, #48	@ 0x30
 80025a6:	d86b      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d060      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d867      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d05c      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d05a      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025b8:	e062      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025ca:	f000 f999 	bl	8002900 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	609a      	str	r2, [r3, #8]
      break;
 80025e6:	e04f      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025f8:	f000 f982 	bl	8002900 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800260a:	609a      	str	r2, [r3, #8]
      break;
 800260c:	e03c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	461a      	mov	r2, r3
 800261c:	f000 f8f6 	bl	800280c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2150      	movs	r1, #80	@ 0x50
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f94f 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 800262c:	e02c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800263a:	461a      	mov	r2, r3
 800263c:	f000 f915 	bl	800286a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2160      	movs	r1, #96	@ 0x60
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f93f 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 800264c:	e01c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800265a:	461a      	mov	r2, r3
 800265c:	f000 f8d6 	bl	800280c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2140      	movs	r1, #64	@ 0x40
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f92f 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 800266c:	e00c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	4610      	mov	r0, r2
 800267a:	f000 f926 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 800267e:	e003      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      break;
 8002684:	e000      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3a      	ldr	r2, [pc, #232]	@ (80027f0 <TIM_Base_SetConfig+0xfc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00f      	beq.n	800272c <TIM_Base_SetConfig+0x38>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002712:	d00b      	beq.n	800272c <TIM_Base_SetConfig+0x38>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a37      	ldr	r2, [pc, #220]	@ (80027f4 <TIM_Base_SetConfig+0x100>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <TIM_Base_SetConfig+0x38>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a36      	ldr	r2, [pc, #216]	@ (80027f8 <TIM_Base_SetConfig+0x104>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <TIM_Base_SetConfig+0x38>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a35      	ldr	r2, [pc, #212]	@ (80027fc <TIM_Base_SetConfig+0x108>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d108      	bne.n	800273e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a2b      	ldr	r2, [pc, #172]	@ (80027f0 <TIM_Base_SetConfig+0xfc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01b      	beq.n	800277e <TIM_Base_SetConfig+0x8a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274c:	d017      	beq.n	800277e <TIM_Base_SetConfig+0x8a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a28      	ldr	r2, [pc, #160]	@ (80027f4 <TIM_Base_SetConfig+0x100>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <TIM_Base_SetConfig+0x8a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a27      	ldr	r2, [pc, #156]	@ (80027f8 <TIM_Base_SetConfig+0x104>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00f      	beq.n	800277e <TIM_Base_SetConfig+0x8a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a26      	ldr	r2, [pc, #152]	@ (80027fc <TIM_Base_SetConfig+0x108>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00b      	beq.n	800277e <TIM_Base_SetConfig+0x8a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a25      	ldr	r2, [pc, #148]	@ (8002800 <TIM_Base_SetConfig+0x10c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_Base_SetConfig+0x8a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a24      	ldr	r2, [pc, #144]	@ (8002804 <TIM_Base_SetConfig+0x110>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0x8a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a23      	ldr	r2, [pc, #140]	@ (8002808 <TIM_Base_SetConfig+0x114>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0e      	ldr	r2, [pc, #56]	@ (80027f0 <TIM_Base_SetConfig+0xfc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d103      	bne.n	80027c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d105      	bne.n	80027e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f023 0201 	bic.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]
  }
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40010000 	.word	0x40010000
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40000800 	.word	0x40000800
 80027fc:	40000c00 	.word	0x40000c00
 8002800:	40014000 	.word	0x40014000
 8002804:	40014400 	.word	0x40014400
 8002808:	40014800 	.word	0x40014800

0800280c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	f023 0201 	bic.w	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f023 030a 	bic.w	r3, r3, #10
 8002848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800286a:	b480      	push	{r7}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f023 0210 	bic.w	r2, r3, #16
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002894:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	031b      	lsls	r3, r3, #12
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f043 0307 	orr.w	r3, r3, #7
 80028ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	609a      	str	r2, [r3, #8]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800291a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	021a      	lsls	r2, r3, #8
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	431a      	orrs	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002954:	2302      	movs	r3, #2
 8002956:	e050      	b.n	80029fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800297e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1c      	ldr	r2, [pc, #112]	@ (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d018      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a4:	d013      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a18      	ldr	r2, [pc, #96]	@ (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a16      	ldr	r2, [pc, #88]	@ (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a15      	ldr	r2, [pc, #84]	@ (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a13      	ldr	r2, [pc, #76]	@ (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10c      	bne.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800
 8002a14:	40000c00 	.word	0x40000c00
 8002a18:	40014000 	.word	0x40014000

08002a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e042      	b.n	8002adc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe facc 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	@ 0x24
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fa09 	bl	8002ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	@ 0x28
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d175      	bne.n	8002bf0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_UART_Transmit+0x2c>
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e06e      	b.n	8002bf2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2221      	movs	r2, #33	@ 0x21
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b22:	f7fe fbd1 	bl	80012c8 <HAL_GetTick>
 8002b26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	88fa      	ldrh	r2, [r7, #6]
 8002b2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	88fa      	ldrh	r2, [r7, #6]
 8002b32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b3c:	d108      	bne.n	8002b50 <HAL_UART_Transmit+0x6c>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	e003      	b.n	8002b58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b58:	e02e      	b.n	8002bb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2180      	movs	r1, #128	@ 0x80
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f8df 	bl	8002d28 <UART_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e03a      	b.n	8002bf2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	3302      	adds	r3, #2
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	e007      	b.n	8002baa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1cb      	bne.n	8002b5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2140      	movs	r1, #64	@ 0x40
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f8ab 	bl	8002d28 <UART_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e006      	b.n	8002bf2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b08a      	sub	sp, #40	@ 0x28
 8002bfe:	af02      	add	r7, sp, #8
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	f040 8081 	bne.w	8002d1e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_UART_Receive+0x2e>
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e079      	b.n	8002d20 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2222      	movs	r2, #34	@ 0x22
 8002c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c40:	f7fe fb42 	bl	80012c8 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c5a:	d108      	bne.n	8002c6e <HAL_UART_Receive+0x74>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	e003      	b.n	8002c76 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c76:	e047      	b.n	8002d08 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2120      	movs	r1, #32
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f850 	bl	8002d28 <UART_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e042      	b.n	8002d20 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10c      	bne.n	8002cba <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	e01f      	b.n	8002cfa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc2:	d007      	beq.n	8002cd4 <HAL_UART_Receive+0xda>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_UART_Receive+0xe8>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d106      	bne.n	8002ce2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e008      	b.n	8002cf4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1b2      	bne.n	8002c78 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d38:	e03b      	b.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d40:	d037      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d42:	f7fe fac1 	bl	80012c8 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	6a3a      	ldr	r2, [r7, #32]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d302      	bcc.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e03a      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d023      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b80      	cmp	r3, #128	@ 0x80
 8002d6e:	d020      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b40      	cmp	r3, #64	@ 0x40
 8002d74:	d01d      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d116      	bne.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f81d 	bl	8002dda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2208      	movs	r2, #8
 8002da4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00f      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d0b4      	beq.n	8002d3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b095      	sub	sp, #84	@ 0x54
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	330c      	adds	r3, #12
 8002de8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dec:	e853 3f00 	ldrex	r3, [r3]
 8002df0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e02:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e5      	bne.n	8002de2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3314      	adds	r3, #20
 8002e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e3e:	e841 2300 	strex	r3, r2, [r1]
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e5      	bne.n	8002e16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d119      	bne.n	8002e86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f023 0310 	bic.w	r3, r3, #16
 8002e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e72:	61ba      	str	r2, [r7, #24]
 8002e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6979      	ldr	r1, [r7, #20]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e5      	bne.n	8002e52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e94:	bf00      	nop
 8002e96:	3754      	adds	r7, #84	@ 0x54
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea4:	b0c0      	sub	sp, #256	@ 0x100
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	68d9      	ldr	r1, [r3, #12]
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	ea40 0301 	orr.w	r3, r0, r1
 8002ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ef8:	f021 010c 	bic.w	r1, r1, #12
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f06:	430b      	orrs	r3, r1
 8002f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1a:	6999      	ldr	r1, [r3, #24]
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	ea40 0301 	orr.w	r3, r0, r1
 8002f26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b8f      	ldr	r3, [pc, #572]	@ (800316c <UART_SetConfig+0x2cc>)
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d005      	beq.n	8002f40 <UART_SetConfig+0xa0>
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8003170 <UART_SetConfig+0x2d0>)
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d104      	bne.n	8002f4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f40:	f7ff f932 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8002f44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f48:	e003      	b.n	8002f52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f4a:	f7ff f919 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8002f4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f5c:	f040 810c 	bne.w	8003178 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f64:	2200      	movs	r2, #0
 8002f66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f72:	4622      	mov	r2, r4
 8002f74:	462b      	mov	r3, r5
 8002f76:	1891      	adds	r1, r2, r2
 8002f78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f7a:	415b      	adcs	r3, r3
 8002f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f82:	4621      	mov	r1, r4
 8002f84:	eb12 0801 	adds.w	r8, r2, r1
 8002f88:	4629      	mov	r1, r5
 8002f8a:	eb43 0901 	adc.w	r9, r3, r1
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fa2:	4690      	mov	r8, r2
 8002fa4:	4699      	mov	r9, r3
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	eb18 0303 	adds.w	r3, r8, r3
 8002fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	eb49 0303 	adc.w	r3, r9, r3
 8002fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fce:	460b      	mov	r3, r1
 8002fd0:	18db      	adds	r3, r3, r3
 8002fd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	eb42 0303 	adc.w	r3, r2, r3
 8002fda:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fe4:	f7fd f954 	bl	8000290 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4b61      	ldr	r3, [pc, #388]	@ (8003174 <UART_SetConfig+0x2d4>)
 8002fee:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	011c      	lsls	r4, r3, #4
 8002ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003000:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003004:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	1891      	adds	r1, r2, r2
 800300e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003010:	415b      	adcs	r3, r3
 8003012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003018:	4641      	mov	r1, r8
 800301a:	eb12 0a01 	adds.w	sl, r2, r1
 800301e:	4649      	mov	r1, r9
 8003020:	eb43 0b01 	adc.w	fp, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003030:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003038:	4692      	mov	sl, r2
 800303a:	469b      	mov	fp, r3
 800303c:	4643      	mov	r3, r8
 800303e:	eb1a 0303 	adds.w	r3, sl, r3
 8003042:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003046:	464b      	mov	r3, r9
 8003048:	eb4b 0303 	adc.w	r3, fp, r3
 800304c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800305c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003060:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003064:	460b      	mov	r3, r1
 8003066:	18db      	adds	r3, r3, r3
 8003068:	643b      	str	r3, [r7, #64]	@ 0x40
 800306a:	4613      	mov	r3, r2
 800306c:	eb42 0303 	adc.w	r3, r2, r3
 8003070:	647b      	str	r3, [r7, #68]	@ 0x44
 8003072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003076:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800307a:	f7fd f909 	bl	8000290 <__aeabi_uldivmod>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4611      	mov	r1, r2
 8003084:	4b3b      	ldr	r3, [pc, #236]	@ (8003174 <UART_SetConfig+0x2d4>)
 8003086:	fba3 2301 	umull	r2, r3, r3, r1
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	2264      	movs	r2, #100	@ 0x64
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	1acb      	subs	r3, r1, r3
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800309a:	4b36      	ldr	r3, [pc, #216]	@ (8003174 <UART_SetConfig+0x2d4>)
 800309c:	fba3 2302 	umull	r2, r3, r3, r2
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030a8:	441c      	add	r4, r3
 80030aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	1891      	adds	r1, r2, r2
 80030c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030c4:	415b      	adcs	r3, r3
 80030c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030cc:	4641      	mov	r1, r8
 80030ce:	1851      	adds	r1, r2, r1
 80030d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80030d2:	4649      	mov	r1, r9
 80030d4:	414b      	adcs	r3, r1
 80030d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030e4:	4659      	mov	r1, fp
 80030e6:	00cb      	lsls	r3, r1, #3
 80030e8:	4651      	mov	r1, sl
 80030ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ee:	4651      	mov	r1, sl
 80030f0:	00ca      	lsls	r2, r1, #3
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	4642      	mov	r2, r8
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003100:	464b      	mov	r3, r9
 8003102:	460a      	mov	r2, r1
 8003104:	eb42 0303 	adc.w	r3, r2, r3
 8003108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003118:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800311c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003120:	460b      	mov	r3, r1
 8003122:	18db      	adds	r3, r3, r3
 8003124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003126:	4613      	mov	r3, r2
 8003128:	eb42 0303 	adc.w	r3, r2, r3
 800312c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800312e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003132:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003136:	f7fd f8ab 	bl	8000290 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <UART_SetConfig+0x2d4>)
 8003140:	fba3 1302 	umull	r1, r3, r3, r2
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	2164      	movs	r1, #100	@ 0x64
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	3332      	adds	r3, #50	@ 0x32
 8003152:	4a08      	ldr	r2, [pc, #32]	@ (8003174 <UART_SetConfig+0x2d4>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	f003 0207 	and.w	r2, r3, #7
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4422      	add	r2, r4
 8003166:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003168:	e106      	b.n	8003378 <UART_SetConfig+0x4d8>
 800316a:	bf00      	nop
 800316c:	40011000 	.word	0x40011000
 8003170:	40011400 	.word	0x40011400
 8003174:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800317c:	2200      	movs	r2, #0
 800317e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003182:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003186:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800318a:	4642      	mov	r2, r8
 800318c:	464b      	mov	r3, r9
 800318e:	1891      	adds	r1, r2, r2
 8003190:	6239      	str	r1, [r7, #32]
 8003192:	415b      	adcs	r3, r3
 8003194:	627b      	str	r3, [r7, #36]	@ 0x24
 8003196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800319a:	4641      	mov	r1, r8
 800319c:	1854      	adds	r4, r2, r1
 800319e:	4649      	mov	r1, r9
 80031a0:	eb43 0501 	adc.w	r5, r3, r1
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	00eb      	lsls	r3, r5, #3
 80031ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b2:	00e2      	lsls	r2, r4, #3
 80031b4:	4614      	mov	r4, r2
 80031b6:	461d      	mov	r5, r3
 80031b8:	4643      	mov	r3, r8
 80031ba:	18e3      	adds	r3, r4, r3
 80031bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031c0:	464b      	mov	r3, r9
 80031c2:	eb45 0303 	adc.w	r3, r5, r3
 80031c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031e6:	4629      	mov	r1, r5
 80031e8:	008b      	lsls	r3, r1, #2
 80031ea:	4621      	mov	r1, r4
 80031ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031f0:	4621      	mov	r1, r4
 80031f2:	008a      	lsls	r2, r1, #2
 80031f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031f8:	f7fd f84a 	bl	8000290 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4b60      	ldr	r3, [pc, #384]	@ (8003384 <UART_SetConfig+0x4e4>)
 8003202:	fba3 2302 	umull	r2, r3, r3, r2
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	011c      	lsls	r4, r3, #4
 800320a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800320e:	2200      	movs	r2, #0
 8003210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003214:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003218:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	1891      	adds	r1, r2, r2
 8003222:	61b9      	str	r1, [r7, #24]
 8003224:	415b      	adcs	r3, r3
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322c:	4641      	mov	r1, r8
 800322e:	1851      	adds	r1, r2, r1
 8003230:	6139      	str	r1, [r7, #16]
 8003232:	4649      	mov	r1, r9
 8003234:	414b      	adcs	r3, r1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003244:	4659      	mov	r1, fp
 8003246:	00cb      	lsls	r3, r1, #3
 8003248:	4651      	mov	r1, sl
 800324a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800324e:	4651      	mov	r1, sl
 8003250:	00ca      	lsls	r2, r1, #3
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	4603      	mov	r3, r0
 8003258:	4642      	mov	r2, r8
 800325a:	189b      	adds	r3, r3, r2
 800325c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003260:	464b      	mov	r3, r9
 8003262:	460a      	mov	r2, r1
 8003264:	eb42 0303 	adc.w	r3, r2, r3
 8003268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003276:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003284:	4649      	mov	r1, r9
 8003286:	008b      	lsls	r3, r1, #2
 8003288:	4641      	mov	r1, r8
 800328a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800328e:	4641      	mov	r1, r8
 8003290:	008a      	lsls	r2, r1, #2
 8003292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003296:	f7fc fffb 	bl	8000290 <__aeabi_uldivmod>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	4b38      	ldr	r3, [pc, #224]	@ (8003384 <UART_SetConfig+0x4e4>)
 80032a2:	fba3 2301 	umull	r2, r3, r3, r1
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2264      	movs	r2, #100	@ 0x64
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	1acb      	subs	r3, r1, r3
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	3332      	adds	r3, #50	@ 0x32
 80032b4:	4a33      	ldr	r2, [pc, #204]	@ (8003384 <UART_SetConfig+0x4e4>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032c0:	441c      	add	r4, r3
 80032c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c6:	2200      	movs	r2, #0
 80032c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80032ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80032cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	1891      	adds	r1, r2, r2
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	415b      	adcs	r3, r3
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032e0:	4641      	mov	r1, r8
 80032e2:	1851      	adds	r1, r2, r1
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	4649      	mov	r1, r9
 80032e8:	414b      	adcs	r3, r1
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032f8:	4659      	mov	r1, fp
 80032fa:	00cb      	lsls	r3, r1, #3
 80032fc:	4651      	mov	r1, sl
 80032fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003302:	4651      	mov	r1, sl
 8003304:	00ca      	lsls	r2, r1, #3
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	4603      	mov	r3, r0
 800330c:	4642      	mov	r2, r8
 800330e:	189b      	adds	r3, r3, r2
 8003310:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003312:	464b      	mov	r3, r9
 8003314:	460a      	mov	r2, r1
 8003316:	eb42 0303 	adc.w	r3, r2, r3
 800331a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	663b      	str	r3, [r7, #96]	@ 0x60
 8003326:	667a      	str	r2, [r7, #100]	@ 0x64
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003334:	4649      	mov	r1, r9
 8003336:	008b      	lsls	r3, r1, #2
 8003338:	4641      	mov	r1, r8
 800333a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800333e:	4641      	mov	r1, r8
 8003340:	008a      	lsls	r2, r1, #2
 8003342:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003346:	f7fc ffa3 	bl	8000290 <__aeabi_uldivmod>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4b0d      	ldr	r3, [pc, #52]	@ (8003384 <UART_SetConfig+0x4e4>)
 8003350:	fba3 1302 	umull	r1, r3, r3, r2
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	2164      	movs	r1, #100	@ 0x64
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	3332      	adds	r3, #50	@ 0x32
 8003362:	4a08      	ldr	r2, [pc, #32]	@ (8003384 <UART_SetConfig+0x4e4>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	f003 020f 	and.w	r2, r3, #15
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4422      	add	r2, r4
 8003376:	609a      	str	r2, [r3, #8]
}
 8003378:	bf00      	nop
 800337a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800337e:	46bd      	mov	sp, r7
 8003380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003384:	51eb851f 	.word	0x51eb851f

08003388 <sniprintf>:
 8003388:	b40c      	push	{r2, r3}
 800338a:	b530      	push	{r4, r5, lr}
 800338c:	4b17      	ldr	r3, [pc, #92]	@ (80033ec <sniprintf+0x64>)
 800338e:	1e0c      	subs	r4, r1, #0
 8003390:	681d      	ldr	r5, [r3, #0]
 8003392:	b09d      	sub	sp, #116	@ 0x74
 8003394:	da08      	bge.n	80033a8 <sniprintf+0x20>
 8003396:	238b      	movs	r3, #139	@ 0x8b
 8003398:	602b      	str	r3, [r5, #0]
 800339a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800339e:	b01d      	add	sp, #116	@ 0x74
 80033a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033a4:	b002      	add	sp, #8
 80033a6:	4770      	bx	lr
 80033a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80033ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80033b0:	bf14      	ite	ne
 80033b2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80033b6:	4623      	moveq	r3, r4
 80033b8:	9304      	str	r3, [sp, #16]
 80033ba:	9307      	str	r3, [sp, #28]
 80033bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033c0:	9002      	str	r0, [sp, #8]
 80033c2:	9006      	str	r0, [sp, #24]
 80033c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80033c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80033ca:	ab21      	add	r3, sp, #132	@ 0x84
 80033cc:	a902      	add	r1, sp, #8
 80033ce:	4628      	mov	r0, r5
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	f000 f9c1 	bl	8003758 <_svfiprintf_r>
 80033d6:	1c43      	adds	r3, r0, #1
 80033d8:	bfbc      	itt	lt
 80033da:	238b      	movlt	r3, #139	@ 0x8b
 80033dc:	602b      	strlt	r3, [r5, #0]
 80033de:	2c00      	cmp	r4, #0
 80033e0:	d0dd      	beq.n	800339e <sniprintf+0x16>
 80033e2:	9b02      	ldr	r3, [sp, #8]
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	e7d9      	b.n	800339e <sniprintf+0x16>
 80033ea:	bf00      	nop
 80033ec:	20000028 	.word	0x20000028

080033f0 <siscanf>:
 80033f0:	b40e      	push	{r1, r2, r3}
 80033f2:	b530      	push	{r4, r5, lr}
 80033f4:	b09c      	sub	sp, #112	@ 0x70
 80033f6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80033f8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80033fc:	f854 5b04 	ldr.w	r5, [r4], #4
 8003400:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003404:	9002      	str	r0, [sp, #8]
 8003406:	9006      	str	r0, [sp, #24]
 8003408:	f7fc feea 	bl	80001e0 <strlen>
 800340c:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <siscanf+0x4c>)
 800340e:	9003      	str	r0, [sp, #12]
 8003410:	9007      	str	r0, [sp, #28]
 8003412:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003414:	480a      	ldr	r0, [pc, #40]	@ (8003440 <siscanf+0x50>)
 8003416:	9401      	str	r4, [sp, #4]
 8003418:	2300      	movs	r3, #0
 800341a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800341c:	9314      	str	r3, [sp, #80]	@ 0x50
 800341e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003422:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003426:	462a      	mov	r2, r5
 8003428:	4623      	mov	r3, r4
 800342a:	a902      	add	r1, sp, #8
 800342c:	6800      	ldr	r0, [r0, #0]
 800342e:	f000 fae7 	bl	8003a00 <__ssvfiscanf_r>
 8003432:	b01c      	add	sp, #112	@ 0x70
 8003434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003438:	b003      	add	sp, #12
 800343a:	4770      	bx	lr
 800343c:	08003445 	.word	0x08003445
 8003440:	20000028 	.word	0x20000028

08003444 <__seofread>:
 8003444:	2000      	movs	r0, #0
 8003446:	4770      	bx	lr

08003448 <memset>:
 8003448:	4402      	add	r2, r0
 800344a:	4603      	mov	r3, r0
 800344c:	4293      	cmp	r3, r2
 800344e:	d100      	bne.n	8003452 <memset+0xa>
 8003450:	4770      	bx	lr
 8003452:	f803 1b01 	strb.w	r1, [r3], #1
 8003456:	e7f9      	b.n	800344c <memset+0x4>

08003458 <__errno>:
 8003458:	4b01      	ldr	r3, [pc, #4]	@ (8003460 <__errno+0x8>)
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000028 	.word	0x20000028

08003464 <__libc_init_array>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	4d0d      	ldr	r5, [pc, #52]	@ (800349c <__libc_init_array+0x38>)
 8003468:	4c0d      	ldr	r4, [pc, #52]	@ (80034a0 <__libc_init_array+0x3c>)
 800346a:	1b64      	subs	r4, r4, r5
 800346c:	10a4      	asrs	r4, r4, #2
 800346e:	2600      	movs	r6, #0
 8003470:	42a6      	cmp	r6, r4
 8003472:	d109      	bne.n	8003488 <__libc_init_array+0x24>
 8003474:	4d0b      	ldr	r5, [pc, #44]	@ (80034a4 <__libc_init_array+0x40>)
 8003476:	4c0c      	ldr	r4, [pc, #48]	@ (80034a8 <__libc_init_array+0x44>)
 8003478:	f001 f8e0 	bl	800463c <_init>
 800347c:	1b64      	subs	r4, r4, r5
 800347e:	10a4      	asrs	r4, r4, #2
 8003480:	2600      	movs	r6, #0
 8003482:	42a6      	cmp	r6, r4
 8003484:	d105      	bne.n	8003492 <__libc_init_array+0x2e>
 8003486:	bd70      	pop	{r4, r5, r6, pc}
 8003488:	f855 3b04 	ldr.w	r3, [r5], #4
 800348c:	4798      	blx	r3
 800348e:	3601      	adds	r6, #1
 8003490:	e7ee      	b.n	8003470 <__libc_init_array+0xc>
 8003492:	f855 3b04 	ldr.w	r3, [r5], #4
 8003496:	4798      	blx	r3
 8003498:	3601      	adds	r6, #1
 800349a:	e7f2      	b.n	8003482 <__libc_init_array+0x1e>
 800349c:	08004844 	.word	0x08004844
 80034a0:	08004844 	.word	0x08004844
 80034a4:	08004844 	.word	0x08004844
 80034a8:	08004848 	.word	0x08004848

080034ac <__retarget_lock_acquire_recursive>:
 80034ac:	4770      	bx	lr

080034ae <__retarget_lock_release_recursive>:
 80034ae:	4770      	bx	lr

080034b0 <_free_r>:
 80034b0:	b538      	push	{r3, r4, r5, lr}
 80034b2:	4605      	mov	r5, r0
 80034b4:	2900      	cmp	r1, #0
 80034b6:	d041      	beq.n	800353c <_free_r+0x8c>
 80034b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034bc:	1f0c      	subs	r4, r1, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bfb8      	it	lt
 80034c2:	18e4      	addlt	r4, r4, r3
 80034c4:	f000 f8e0 	bl	8003688 <__malloc_lock>
 80034c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003540 <_free_r+0x90>)
 80034ca:	6813      	ldr	r3, [r2, #0]
 80034cc:	b933      	cbnz	r3, 80034dc <_free_r+0x2c>
 80034ce:	6063      	str	r3, [r4, #4]
 80034d0:	6014      	str	r4, [r2, #0]
 80034d2:	4628      	mov	r0, r5
 80034d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034d8:	f000 b8dc 	b.w	8003694 <__malloc_unlock>
 80034dc:	42a3      	cmp	r3, r4
 80034de:	d908      	bls.n	80034f2 <_free_r+0x42>
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	1821      	adds	r1, r4, r0
 80034e4:	428b      	cmp	r3, r1
 80034e6:	bf01      	itttt	eq
 80034e8:	6819      	ldreq	r1, [r3, #0]
 80034ea:	685b      	ldreq	r3, [r3, #4]
 80034ec:	1809      	addeq	r1, r1, r0
 80034ee:	6021      	streq	r1, [r4, #0]
 80034f0:	e7ed      	b.n	80034ce <_free_r+0x1e>
 80034f2:	461a      	mov	r2, r3
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	b10b      	cbz	r3, 80034fc <_free_r+0x4c>
 80034f8:	42a3      	cmp	r3, r4
 80034fa:	d9fa      	bls.n	80034f2 <_free_r+0x42>
 80034fc:	6811      	ldr	r1, [r2, #0]
 80034fe:	1850      	adds	r0, r2, r1
 8003500:	42a0      	cmp	r0, r4
 8003502:	d10b      	bne.n	800351c <_free_r+0x6c>
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	4401      	add	r1, r0
 8003508:	1850      	adds	r0, r2, r1
 800350a:	4283      	cmp	r3, r0
 800350c:	6011      	str	r1, [r2, #0]
 800350e:	d1e0      	bne.n	80034d2 <_free_r+0x22>
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	6053      	str	r3, [r2, #4]
 8003516:	4408      	add	r0, r1
 8003518:	6010      	str	r0, [r2, #0]
 800351a:	e7da      	b.n	80034d2 <_free_r+0x22>
 800351c:	d902      	bls.n	8003524 <_free_r+0x74>
 800351e:	230c      	movs	r3, #12
 8003520:	602b      	str	r3, [r5, #0]
 8003522:	e7d6      	b.n	80034d2 <_free_r+0x22>
 8003524:	6820      	ldr	r0, [r4, #0]
 8003526:	1821      	adds	r1, r4, r0
 8003528:	428b      	cmp	r3, r1
 800352a:	bf04      	itt	eq
 800352c:	6819      	ldreq	r1, [r3, #0]
 800352e:	685b      	ldreq	r3, [r3, #4]
 8003530:	6063      	str	r3, [r4, #4]
 8003532:	bf04      	itt	eq
 8003534:	1809      	addeq	r1, r1, r0
 8003536:	6021      	streq	r1, [r4, #0]
 8003538:	6054      	str	r4, [r2, #4]
 800353a:	e7ca      	b.n	80034d2 <_free_r+0x22>
 800353c:	bd38      	pop	{r3, r4, r5, pc}
 800353e:	bf00      	nop
 8003540:	20000280 	.word	0x20000280

08003544 <sbrk_aligned>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	4e0f      	ldr	r6, [pc, #60]	@ (8003584 <sbrk_aligned+0x40>)
 8003548:	460c      	mov	r4, r1
 800354a:	6831      	ldr	r1, [r6, #0]
 800354c:	4605      	mov	r5, r0
 800354e:	b911      	cbnz	r1, 8003556 <sbrk_aligned+0x12>
 8003550:	f000 ff34 	bl	80043bc <_sbrk_r>
 8003554:	6030      	str	r0, [r6, #0]
 8003556:	4621      	mov	r1, r4
 8003558:	4628      	mov	r0, r5
 800355a:	f000 ff2f 	bl	80043bc <_sbrk_r>
 800355e:	1c43      	adds	r3, r0, #1
 8003560:	d103      	bne.n	800356a <sbrk_aligned+0x26>
 8003562:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003566:	4620      	mov	r0, r4
 8003568:	bd70      	pop	{r4, r5, r6, pc}
 800356a:	1cc4      	adds	r4, r0, #3
 800356c:	f024 0403 	bic.w	r4, r4, #3
 8003570:	42a0      	cmp	r0, r4
 8003572:	d0f8      	beq.n	8003566 <sbrk_aligned+0x22>
 8003574:	1a21      	subs	r1, r4, r0
 8003576:	4628      	mov	r0, r5
 8003578:	f000 ff20 	bl	80043bc <_sbrk_r>
 800357c:	3001      	adds	r0, #1
 800357e:	d1f2      	bne.n	8003566 <sbrk_aligned+0x22>
 8003580:	e7ef      	b.n	8003562 <sbrk_aligned+0x1e>
 8003582:	bf00      	nop
 8003584:	2000027c 	.word	0x2000027c

08003588 <_malloc_r>:
 8003588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800358c:	1ccd      	adds	r5, r1, #3
 800358e:	f025 0503 	bic.w	r5, r5, #3
 8003592:	3508      	adds	r5, #8
 8003594:	2d0c      	cmp	r5, #12
 8003596:	bf38      	it	cc
 8003598:	250c      	movcc	r5, #12
 800359a:	2d00      	cmp	r5, #0
 800359c:	4606      	mov	r6, r0
 800359e:	db01      	blt.n	80035a4 <_malloc_r+0x1c>
 80035a0:	42a9      	cmp	r1, r5
 80035a2:	d904      	bls.n	80035ae <_malloc_r+0x26>
 80035a4:	230c      	movs	r3, #12
 80035a6:	6033      	str	r3, [r6, #0]
 80035a8:	2000      	movs	r0, #0
 80035aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003684 <_malloc_r+0xfc>
 80035b2:	f000 f869 	bl	8003688 <__malloc_lock>
 80035b6:	f8d8 3000 	ldr.w	r3, [r8]
 80035ba:	461c      	mov	r4, r3
 80035bc:	bb44      	cbnz	r4, 8003610 <_malloc_r+0x88>
 80035be:	4629      	mov	r1, r5
 80035c0:	4630      	mov	r0, r6
 80035c2:	f7ff ffbf 	bl	8003544 <sbrk_aligned>
 80035c6:	1c43      	adds	r3, r0, #1
 80035c8:	4604      	mov	r4, r0
 80035ca:	d158      	bne.n	800367e <_malloc_r+0xf6>
 80035cc:	f8d8 4000 	ldr.w	r4, [r8]
 80035d0:	4627      	mov	r7, r4
 80035d2:	2f00      	cmp	r7, #0
 80035d4:	d143      	bne.n	800365e <_malloc_r+0xd6>
 80035d6:	2c00      	cmp	r4, #0
 80035d8:	d04b      	beq.n	8003672 <_malloc_r+0xea>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	4639      	mov	r1, r7
 80035de:	4630      	mov	r0, r6
 80035e0:	eb04 0903 	add.w	r9, r4, r3
 80035e4:	f000 feea 	bl	80043bc <_sbrk_r>
 80035e8:	4581      	cmp	r9, r0
 80035ea:	d142      	bne.n	8003672 <_malloc_r+0xea>
 80035ec:	6821      	ldr	r1, [r4, #0]
 80035ee:	1a6d      	subs	r5, r5, r1
 80035f0:	4629      	mov	r1, r5
 80035f2:	4630      	mov	r0, r6
 80035f4:	f7ff ffa6 	bl	8003544 <sbrk_aligned>
 80035f8:	3001      	adds	r0, #1
 80035fa:	d03a      	beq.n	8003672 <_malloc_r+0xea>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	442b      	add	r3, r5
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	f8d8 3000 	ldr.w	r3, [r8]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	bb62      	cbnz	r2, 8003664 <_malloc_r+0xdc>
 800360a:	f8c8 7000 	str.w	r7, [r8]
 800360e:	e00f      	b.n	8003630 <_malloc_r+0xa8>
 8003610:	6822      	ldr	r2, [r4, #0]
 8003612:	1b52      	subs	r2, r2, r5
 8003614:	d420      	bmi.n	8003658 <_malloc_r+0xd0>
 8003616:	2a0b      	cmp	r2, #11
 8003618:	d917      	bls.n	800364a <_malloc_r+0xc2>
 800361a:	1961      	adds	r1, r4, r5
 800361c:	42a3      	cmp	r3, r4
 800361e:	6025      	str	r5, [r4, #0]
 8003620:	bf18      	it	ne
 8003622:	6059      	strne	r1, [r3, #4]
 8003624:	6863      	ldr	r3, [r4, #4]
 8003626:	bf08      	it	eq
 8003628:	f8c8 1000 	streq.w	r1, [r8]
 800362c:	5162      	str	r2, [r4, r5]
 800362e:	604b      	str	r3, [r1, #4]
 8003630:	4630      	mov	r0, r6
 8003632:	f000 f82f 	bl	8003694 <__malloc_unlock>
 8003636:	f104 000b 	add.w	r0, r4, #11
 800363a:	1d23      	adds	r3, r4, #4
 800363c:	f020 0007 	bic.w	r0, r0, #7
 8003640:	1ac2      	subs	r2, r0, r3
 8003642:	bf1c      	itt	ne
 8003644:	1a1b      	subne	r3, r3, r0
 8003646:	50a3      	strne	r3, [r4, r2]
 8003648:	e7af      	b.n	80035aa <_malloc_r+0x22>
 800364a:	6862      	ldr	r2, [r4, #4]
 800364c:	42a3      	cmp	r3, r4
 800364e:	bf0c      	ite	eq
 8003650:	f8c8 2000 	streq.w	r2, [r8]
 8003654:	605a      	strne	r2, [r3, #4]
 8003656:	e7eb      	b.n	8003630 <_malloc_r+0xa8>
 8003658:	4623      	mov	r3, r4
 800365a:	6864      	ldr	r4, [r4, #4]
 800365c:	e7ae      	b.n	80035bc <_malloc_r+0x34>
 800365e:	463c      	mov	r4, r7
 8003660:	687f      	ldr	r7, [r7, #4]
 8003662:	e7b6      	b.n	80035d2 <_malloc_r+0x4a>
 8003664:	461a      	mov	r2, r3
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	42a3      	cmp	r3, r4
 800366a:	d1fb      	bne.n	8003664 <_malloc_r+0xdc>
 800366c:	2300      	movs	r3, #0
 800366e:	6053      	str	r3, [r2, #4]
 8003670:	e7de      	b.n	8003630 <_malloc_r+0xa8>
 8003672:	230c      	movs	r3, #12
 8003674:	6033      	str	r3, [r6, #0]
 8003676:	4630      	mov	r0, r6
 8003678:	f000 f80c 	bl	8003694 <__malloc_unlock>
 800367c:	e794      	b.n	80035a8 <_malloc_r+0x20>
 800367e:	6005      	str	r5, [r0, #0]
 8003680:	e7d6      	b.n	8003630 <_malloc_r+0xa8>
 8003682:	bf00      	nop
 8003684:	20000280 	.word	0x20000280

08003688 <__malloc_lock>:
 8003688:	4801      	ldr	r0, [pc, #4]	@ (8003690 <__malloc_lock+0x8>)
 800368a:	f7ff bf0f 	b.w	80034ac <__retarget_lock_acquire_recursive>
 800368e:	bf00      	nop
 8003690:	20000278 	.word	0x20000278

08003694 <__malloc_unlock>:
 8003694:	4801      	ldr	r0, [pc, #4]	@ (800369c <__malloc_unlock+0x8>)
 8003696:	f7ff bf0a 	b.w	80034ae <__retarget_lock_release_recursive>
 800369a:	bf00      	nop
 800369c:	20000278 	.word	0x20000278

080036a0 <__ssputs_r>:
 80036a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	688e      	ldr	r6, [r1, #8]
 80036a6:	461f      	mov	r7, r3
 80036a8:	42be      	cmp	r6, r7
 80036aa:	680b      	ldr	r3, [r1, #0]
 80036ac:	4682      	mov	sl, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	4690      	mov	r8, r2
 80036b2:	d82d      	bhi.n	8003710 <__ssputs_r+0x70>
 80036b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80036bc:	d026      	beq.n	800370c <__ssputs_r+0x6c>
 80036be:	6965      	ldr	r5, [r4, #20]
 80036c0:	6909      	ldr	r1, [r1, #16]
 80036c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036c6:	eba3 0901 	sub.w	r9, r3, r1
 80036ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036ce:	1c7b      	adds	r3, r7, #1
 80036d0:	444b      	add	r3, r9
 80036d2:	106d      	asrs	r5, r5, #1
 80036d4:	429d      	cmp	r5, r3
 80036d6:	bf38      	it	cc
 80036d8:	461d      	movcc	r5, r3
 80036da:	0553      	lsls	r3, r2, #21
 80036dc:	d527      	bpl.n	800372e <__ssputs_r+0x8e>
 80036de:	4629      	mov	r1, r5
 80036e0:	f7ff ff52 	bl	8003588 <_malloc_r>
 80036e4:	4606      	mov	r6, r0
 80036e6:	b360      	cbz	r0, 8003742 <__ssputs_r+0xa2>
 80036e8:	6921      	ldr	r1, [r4, #16]
 80036ea:	464a      	mov	r2, r9
 80036ec:	f000 fe76 	bl	80043dc <memcpy>
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80036f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036fa:	81a3      	strh	r3, [r4, #12]
 80036fc:	6126      	str	r6, [r4, #16]
 80036fe:	6165      	str	r5, [r4, #20]
 8003700:	444e      	add	r6, r9
 8003702:	eba5 0509 	sub.w	r5, r5, r9
 8003706:	6026      	str	r6, [r4, #0]
 8003708:	60a5      	str	r5, [r4, #8]
 800370a:	463e      	mov	r6, r7
 800370c:	42be      	cmp	r6, r7
 800370e:	d900      	bls.n	8003712 <__ssputs_r+0x72>
 8003710:	463e      	mov	r6, r7
 8003712:	6820      	ldr	r0, [r4, #0]
 8003714:	4632      	mov	r2, r6
 8003716:	4641      	mov	r1, r8
 8003718:	f000 fe35 	bl	8004386 <memmove>
 800371c:	68a3      	ldr	r3, [r4, #8]
 800371e:	1b9b      	subs	r3, r3, r6
 8003720:	60a3      	str	r3, [r4, #8]
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	4433      	add	r3, r6
 8003726:	6023      	str	r3, [r4, #0]
 8003728:	2000      	movs	r0, #0
 800372a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800372e:	462a      	mov	r2, r5
 8003730:	f000 fe62 	bl	80043f8 <_realloc_r>
 8003734:	4606      	mov	r6, r0
 8003736:	2800      	cmp	r0, #0
 8003738:	d1e0      	bne.n	80036fc <__ssputs_r+0x5c>
 800373a:	6921      	ldr	r1, [r4, #16]
 800373c:	4650      	mov	r0, sl
 800373e:	f7ff feb7 	bl	80034b0 <_free_r>
 8003742:	230c      	movs	r3, #12
 8003744:	f8ca 3000 	str.w	r3, [sl]
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003754:	e7e9      	b.n	800372a <__ssputs_r+0x8a>
	...

08003758 <_svfiprintf_r>:
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	4698      	mov	r8, r3
 800375e:	898b      	ldrh	r3, [r1, #12]
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	b09d      	sub	sp, #116	@ 0x74
 8003764:	4607      	mov	r7, r0
 8003766:	460d      	mov	r5, r1
 8003768:	4614      	mov	r4, r2
 800376a:	d510      	bpl.n	800378e <_svfiprintf_r+0x36>
 800376c:	690b      	ldr	r3, [r1, #16]
 800376e:	b973      	cbnz	r3, 800378e <_svfiprintf_r+0x36>
 8003770:	2140      	movs	r1, #64	@ 0x40
 8003772:	f7ff ff09 	bl	8003588 <_malloc_r>
 8003776:	6028      	str	r0, [r5, #0]
 8003778:	6128      	str	r0, [r5, #16]
 800377a:	b930      	cbnz	r0, 800378a <_svfiprintf_r+0x32>
 800377c:	230c      	movs	r3, #12
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003784:	b01d      	add	sp, #116	@ 0x74
 8003786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800378a:	2340      	movs	r3, #64	@ 0x40
 800378c:	616b      	str	r3, [r5, #20]
 800378e:	2300      	movs	r3, #0
 8003790:	9309      	str	r3, [sp, #36]	@ 0x24
 8003792:	2320      	movs	r3, #32
 8003794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003798:	f8cd 800c 	str.w	r8, [sp, #12]
 800379c:	2330      	movs	r3, #48	@ 0x30
 800379e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800393c <_svfiprintf_r+0x1e4>
 80037a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037a6:	f04f 0901 	mov.w	r9, #1
 80037aa:	4623      	mov	r3, r4
 80037ac:	469a      	mov	sl, r3
 80037ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037b2:	b10a      	cbz	r2, 80037b8 <_svfiprintf_r+0x60>
 80037b4:	2a25      	cmp	r2, #37	@ 0x25
 80037b6:	d1f9      	bne.n	80037ac <_svfiprintf_r+0x54>
 80037b8:	ebba 0b04 	subs.w	fp, sl, r4
 80037bc:	d00b      	beq.n	80037d6 <_svfiprintf_r+0x7e>
 80037be:	465b      	mov	r3, fp
 80037c0:	4622      	mov	r2, r4
 80037c2:	4629      	mov	r1, r5
 80037c4:	4638      	mov	r0, r7
 80037c6:	f7ff ff6b 	bl	80036a0 <__ssputs_r>
 80037ca:	3001      	adds	r0, #1
 80037cc:	f000 80a7 	beq.w	800391e <_svfiprintf_r+0x1c6>
 80037d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037d2:	445a      	add	r2, fp
 80037d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80037d6:	f89a 3000 	ldrb.w	r3, [sl]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 809f 	beq.w	800391e <_svfiprintf_r+0x1c6>
 80037e0:	2300      	movs	r3, #0
 80037e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ea:	f10a 0a01 	add.w	sl, sl, #1
 80037ee:	9304      	str	r3, [sp, #16]
 80037f0:	9307      	str	r3, [sp, #28]
 80037f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80037f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80037f8:	4654      	mov	r4, sl
 80037fa:	2205      	movs	r2, #5
 80037fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003800:	484e      	ldr	r0, [pc, #312]	@ (800393c <_svfiprintf_r+0x1e4>)
 8003802:	f7fc fcf5 	bl	80001f0 <memchr>
 8003806:	9a04      	ldr	r2, [sp, #16]
 8003808:	b9d8      	cbnz	r0, 8003842 <_svfiprintf_r+0xea>
 800380a:	06d0      	lsls	r0, r2, #27
 800380c:	bf44      	itt	mi
 800380e:	2320      	movmi	r3, #32
 8003810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003814:	0711      	lsls	r1, r2, #28
 8003816:	bf44      	itt	mi
 8003818:	232b      	movmi	r3, #43	@ 0x2b
 800381a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800381e:	f89a 3000 	ldrb.w	r3, [sl]
 8003822:	2b2a      	cmp	r3, #42	@ 0x2a
 8003824:	d015      	beq.n	8003852 <_svfiprintf_r+0xfa>
 8003826:	9a07      	ldr	r2, [sp, #28]
 8003828:	4654      	mov	r4, sl
 800382a:	2000      	movs	r0, #0
 800382c:	f04f 0c0a 	mov.w	ip, #10
 8003830:	4621      	mov	r1, r4
 8003832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003836:	3b30      	subs	r3, #48	@ 0x30
 8003838:	2b09      	cmp	r3, #9
 800383a:	d94b      	bls.n	80038d4 <_svfiprintf_r+0x17c>
 800383c:	b1b0      	cbz	r0, 800386c <_svfiprintf_r+0x114>
 800383e:	9207      	str	r2, [sp, #28]
 8003840:	e014      	b.n	800386c <_svfiprintf_r+0x114>
 8003842:	eba0 0308 	sub.w	r3, r0, r8
 8003846:	fa09 f303 	lsl.w	r3, r9, r3
 800384a:	4313      	orrs	r3, r2
 800384c:	9304      	str	r3, [sp, #16]
 800384e:	46a2      	mov	sl, r4
 8003850:	e7d2      	b.n	80037f8 <_svfiprintf_r+0xa0>
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	1d19      	adds	r1, r3, #4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	9103      	str	r1, [sp, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	bfbb      	ittet	lt
 800385e:	425b      	neglt	r3, r3
 8003860:	f042 0202 	orrlt.w	r2, r2, #2
 8003864:	9307      	strge	r3, [sp, #28]
 8003866:	9307      	strlt	r3, [sp, #28]
 8003868:	bfb8      	it	lt
 800386a:	9204      	strlt	r2, [sp, #16]
 800386c:	7823      	ldrb	r3, [r4, #0]
 800386e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003870:	d10a      	bne.n	8003888 <_svfiprintf_r+0x130>
 8003872:	7863      	ldrb	r3, [r4, #1]
 8003874:	2b2a      	cmp	r3, #42	@ 0x2a
 8003876:	d132      	bne.n	80038de <_svfiprintf_r+0x186>
 8003878:	9b03      	ldr	r3, [sp, #12]
 800387a:	1d1a      	adds	r2, r3, #4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	9203      	str	r2, [sp, #12]
 8003880:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003884:	3402      	adds	r4, #2
 8003886:	9305      	str	r3, [sp, #20]
 8003888:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800394c <_svfiprintf_r+0x1f4>
 800388c:	7821      	ldrb	r1, [r4, #0]
 800388e:	2203      	movs	r2, #3
 8003890:	4650      	mov	r0, sl
 8003892:	f7fc fcad 	bl	80001f0 <memchr>
 8003896:	b138      	cbz	r0, 80038a8 <_svfiprintf_r+0x150>
 8003898:	9b04      	ldr	r3, [sp, #16]
 800389a:	eba0 000a 	sub.w	r0, r0, sl
 800389e:	2240      	movs	r2, #64	@ 0x40
 80038a0:	4082      	lsls	r2, r0
 80038a2:	4313      	orrs	r3, r2
 80038a4:	3401      	adds	r4, #1
 80038a6:	9304      	str	r3, [sp, #16]
 80038a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ac:	4824      	ldr	r0, [pc, #144]	@ (8003940 <_svfiprintf_r+0x1e8>)
 80038ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038b2:	2206      	movs	r2, #6
 80038b4:	f7fc fc9c 	bl	80001f0 <memchr>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d036      	beq.n	800392a <_svfiprintf_r+0x1d2>
 80038bc:	4b21      	ldr	r3, [pc, #132]	@ (8003944 <_svfiprintf_r+0x1ec>)
 80038be:	bb1b      	cbnz	r3, 8003908 <_svfiprintf_r+0x1b0>
 80038c0:	9b03      	ldr	r3, [sp, #12]
 80038c2:	3307      	adds	r3, #7
 80038c4:	f023 0307 	bic.w	r3, r3, #7
 80038c8:	3308      	adds	r3, #8
 80038ca:	9303      	str	r3, [sp, #12]
 80038cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038ce:	4433      	add	r3, r6
 80038d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80038d2:	e76a      	b.n	80037aa <_svfiprintf_r+0x52>
 80038d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80038d8:	460c      	mov	r4, r1
 80038da:	2001      	movs	r0, #1
 80038dc:	e7a8      	b.n	8003830 <_svfiprintf_r+0xd8>
 80038de:	2300      	movs	r3, #0
 80038e0:	3401      	adds	r4, #1
 80038e2:	9305      	str	r3, [sp, #20]
 80038e4:	4619      	mov	r1, r3
 80038e6:	f04f 0c0a 	mov.w	ip, #10
 80038ea:	4620      	mov	r0, r4
 80038ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038f0:	3a30      	subs	r2, #48	@ 0x30
 80038f2:	2a09      	cmp	r2, #9
 80038f4:	d903      	bls.n	80038fe <_svfiprintf_r+0x1a6>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0c6      	beq.n	8003888 <_svfiprintf_r+0x130>
 80038fa:	9105      	str	r1, [sp, #20]
 80038fc:	e7c4      	b.n	8003888 <_svfiprintf_r+0x130>
 80038fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003902:	4604      	mov	r4, r0
 8003904:	2301      	movs	r3, #1
 8003906:	e7f0      	b.n	80038ea <_svfiprintf_r+0x192>
 8003908:	ab03      	add	r3, sp, #12
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	462a      	mov	r2, r5
 800390e:	4b0e      	ldr	r3, [pc, #56]	@ (8003948 <_svfiprintf_r+0x1f0>)
 8003910:	a904      	add	r1, sp, #16
 8003912:	4638      	mov	r0, r7
 8003914:	f3af 8000 	nop.w
 8003918:	1c42      	adds	r2, r0, #1
 800391a:	4606      	mov	r6, r0
 800391c:	d1d6      	bne.n	80038cc <_svfiprintf_r+0x174>
 800391e:	89ab      	ldrh	r3, [r5, #12]
 8003920:	065b      	lsls	r3, r3, #25
 8003922:	f53f af2d 	bmi.w	8003780 <_svfiprintf_r+0x28>
 8003926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003928:	e72c      	b.n	8003784 <_svfiprintf_r+0x2c>
 800392a:	ab03      	add	r3, sp, #12
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	462a      	mov	r2, r5
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <_svfiprintf_r+0x1f0>)
 8003932:	a904      	add	r1, sp, #16
 8003934:	4638      	mov	r0, r7
 8003936:	f000 fa45 	bl	8003dc4 <_printf_i>
 800393a:	e7ed      	b.n	8003918 <_svfiprintf_r+0x1c0>
 800393c:	080046ec 	.word	0x080046ec
 8003940:	080046f6 	.word	0x080046f6
 8003944:	00000000 	.word	0x00000000
 8003948:	080036a1 	.word	0x080036a1
 800394c:	080046f2 	.word	0x080046f2

08003950 <_sungetc_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	1c4b      	adds	r3, r1, #1
 8003954:	4614      	mov	r4, r2
 8003956:	d103      	bne.n	8003960 <_sungetc_r+0x10>
 8003958:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800395c:	4628      	mov	r0, r5
 800395e:	bd38      	pop	{r3, r4, r5, pc}
 8003960:	8993      	ldrh	r3, [r2, #12]
 8003962:	f023 0320 	bic.w	r3, r3, #32
 8003966:	8193      	strh	r3, [r2, #12]
 8003968:	6853      	ldr	r3, [r2, #4]
 800396a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800396c:	b2cd      	uxtb	r5, r1
 800396e:	b18a      	cbz	r2, 8003994 <_sungetc_r+0x44>
 8003970:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003972:	429a      	cmp	r2, r3
 8003974:	dd08      	ble.n	8003988 <_sungetc_r+0x38>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	1e5a      	subs	r2, r3, #1
 800397a:	6022      	str	r2, [r4, #0]
 800397c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003980:	6863      	ldr	r3, [r4, #4]
 8003982:	3301      	adds	r3, #1
 8003984:	6063      	str	r3, [r4, #4]
 8003986:	e7e9      	b.n	800395c <_sungetc_r+0xc>
 8003988:	4621      	mov	r1, r4
 800398a:	f000 fcc2 	bl	8004312 <__submore>
 800398e:	2800      	cmp	r0, #0
 8003990:	d0f1      	beq.n	8003976 <_sungetc_r+0x26>
 8003992:	e7e1      	b.n	8003958 <_sungetc_r+0x8>
 8003994:	6921      	ldr	r1, [r4, #16]
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	b141      	cbz	r1, 80039ac <_sungetc_r+0x5c>
 800399a:	4291      	cmp	r1, r2
 800399c:	d206      	bcs.n	80039ac <_sungetc_r+0x5c>
 800399e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80039a2:	42a9      	cmp	r1, r5
 80039a4:	d102      	bne.n	80039ac <_sungetc_r+0x5c>
 80039a6:	3a01      	subs	r2, #1
 80039a8:	6022      	str	r2, [r4, #0]
 80039aa:	e7ea      	b.n	8003982 <_sungetc_r+0x32>
 80039ac:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80039b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80039b6:	2303      	movs	r3, #3
 80039b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80039ba:	4623      	mov	r3, r4
 80039bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	2301      	movs	r3, #1
 80039c4:	e7de      	b.n	8003984 <_sungetc_r+0x34>

080039c6 <__ssrefill_r>:
 80039c6:	b510      	push	{r4, lr}
 80039c8:	460c      	mov	r4, r1
 80039ca:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80039cc:	b169      	cbz	r1, 80039ea <__ssrefill_r+0x24>
 80039ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039d2:	4299      	cmp	r1, r3
 80039d4:	d001      	beq.n	80039da <__ssrefill_r+0x14>
 80039d6:	f7ff fd6b 	bl	80034b0 <_free_r>
 80039da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039dc:	6063      	str	r3, [r4, #4]
 80039de:	2000      	movs	r0, #0
 80039e0:	6360      	str	r0, [r4, #52]	@ 0x34
 80039e2:	b113      	cbz	r3, 80039ea <__ssrefill_r+0x24>
 80039e4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	bd10      	pop	{r4, pc}
 80039ea:	6923      	ldr	r3, [r4, #16]
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	6063      	str	r3, [r4, #4]
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	f043 0320 	orr.w	r3, r3, #32
 80039f8:	81a3      	strh	r3, [r4, #12]
 80039fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039fe:	e7f3      	b.n	80039e8 <__ssrefill_r+0x22>

08003a00 <__ssvfiscanf_r>:
 8003a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a04:	460c      	mov	r4, r1
 8003a06:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8003a10:	49a5      	ldr	r1, [pc, #660]	@ (8003ca8 <__ssvfiscanf_r+0x2a8>)
 8003a12:	91a0      	str	r1, [sp, #640]	@ 0x280
 8003a14:	f10d 0804 	add.w	r8, sp, #4
 8003a18:	49a4      	ldr	r1, [pc, #656]	@ (8003cac <__ssvfiscanf_r+0x2ac>)
 8003a1a:	4fa5      	ldr	r7, [pc, #660]	@ (8003cb0 <__ssvfiscanf_r+0x2b0>)
 8003a1c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8003a20:	4606      	mov	r6, r0
 8003a22:	91a1      	str	r1, [sp, #644]	@ 0x284
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	7813      	ldrb	r3, [r2, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8158 	beq.w	8003cde <__ssvfiscanf_r+0x2de>
 8003a2e:	5cf9      	ldrb	r1, [r7, r3]
 8003a30:	f011 0108 	ands.w	r1, r1, #8
 8003a34:	f102 0501 	add.w	r5, r2, #1
 8003a38:	d019      	beq.n	8003a6e <__ssvfiscanf_r+0x6e>
 8003a3a:	6863      	ldr	r3, [r4, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	dd0f      	ble.n	8003a60 <__ssvfiscanf_r+0x60>
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	5cba      	ldrb	r2, [r7, r2]
 8003a46:	0712      	lsls	r2, r2, #28
 8003a48:	d401      	bmi.n	8003a4e <__ssvfiscanf_r+0x4e>
 8003a4a:	462a      	mov	r2, r5
 8003a4c:	e7eb      	b.n	8003a26 <__ssvfiscanf_r+0x26>
 8003a4e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003a50:	3201      	adds	r2, #1
 8003a52:	9245      	str	r2, [sp, #276]	@ 0x114
 8003a54:	6862      	ldr	r2, [r4, #4]
 8003a56:	3301      	adds	r3, #1
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	6062      	str	r2, [r4, #4]
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	e7ec      	b.n	8003a3a <__ssvfiscanf_r+0x3a>
 8003a60:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003a62:	4621      	mov	r1, r4
 8003a64:	4630      	mov	r0, r6
 8003a66:	4798      	blx	r3
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d0e9      	beq.n	8003a40 <__ssvfiscanf_r+0x40>
 8003a6c:	e7ed      	b.n	8003a4a <__ssvfiscanf_r+0x4a>
 8003a6e:	2b25      	cmp	r3, #37	@ 0x25
 8003a70:	d012      	beq.n	8003a98 <__ssvfiscanf_r+0x98>
 8003a72:	4699      	mov	r9, r3
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f340 8093 	ble.w	8003ba2 <__ssvfiscanf_r+0x1a2>
 8003a7c:	6822      	ldr	r2, [r4, #0]
 8003a7e:	7813      	ldrb	r3, [r2, #0]
 8003a80:	454b      	cmp	r3, r9
 8003a82:	f040 812c 	bne.w	8003cde <__ssvfiscanf_r+0x2de>
 8003a86:	6863      	ldr	r3, [r4, #4]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	6063      	str	r3, [r4, #4]
 8003a8c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8003a8e:	3201      	adds	r2, #1
 8003a90:	3301      	adds	r3, #1
 8003a92:	6022      	str	r2, [r4, #0]
 8003a94:	9345      	str	r3, [sp, #276]	@ 0x114
 8003a96:	e7d8      	b.n	8003a4a <__ssvfiscanf_r+0x4a>
 8003a98:	9141      	str	r1, [sp, #260]	@ 0x104
 8003a9a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003a9c:	7853      	ldrb	r3, [r2, #1]
 8003a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aa0:	bf02      	ittt	eq
 8003aa2:	2310      	moveq	r3, #16
 8003aa4:	1c95      	addeq	r5, r2, #2
 8003aa6:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003aa8:	220a      	movs	r2, #10
 8003aaa:	46a9      	mov	r9, r5
 8003aac:	f819 1b01 	ldrb.w	r1, [r9], #1
 8003ab0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8003ab4:	2b09      	cmp	r3, #9
 8003ab6:	d91e      	bls.n	8003af6 <__ssvfiscanf_r+0xf6>
 8003ab8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8003cb4 <__ssvfiscanf_r+0x2b4>
 8003abc:	2203      	movs	r2, #3
 8003abe:	4650      	mov	r0, sl
 8003ac0:	f7fc fb96 	bl	80001f0 <memchr>
 8003ac4:	b138      	cbz	r0, 8003ad6 <__ssvfiscanf_r+0xd6>
 8003ac6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003ac8:	eba0 000a 	sub.w	r0, r0, sl
 8003acc:	2301      	movs	r3, #1
 8003ace:	4083      	lsls	r3, r0
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	9341      	str	r3, [sp, #260]	@ 0x104
 8003ad4:	464d      	mov	r5, r9
 8003ad6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ada:	2b78      	cmp	r3, #120	@ 0x78
 8003adc:	d806      	bhi.n	8003aec <__ssvfiscanf_r+0xec>
 8003ade:	2b57      	cmp	r3, #87	@ 0x57
 8003ae0:	d810      	bhi.n	8003b04 <__ssvfiscanf_r+0x104>
 8003ae2:	2b25      	cmp	r3, #37	@ 0x25
 8003ae4:	d0c5      	beq.n	8003a72 <__ssvfiscanf_r+0x72>
 8003ae6:	d857      	bhi.n	8003b98 <__ssvfiscanf_r+0x198>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d065      	beq.n	8003bb8 <__ssvfiscanf_r+0x1b8>
 8003aec:	2303      	movs	r3, #3
 8003aee:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003af0:	230a      	movs	r3, #10
 8003af2:	9342      	str	r3, [sp, #264]	@ 0x108
 8003af4:	e078      	b.n	8003be8 <__ssvfiscanf_r+0x1e8>
 8003af6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003af8:	fb02 1103 	mla	r1, r2, r3, r1
 8003afc:	3930      	subs	r1, #48	@ 0x30
 8003afe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003b00:	464d      	mov	r5, r9
 8003b02:	e7d2      	b.n	8003aaa <__ssvfiscanf_r+0xaa>
 8003b04:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8003b08:	2a20      	cmp	r2, #32
 8003b0a:	d8ef      	bhi.n	8003aec <__ssvfiscanf_r+0xec>
 8003b0c:	a101      	add	r1, pc, #4	@ (adr r1, 8003b14 <__ssvfiscanf_r+0x114>)
 8003b0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003bc7 	.word	0x08003bc7
 8003b18:	08003aed 	.word	0x08003aed
 8003b1c:	08003aed 	.word	0x08003aed
 8003b20:	08003c21 	.word	0x08003c21
 8003b24:	08003aed 	.word	0x08003aed
 8003b28:	08003aed 	.word	0x08003aed
 8003b2c:	08003aed 	.word	0x08003aed
 8003b30:	08003aed 	.word	0x08003aed
 8003b34:	08003aed 	.word	0x08003aed
 8003b38:	08003aed 	.word	0x08003aed
 8003b3c:	08003aed 	.word	0x08003aed
 8003b40:	08003c37 	.word	0x08003c37
 8003b44:	08003c1d 	.word	0x08003c1d
 8003b48:	08003b9f 	.word	0x08003b9f
 8003b4c:	08003b9f 	.word	0x08003b9f
 8003b50:	08003b9f 	.word	0x08003b9f
 8003b54:	08003aed 	.word	0x08003aed
 8003b58:	08003bd9 	.word	0x08003bd9
 8003b5c:	08003aed 	.word	0x08003aed
 8003b60:	08003aed 	.word	0x08003aed
 8003b64:	08003aed 	.word	0x08003aed
 8003b68:	08003aed 	.word	0x08003aed
 8003b6c:	08003c47 	.word	0x08003c47
 8003b70:	08003be1 	.word	0x08003be1
 8003b74:	08003bbf 	.word	0x08003bbf
 8003b78:	08003aed 	.word	0x08003aed
 8003b7c:	08003aed 	.word	0x08003aed
 8003b80:	08003c43 	.word	0x08003c43
 8003b84:	08003aed 	.word	0x08003aed
 8003b88:	08003c1d 	.word	0x08003c1d
 8003b8c:	08003aed 	.word	0x08003aed
 8003b90:	08003aed 	.word	0x08003aed
 8003b94:	08003bc7 	.word	0x08003bc7
 8003b98:	3b45      	subs	r3, #69	@ 0x45
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d8a6      	bhi.n	8003aec <__ssvfiscanf_r+0xec>
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	e021      	b.n	8003be6 <__ssvfiscanf_r+0x1e6>
 8003ba2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	4798      	blx	r3
 8003baa:	2800      	cmp	r0, #0
 8003bac:	f43f af66 	beq.w	8003a7c <__ssvfiscanf_r+0x7c>
 8003bb0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	f040 808b 	bne.w	8003cce <__ssvfiscanf_r+0x2ce>
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bbc:	e08b      	b.n	8003cd6 <__ssvfiscanf_r+0x2d6>
 8003bbe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003bc0:	f042 0220 	orr.w	r2, r2, #32
 8003bc4:	9241      	str	r2, [sp, #260]	@ 0x104
 8003bc6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003bc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bcc:	9241      	str	r2, [sp, #260]	@ 0x104
 8003bce:	2210      	movs	r2, #16
 8003bd0:	2b6e      	cmp	r3, #110	@ 0x6e
 8003bd2:	9242      	str	r2, [sp, #264]	@ 0x108
 8003bd4:	d902      	bls.n	8003bdc <__ssvfiscanf_r+0x1dc>
 8003bd6:	e005      	b.n	8003be4 <__ssvfiscanf_r+0x1e4>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9342      	str	r3, [sp, #264]	@ 0x108
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e002      	b.n	8003be6 <__ssvfiscanf_r+0x1e6>
 8003be0:	2308      	movs	r3, #8
 8003be2:	9342      	str	r3, [sp, #264]	@ 0x108
 8003be4:	2304      	movs	r3, #4
 8003be6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003be8:	6863      	ldr	r3, [r4, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	dd39      	ble.n	8003c62 <__ssvfiscanf_r+0x262>
 8003bee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003bf0:	0659      	lsls	r1, r3, #25
 8003bf2:	d404      	bmi.n	8003bfe <__ssvfiscanf_r+0x1fe>
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	5cba      	ldrb	r2, [r7, r2]
 8003bfa:	0712      	lsls	r2, r2, #28
 8003bfc:	d438      	bmi.n	8003c70 <__ssvfiscanf_r+0x270>
 8003bfe:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	dc47      	bgt.n	8003c94 <__ssvfiscanf_r+0x294>
 8003c04:	466b      	mov	r3, sp
 8003c06:	4622      	mov	r2, r4
 8003c08:	a941      	add	r1, sp, #260	@ 0x104
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f000 f9fa 	bl	8004004 <_scanf_chars>
 8003c10:	2801      	cmp	r0, #1
 8003c12:	d064      	beq.n	8003cde <__ssvfiscanf_r+0x2de>
 8003c14:	2802      	cmp	r0, #2
 8003c16:	f47f af18 	bne.w	8003a4a <__ssvfiscanf_r+0x4a>
 8003c1a:	e7c9      	b.n	8003bb0 <__ssvfiscanf_r+0x1b0>
 8003c1c:	220a      	movs	r2, #10
 8003c1e:	e7d7      	b.n	8003bd0 <__ssvfiscanf_r+0x1d0>
 8003c20:	4629      	mov	r1, r5
 8003c22:	4640      	mov	r0, r8
 8003c24:	f000 fb3c 	bl	80042a0 <__sccl>
 8003c28:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c2e:	9341      	str	r3, [sp, #260]	@ 0x104
 8003c30:	4605      	mov	r5, r0
 8003c32:	2301      	movs	r3, #1
 8003c34:	e7d7      	b.n	8003be6 <__ssvfiscanf_r+0x1e6>
 8003c36:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c3c:	9341      	str	r3, [sp, #260]	@ 0x104
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e7d1      	b.n	8003be6 <__ssvfiscanf_r+0x1e6>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e7cf      	b.n	8003be6 <__ssvfiscanf_r+0x1e6>
 8003c46:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8003c48:	06c3      	lsls	r3, r0, #27
 8003c4a:	f53f aefe 	bmi.w	8003a4a <__ssvfiscanf_r+0x4a>
 8003c4e:	9b00      	ldr	r3, [sp, #0]
 8003c50:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003c52:	1d19      	adds	r1, r3, #4
 8003c54:	9100      	str	r1, [sp, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	07c0      	lsls	r0, r0, #31
 8003c5a:	bf4c      	ite	mi
 8003c5c:	801a      	strhmi	r2, [r3, #0]
 8003c5e:	601a      	strpl	r2, [r3, #0]
 8003c60:	e6f3      	b.n	8003a4a <__ssvfiscanf_r+0x4a>
 8003c62:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003c64:	4621      	mov	r1, r4
 8003c66:	4630      	mov	r0, r6
 8003c68:	4798      	blx	r3
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d0bf      	beq.n	8003bee <__ssvfiscanf_r+0x1ee>
 8003c6e:	e79f      	b.n	8003bb0 <__ssvfiscanf_r+0x1b0>
 8003c70:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003c72:	3201      	adds	r2, #1
 8003c74:	9245      	str	r2, [sp, #276]	@ 0x114
 8003c76:	6862      	ldr	r2, [r4, #4]
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	6062      	str	r2, [r4, #4]
 8003c7e:	dd02      	ble.n	8003c86 <__ssvfiscanf_r+0x286>
 8003c80:	3301      	adds	r3, #1
 8003c82:	6023      	str	r3, [r4, #0]
 8003c84:	e7b6      	b.n	8003bf4 <__ssvfiscanf_r+0x1f4>
 8003c86:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	4798      	blx	r3
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d0b0      	beq.n	8003bf4 <__ssvfiscanf_r+0x1f4>
 8003c92:	e78d      	b.n	8003bb0 <__ssvfiscanf_r+0x1b0>
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	dc0f      	bgt.n	8003cb8 <__ssvfiscanf_r+0x2b8>
 8003c98:	466b      	mov	r3, sp
 8003c9a:	4622      	mov	r2, r4
 8003c9c:	a941      	add	r1, sp, #260	@ 0x104
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f000 fa0a 	bl	80040b8 <_scanf_i>
 8003ca4:	e7b4      	b.n	8003c10 <__ssvfiscanf_r+0x210>
 8003ca6:	bf00      	nop
 8003ca8:	08003951 	.word	0x08003951
 8003cac:	080039c7 	.word	0x080039c7
 8003cb0:	0800473b 	.word	0x0800473b
 8003cb4:	080046f2 	.word	0x080046f2
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce4 <__ssvfiscanf_r+0x2e4>)
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f43f aec5 	beq.w	8003a4a <__ssvfiscanf_r+0x4a>
 8003cc0:	466b      	mov	r3, sp
 8003cc2:	4622      	mov	r2, r4
 8003cc4:	a941      	add	r1, sp, #260	@ 0x104
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f3af 8000 	nop.w
 8003ccc:	e7a0      	b.n	8003c10 <__ssvfiscanf_r+0x210>
 8003cce:	89a3      	ldrh	r3, [r4, #12]
 8003cd0:	065b      	lsls	r3, r3, #25
 8003cd2:	f53f af71 	bmi.w	8003bb8 <__ssvfiscanf_r+0x1b8>
 8003cd6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8003cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cde:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003ce0:	e7f9      	b.n	8003cd6 <__ssvfiscanf_r+0x2d6>
 8003ce2:	bf00      	nop
 8003ce4:	00000000 	.word	0x00000000

08003ce8 <_printf_common>:
 8003ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cec:	4616      	mov	r6, r2
 8003cee:	4698      	mov	r8, r3
 8003cf0:	688a      	ldr	r2, [r1, #8]
 8003cf2:	690b      	ldr	r3, [r1, #16]
 8003cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	bfb8      	it	lt
 8003cfc:	4613      	movlt	r3, r2
 8003cfe:	6033      	str	r3, [r6, #0]
 8003d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d04:	4607      	mov	r7, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	b10a      	cbz	r2, 8003d0e <_printf_common+0x26>
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	6033      	str	r3, [r6, #0]
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	0699      	lsls	r1, r3, #26
 8003d12:	bf42      	ittt	mi
 8003d14:	6833      	ldrmi	r3, [r6, #0]
 8003d16:	3302      	addmi	r3, #2
 8003d18:	6033      	strmi	r3, [r6, #0]
 8003d1a:	6825      	ldr	r5, [r4, #0]
 8003d1c:	f015 0506 	ands.w	r5, r5, #6
 8003d20:	d106      	bne.n	8003d30 <_printf_common+0x48>
 8003d22:	f104 0a19 	add.w	sl, r4, #25
 8003d26:	68e3      	ldr	r3, [r4, #12]
 8003d28:	6832      	ldr	r2, [r6, #0]
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	42ab      	cmp	r3, r5
 8003d2e:	dc26      	bgt.n	8003d7e <_printf_common+0x96>
 8003d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	3b00      	subs	r3, #0
 8003d38:	bf18      	it	ne
 8003d3a:	2301      	movne	r3, #1
 8003d3c:	0692      	lsls	r2, r2, #26
 8003d3e:	d42b      	bmi.n	8003d98 <_printf_common+0xb0>
 8003d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d44:	4641      	mov	r1, r8
 8003d46:	4638      	mov	r0, r7
 8003d48:	47c8      	blx	r9
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	d01e      	beq.n	8003d8c <_printf_common+0xa4>
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	6922      	ldr	r2, [r4, #16]
 8003d52:	f003 0306 	and.w	r3, r3, #6
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	bf02      	ittt	eq
 8003d5a:	68e5      	ldreq	r5, [r4, #12]
 8003d5c:	6833      	ldreq	r3, [r6, #0]
 8003d5e:	1aed      	subeq	r5, r5, r3
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	bf0c      	ite	eq
 8003d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d68:	2500      	movne	r5, #0
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	bfc4      	itt	gt
 8003d6e:	1a9b      	subgt	r3, r3, r2
 8003d70:	18ed      	addgt	r5, r5, r3
 8003d72:	2600      	movs	r6, #0
 8003d74:	341a      	adds	r4, #26
 8003d76:	42b5      	cmp	r5, r6
 8003d78:	d11a      	bne.n	8003db0 <_printf_common+0xc8>
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	e008      	b.n	8003d90 <_printf_common+0xa8>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	4652      	mov	r2, sl
 8003d82:	4641      	mov	r1, r8
 8003d84:	4638      	mov	r0, r7
 8003d86:	47c8      	blx	r9
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d103      	bne.n	8003d94 <_printf_common+0xac>
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d94:	3501      	adds	r5, #1
 8003d96:	e7c6      	b.n	8003d26 <_printf_common+0x3e>
 8003d98:	18e1      	adds	r1, r4, r3
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	2030      	movs	r0, #48	@ 0x30
 8003d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003da2:	4422      	add	r2, r4
 8003da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003dac:	3302      	adds	r3, #2
 8003dae:	e7c7      	b.n	8003d40 <_printf_common+0x58>
 8003db0:	2301      	movs	r3, #1
 8003db2:	4622      	mov	r2, r4
 8003db4:	4641      	mov	r1, r8
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c8      	blx	r9
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d0e6      	beq.n	8003d8c <_printf_common+0xa4>
 8003dbe:	3601      	adds	r6, #1
 8003dc0:	e7d9      	b.n	8003d76 <_printf_common+0x8e>
	...

08003dc4 <_printf_i>:
 8003dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc8:	7e0f      	ldrb	r7, [r1, #24]
 8003dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dcc:	2f78      	cmp	r7, #120	@ 0x78
 8003dce:	4691      	mov	r9, r2
 8003dd0:	4680      	mov	r8, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	469a      	mov	sl, r3
 8003dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dda:	d807      	bhi.n	8003dec <_printf_i+0x28>
 8003ddc:	2f62      	cmp	r7, #98	@ 0x62
 8003dde:	d80a      	bhi.n	8003df6 <_printf_i+0x32>
 8003de0:	2f00      	cmp	r7, #0
 8003de2:	f000 80d2 	beq.w	8003f8a <_printf_i+0x1c6>
 8003de6:	2f58      	cmp	r7, #88	@ 0x58
 8003de8:	f000 80b9 	beq.w	8003f5e <_printf_i+0x19a>
 8003dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003df4:	e03a      	b.n	8003e6c <_printf_i+0xa8>
 8003df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dfa:	2b15      	cmp	r3, #21
 8003dfc:	d8f6      	bhi.n	8003dec <_printf_i+0x28>
 8003dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8003e04 <_printf_i+0x40>)
 8003e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e04:	08003e5d 	.word	0x08003e5d
 8003e08:	08003e71 	.word	0x08003e71
 8003e0c:	08003ded 	.word	0x08003ded
 8003e10:	08003ded 	.word	0x08003ded
 8003e14:	08003ded 	.word	0x08003ded
 8003e18:	08003ded 	.word	0x08003ded
 8003e1c:	08003e71 	.word	0x08003e71
 8003e20:	08003ded 	.word	0x08003ded
 8003e24:	08003ded 	.word	0x08003ded
 8003e28:	08003ded 	.word	0x08003ded
 8003e2c:	08003ded 	.word	0x08003ded
 8003e30:	08003f71 	.word	0x08003f71
 8003e34:	08003e9b 	.word	0x08003e9b
 8003e38:	08003f2b 	.word	0x08003f2b
 8003e3c:	08003ded 	.word	0x08003ded
 8003e40:	08003ded 	.word	0x08003ded
 8003e44:	08003f93 	.word	0x08003f93
 8003e48:	08003ded 	.word	0x08003ded
 8003e4c:	08003e9b 	.word	0x08003e9b
 8003e50:	08003ded 	.word	0x08003ded
 8003e54:	08003ded 	.word	0x08003ded
 8003e58:	08003f33 	.word	0x08003f33
 8003e5c:	6833      	ldr	r3, [r6, #0]
 8003e5e:	1d1a      	adds	r2, r3, #4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6032      	str	r2, [r6, #0]
 8003e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e09d      	b.n	8003fac <_printf_i+0x1e8>
 8003e70:	6833      	ldr	r3, [r6, #0]
 8003e72:	6820      	ldr	r0, [r4, #0]
 8003e74:	1d19      	adds	r1, r3, #4
 8003e76:	6031      	str	r1, [r6, #0]
 8003e78:	0606      	lsls	r6, r0, #24
 8003e7a:	d501      	bpl.n	8003e80 <_printf_i+0xbc>
 8003e7c:	681d      	ldr	r5, [r3, #0]
 8003e7e:	e003      	b.n	8003e88 <_printf_i+0xc4>
 8003e80:	0645      	lsls	r5, r0, #25
 8003e82:	d5fb      	bpl.n	8003e7c <_printf_i+0xb8>
 8003e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e88:	2d00      	cmp	r5, #0
 8003e8a:	da03      	bge.n	8003e94 <_printf_i+0xd0>
 8003e8c:	232d      	movs	r3, #45	@ 0x2d
 8003e8e:	426d      	negs	r5, r5
 8003e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e94:	4859      	ldr	r0, [pc, #356]	@ (8003ffc <_printf_i+0x238>)
 8003e96:	230a      	movs	r3, #10
 8003e98:	e011      	b.n	8003ebe <_printf_i+0xfa>
 8003e9a:	6821      	ldr	r1, [r4, #0]
 8003e9c:	6833      	ldr	r3, [r6, #0]
 8003e9e:	0608      	lsls	r0, r1, #24
 8003ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ea4:	d402      	bmi.n	8003eac <_printf_i+0xe8>
 8003ea6:	0649      	lsls	r1, r1, #25
 8003ea8:	bf48      	it	mi
 8003eaa:	b2ad      	uxthmi	r5, r5
 8003eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8003eae:	4853      	ldr	r0, [pc, #332]	@ (8003ffc <_printf_i+0x238>)
 8003eb0:	6033      	str	r3, [r6, #0]
 8003eb2:	bf14      	ite	ne
 8003eb4:	230a      	movne	r3, #10
 8003eb6:	2308      	moveq	r3, #8
 8003eb8:	2100      	movs	r1, #0
 8003eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ebe:	6866      	ldr	r6, [r4, #4]
 8003ec0:	60a6      	str	r6, [r4, #8]
 8003ec2:	2e00      	cmp	r6, #0
 8003ec4:	bfa2      	ittt	ge
 8003ec6:	6821      	ldrge	r1, [r4, #0]
 8003ec8:	f021 0104 	bicge.w	r1, r1, #4
 8003ecc:	6021      	strge	r1, [r4, #0]
 8003ece:	b90d      	cbnz	r5, 8003ed4 <_printf_i+0x110>
 8003ed0:	2e00      	cmp	r6, #0
 8003ed2:	d04b      	beq.n	8003f6c <_printf_i+0x1a8>
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003eda:	fb03 5711 	mls	r7, r3, r1, r5
 8003ede:	5dc7      	ldrb	r7, [r0, r7]
 8003ee0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ee4:	462f      	mov	r7, r5
 8003ee6:	42bb      	cmp	r3, r7
 8003ee8:	460d      	mov	r5, r1
 8003eea:	d9f4      	bls.n	8003ed6 <_printf_i+0x112>
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d10b      	bne.n	8003f08 <_printf_i+0x144>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	07df      	lsls	r7, r3, #31
 8003ef4:	d508      	bpl.n	8003f08 <_printf_i+0x144>
 8003ef6:	6923      	ldr	r3, [r4, #16]
 8003ef8:	6861      	ldr	r1, [r4, #4]
 8003efa:	4299      	cmp	r1, r3
 8003efc:	bfde      	ittt	le
 8003efe:	2330      	movle	r3, #48	@ 0x30
 8003f00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f04:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003f08:	1b92      	subs	r2, r2, r6
 8003f0a:	6122      	str	r2, [r4, #16]
 8003f0c:	f8cd a000 	str.w	sl, [sp]
 8003f10:	464b      	mov	r3, r9
 8003f12:	aa03      	add	r2, sp, #12
 8003f14:	4621      	mov	r1, r4
 8003f16:	4640      	mov	r0, r8
 8003f18:	f7ff fee6 	bl	8003ce8 <_printf_common>
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	d14a      	bne.n	8003fb6 <_printf_i+0x1f2>
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f24:	b004      	add	sp, #16
 8003f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	f043 0320 	orr.w	r3, r3, #32
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	4833      	ldr	r0, [pc, #204]	@ (8004000 <_printf_i+0x23c>)
 8003f34:	2778      	movs	r7, #120	@ 0x78
 8003f36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	6831      	ldr	r1, [r6, #0]
 8003f3e:	061f      	lsls	r7, r3, #24
 8003f40:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f44:	d402      	bmi.n	8003f4c <_printf_i+0x188>
 8003f46:	065f      	lsls	r7, r3, #25
 8003f48:	bf48      	it	mi
 8003f4a:	b2ad      	uxthmi	r5, r5
 8003f4c:	6031      	str	r1, [r6, #0]
 8003f4e:	07d9      	lsls	r1, r3, #31
 8003f50:	bf44      	itt	mi
 8003f52:	f043 0320 	orrmi.w	r3, r3, #32
 8003f56:	6023      	strmi	r3, [r4, #0]
 8003f58:	b11d      	cbz	r5, 8003f62 <_printf_i+0x19e>
 8003f5a:	2310      	movs	r3, #16
 8003f5c:	e7ac      	b.n	8003eb8 <_printf_i+0xf4>
 8003f5e:	4827      	ldr	r0, [pc, #156]	@ (8003ffc <_printf_i+0x238>)
 8003f60:	e7e9      	b.n	8003f36 <_printf_i+0x172>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	f023 0320 	bic.w	r3, r3, #32
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	e7f6      	b.n	8003f5a <_printf_i+0x196>
 8003f6c:	4616      	mov	r6, r2
 8003f6e:	e7bd      	b.n	8003eec <_printf_i+0x128>
 8003f70:	6833      	ldr	r3, [r6, #0]
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	6961      	ldr	r1, [r4, #20]
 8003f76:	1d18      	adds	r0, r3, #4
 8003f78:	6030      	str	r0, [r6, #0]
 8003f7a:	062e      	lsls	r6, r5, #24
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	d501      	bpl.n	8003f84 <_printf_i+0x1c0>
 8003f80:	6019      	str	r1, [r3, #0]
 8003f82:	e002      	b.n	8003f8a <_printf_i+0x1c6>
 8003f84:	0668      	lsls	r0, r5, #25
 8003f86:	d5fb      	bpl.n	8003f80 <_printf_i+0x1bc>
 8003f88:	8019      	strh	r1, [r3, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	6123      	str	r3, [r4, #16]
 8003f8e:	4616      	mov	r6, r2
 8003f90:	e7bc      	b.n	8003f0c <_printf_i+0x148>
 8003f92:	6833      	ldr	r3, [r6, #0]
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	6032      	str	r2, [r6, #0]
 8003f98:	681e      	ldr	r6, [r3, #0]
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	f7fc f926 	bl	80001f0 <memchr>
 8003fa4:	b108      	cbz	r0, 8003faa <_printf_i+0x1e6>
 8003fa6:	1b80      	subs	r0, r0, r6
 8003fa8:	6060      	str	r0, [r4, #4]
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	6123      	str	r3, [r4, #16]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb4:	e7aa      	b.n	8003f0c <_printf_i+0x148>
 8003fb6:	6923      	ldr	r3, [r4, #16]
 8003fb8:	4632      	mov	r2, r6
 8003fba:	4649      	mov	r1, r9
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	47d0      	blx	sl
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d0ad      	beq.n	8003f20 <_printf_i+0x15c>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	079b      	lsls	r3, r3, #30
 8003fc8:	d413      	bmi.n	8003ff2 <_printf_i+0x22e>
 8003fca:	68e0      	ldr	r0, [r4, #12]
 8003fcc:	9b03      	ldr	r3, [sp, #12]
 8003fce:	4298      	cmp	r0, r3
 8003fd0:	bfb8      	it	lt
 8003fd2:	4618      	movlt	r0, r3
 8003fd4:	e7a6      	b.n	8003f24 <_printf_i+0x160>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4632      	mov	r2, r6
 8003fda:	4649      	mov	r1, r9
 8003fdc:	4640      	mov	r0, r8
 8003fde:	47d0      	blx	sl
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d09d      	beq.n	8003f20 <_printf_i+0x15c>
 8003fe4:	3501      	adds	r5, #1
 8003fe6:	68e3      	ldr	r3, [r4, #12]
 8003fe8:	9903      	ldr	r1, [sp, #12]
 8003fea:	1a5b      	subs	r3, r3, r1
 8003fec:	42ab      	cmp	r3, r5
 8003fee:	dcf2      	bgt.n	8003fd6 <_printf_i+0x212>
 8003ff0:	e7eb      	b.n	8003fca <_printf_i+0x206>
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	f104 0619 	add.w	r6, r4, #25
 8003ff8:	e7f5      	b.n	8003fe6 <_printf_i+0x222>
 8003ffa:	bf00      	nop
 8003ffc:	080046fd 	.word	0x080046fd
 8004000:	0800470e 	.word	0x0800470e

08004004 <_scanf_chars>:
 8004004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004008:	4615      	mov	r5, r2
 800400a:	688a      	ldr	r2, [r1, #8]
 800400c:	4680      	mov	r8, r0
 800400e:	460c      	mov	r4, r1
 8004010:	b932      	cbnz	r2, 8004020 <_scanf_chars+0x1c>
 8004012:	698a      	ldr	r2, [r1, #24]
 8004014:	2a00      	cmp	r2, #0
 8004016:	bf14      	ite	ne
 8004018:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800401c:	2201      	moveq	r2, #1
 800401e:	608a      	str	r2, [r1, #8]
 8004020:	6822      	ldr	r2, [r4, #0]
 8004022:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80040b4 <_scanf_chars+0xb0>
 8004026:	06d1      	lsls	r1, r2, #27
 8004028:	bf5f      	itttt	pl
 800402a:	681a      	ldrpl	r2, [r3, #0]
 800402c:	1d11      	addpl	r1, r2, #4
 800402e:	6019      	strpl	r1, [r3, #0]
 8004030:	6816      	ldrpl	r6, [r2, #0]
 8004032:	2700      	movs	r7, #0
 8004034:	69a0      	ldr	r0, [r4, #24]
 8004036:	b188      	cbz	r0, 800405c <_scanf_chars+0x58>
 8004038:	2801      	cmp	r0, #1
 800403a:	d107      	bne.n	800404c <_scanf_chars+0x48>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	6963      	ldr	r3, [r4, #20]
 8004042:	5c9b      	ldrb	r3, [r3, r2]
 8004044:	b953      	cbnz	r3, 800405c <_scanf_chars+0x58>
 8004046:	2f00      	cmp	r7, #0
 8004048:	d031      	beq.n	80040ae <_scanf_chars+0xaa>
 800404a:	e022      	b.n	8004092 <_scanf_chars+0x8e>
 800404c:	2802      	cmp	r0, #2
 800404e:	d120      	bne.n	8004092 <_scanf_chars+0x8e>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004058:	071b      	lsls	r3, r3, #28
 800405a:	d41a      	bmi.n	8004092 <_scanf_chars+0x8e>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	06da      	lsls	r2, r3, #27
 8004060:	bf5e      	ittt	pl
 8004062:	682b      	ldrpl	r3, [r5, #0]
 8004064:	781b      	ldrbpl	r3, [r3, #0]
 8004066:	f806 3b01 	strbpl.w	r3, [r6], #1
 800406a:	682a      	ldr	r2, [r5, #0]
 800406c:	686b      	ldr	r3, [r5, #4]
 800406e:	3201      	adds	r2, #1
 8004070:	602a      	str	r2, [r5, #0]
 8004072:	68a2      	ldr	r2, [r4, #8]
 8004074:	3b01      	subs	r3, #1
 8004076:	3a01      	subs	r2, #1
 8004078:	606b      	str	r3, [r5, #4]
 800407a:	3701      	adds	r7, #1
 800407c:	60a2      	str	r2, [r4, #8]
 800407e:	b142      	cbz	r2, 8004092 <_scanf_chars+0x8e>
 8004080:	2b00      	cmp	r3, #0
 8004082:	dcd7      	bgt.n	8004034 <_scanf_chars+0x30>
 8004084:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004088:	4629      	mov	r1, r5
 800408a:	4640      	mov	r0, r8
 800408c:	4798      	blx	r3
 800408e:	2800      	cmp	r0, #0
 8004090:	d0d0      	beq.n	8004034 <_scanf_chars+0x30>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	f013 0310 	ands.w	r3, r3, #16
 8004098:	d105      	bne.n	80040a6 <_scanf_chars+0xa2>
 800409a:	68e2      	ldr	r2, [r4, #12]
 800409c:	3201      	adds	r2, #1
 800409e:	60e2      	str	r2, [r4, #12]
 80040a0:	69a2      	ldr	r2, [r4, #24]
 80040a2:	b102      	cbz	r2, 80040a6 <_scanf_chars+0xa2>
 80040a4:	7033      	strb	r3, [r6, #0]
 80040a6:	6923      	ldr	r3, [r4, #16]
 80040a8:	443b      	add	r3, r7
 80040aa:	6123      	str	r3, [r4, #16]
 80040ac:	2000      	movs	r0, #0
 80040ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b2:	bf00      	nop
 80040b4:	0800473b 	.word	0x0800473b

080040b8 <_scanf_i>:
 80040b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040bc:	4698      	mov	r8, r3
 80040be:	4b74      	ldr	r3, [pc, #464]	@ (8004290 <_scanf_i+0x1d8>)
 80040c0:	460c      	mov	r4, r1
 80040c2:	4682      	mov	sl, r0
 80040c4:	4616      	mov	r6, r2
 80040c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040ca:	b087      	sub	sp, #28
 80040cc:	ab03      	add	r3, sp, #12
 80040ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80040d2:	4b70      	ldr	r3, [pc, #448]	@ (8004294 <_scanf_i+0x1dc>)
 80040d4:	69a1      	ldr	r1, [r4, #24]
 80040d6:	4a70      	ldr	r2, [pc, #448]	@ (8004298 <_scanf_i+0x1e0>)
 80040d8:	2903      	cmp	r1, #3
 80040da:	bf08      	it	eq
 80040dc:	461a      	moveq	r2, r3
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	9201      	str	r2, [sp, #4]
 80040e2:	1e5a      	subs	r2, r3, #1
 80040e4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80040e8:	bf88      	it	hi
 80040ea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80040ee:	4627      	mov	r7, r4
 80040f0:	bf82      	ittt	hi
 80040f2:	eb03 0905 	addhi.w	r9, r3, r5
 80040f6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80040fa:	60a3      	strhi	r3, [r4, #8]
 80040fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004100:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8004104:	bf98      	it	ls
 8004106:	f04f 0900 	movls.w	r9, #0
 800410a:	6023      	str	r3, [r4, #0]
 800410c:	463d      	mov	r5, r7
 800410e:	f04f 0b00 	mov.w	fp, #0
 8004112:	6831      	ldr	r1, [r6, #0]
 8004114:	ab03      	add	r3, sp, #12
 8004116:	7809      	ldrb	r1, [r1, #0]
 8004118:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800411c:	2202      	movs	r2, #2
 800411e:	f7fc f867 	bl	80001f0 <memchr>
 8004122:	b328      	cbz	r0, 8004170 <_scanf_i+0xb8>
 8004124:	f1bb 0f01 	cmp.w	fp, #1
 8004128:	d159      	bne.n	80041de <_scanf_i+0x126>
 800412a:	6862      	ldr	r2, [r4, #4]
 800412c:	b92a      	cbnz	r2, 800413a <_scanf_i+0x82>
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	2108      	movs	r1, #8
 8004132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004136:	6061      	str	r1, [r4, #4]
 8004138:	6022      	str	r2, [r4, #0]
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8004140:	6022      	str	r2, [r4, #0]
 8004142:	68a2      	ldr	r2, [r4, #8]
 8004144:	1e51      	subs	r1, r2, #1
 8004146:	60a1      	str	r1, [r4, #8]
 8004148:	b192      	cbz	r2, 8004170 <_scanf_i+0xb8>
 800414a:	6832      	ldr	r2, [r6, #0]
 800414c:	1c51      	adds	r1, r2, #1
 800414e:	6031      	str	r1, [r6, #0]
 8004150:	7812      	ldrb	r2, [r2, #0]
 8004152:	f805 2b01 	strb.w	r2, [r5], #1
 8004156:	6872      	ldr	r2, [r6, #4]
 8004158:	3a01      	subs	r2, #1
 800415a:	2a00      	cmp	r2, #0
 800415c:	6072      	str	r2, [r6, #4]
 800415e:	dc07      	bgt.n	8004170 <_scanf_i+0xb8>
 8004160:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8004164:	4631      	mov	r1, r6
 8004166:	4650      	mov	r0, sl
 8004168:	4790      	blx	r2
 800416a:	2800      	cmp	r0, #0
 800416c:	f040 8085 	bne.w	800427a <_scanf_i+0x1c2>
 8004170:	f10b 0b01 	add.w	fp, fp, #1
 8004174:	f1bb 0f03 	cmp.w	fp, #3
 8004178:	d1cb      	bne.n	8004112 <_scanf_i+0x5a>
 800417a:	6863      	ldr	r3, [r4, #4]
 800417c:	b90b      	cbnz	r3, 8004182 <_scanf_i+0xca>
 800417e:	230a      	movs	r3, #10
 8004180:	6063      	str	r3, [r4, #4]
 8004182:	6863      	ldr	r3, [r4, #4]
 8004184:	4945      	ldr	r1, [pc, #276]	@ (800429c <_scanf_i+0x1e4>)
 8004186:	6960      	ldr	r0, [r4, #20]
 8004188:	1ac9      	subs	r1, r1, r3
 800418a:	f000 f889 	bl	80042a0 <__sccl>
 800418e:	f04f 0b00 	mov.w	fp, #0
 8004192:	68a3      	ldr	r3, [r4, #8]
 8004194:	6822      	ldr	r2, [r4, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d03d      	beq.n	8004216 <_scanf_i+0x15e>
 800419a:	6831      	ldr	r1, [r6, #0]
 800419c:	6960      	ldr	r0, [r4, #20]
 800419e:	f891 c000 	ldrb.w	ip, [r1]
 80041a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d035      	beq.n	8004216 <_scanf_i+0x15e>
 80041aa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80041ae:	d124      	bne.n	80041fa <_scanf_i+0x142>
 80041b0:	0510      	lsls	r0, r2, #20
 80041b2:	d522      	bpl.n	80041fa <_scanf_i+0x142>
 80041b4:	f10b 0b01 	add.w	fp, fp, #1
 80041b8:	f1b9 0f00 	cmp.w	r9, #0
 80041bc:	d003      	beq.n	80041c6 <_scanf_i+0x10e>
 80041be:	3301      	adds	r3, #1
 80041c0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80041c4:	60a3      	str	r3, [r4, #8]
 80041c6:	6873      	ldr	r3, [r6, #4]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	6073      	str	r3, [r6, #4]
 80041ce:	dd1b      	ble.n	8004208 <_scanf_i+0x150>
 80041d0:	6833      	ldr	r3, [r6, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	6033      	str	r3, [r6, #0]
 80041d6:	68a3      	ldr	r3, [r4, #8]
 80041d8:	3b01      	subs	r3, #1
 80041da:	60a3      	str	r3, [r4, #8]
 80041dc:	e7d9      	b.n	8004192 <_scanf_i+0xda>
 80041de:	f1bb 0f02 	cmp.w	fp, #2
 80041e2:	d1ae      	bne.n	8004142 <_scanf_i+0x8a>
 80041e4:	6822      	ldr	r2, [r4, #0]
 80041e6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80041ea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80041ee:	d1bf      	bne.n	8004170 <_scanf_i+0xb8>
 80041f0:	2110      	movs	r1, #16
 80041f2:	6061      	str	r1, [r4, #4]
 80041f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f8:	e7a2      	b.n	8004140 <_scanf_i+0x88>
 80041fa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80041fe:	6022      	str	r2, [r4, #0]
 8004200:	780b      	ldrb	r3, [r1, #0]
 8004202:	f805 3b01 	strb.w	r3, [r5], #1
 8004206:	e7de      	b.n	80041c6 <_scanf_i+0x10e>
 8004208:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800420c:	4631      	mov	r1, r6
 800420e:	4650      	mov	r0, sl
 8004210:	4798      	blx	r3
 8004212:	2800      	cmp	r0, #0
 8004214:	d0df      	beq.n	80041d6 <_scanf_i+0x11e>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	05d9      	lsls	r1, r3, #23
 800421a:	d50d      	bpl.n	8004238 <_scanf_i+0x180>
 800421c:	42bd      	cmp	r5, r7
 800421e:	d909      	bls.n	8004234 <_scanf_i+0x17c>
 8004220:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004224:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004228:	4632      	mov	r2, r6
 800422a:	4650      	mov	r0, sl
 800422c:	4798      	blx	r3
 800422e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8004232:	464d      	mov	r5, r9
 8004234:	42bd      	cmp	r5, r7
 8004236:	d028      	beq.n	800428a <_scanf_i+0x1d2>
 8004238:	6822      	ldr	r2, [r4, #0]
 800423a:	f012 0210 	ands.w	r2, r2, #16
 800423e:	d113      	bne.n	8004268 <_scanf_i+0x1b0>
 8004240:	702a      	strb	r2, [r5, #0]
 8004242:	6863      	ldr	r3, [r4, #4]
 8004244:	9e01      	ldr	r6, [sp, #4]
 8004246:	4639      	mov	r1, r7
 8004248:	4650      	mov	r0, sl
 800424a:	47b0      	blx	r6
 800424c:	f8d8 3000 	ldr.w	r3, [r8]
 8004250:	6821      	ldr	r1, [r4, #0]
 8004252:	1d1a      	adds	r2, r3, #4
 8004254:	f8c8 2000 	str.w	r2, [r8]
 8004258:	f011 0f20 	tst.w	r1, #32
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	d00f      	beq.n	8004280 <_scanf_i+0x1c8>
 8004260:	6018      	str	r0, [r3, #0]
 8004262:	68e3      	ldr	r3, [r4, #12]
 8004264:	3301      	adds	r3, #1
 8004266:	60e3      	str	r3, [r4, #12]
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	1bed      	subs	r5, r5, r7
 800426c:	445d      	add	r5, fp
 800426e:	442b      	add	r3, r5
 8004270:	6123      	str	r3, [r4, #16]
 8004272:	2000      	movs	r0, #0
 8004274:	b007      	add	sp, #28
 8004276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427a:	f04f 0b00 	mov.w	fp, #0
 800427e:	e7ca      	b.n	8004216 <_scanf_i+0x15e>
 8004280:	07ca      	lsls	r2, r1, #31
 8004282:	bf4c      	ite	mi
 8004284:	8018      	strhmi	r0, [r3, #0]
 8004286:	6018      	strpl	r0, [r3, #0]
 8004288:	e7eb      	b.n	8004262 <_scanf_i+0x1aa>
 800428a:	2001      	movs	r0, #1
 800428c:	e7f2      	b.n	8004274 <_scanf_i+0x1bc>
 800428e:	bf00      	nop
 8004290:	080046c8 	.word	0x080046c8
 8004294:	08004549 	.word	0x08004549
 8004298:	08004629 	.word	0x08004629
 800429c:	0800472f 	.word	0x0800472f

080042a0 <__sccl>:
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	780b      	ldrb	r3, [r1, #0]
 80042a4:	4604      	mov	r4, r0
 80042a6:	2b5e      	cmp	r3, #94	@ 0x5e
 80042a8:	bf0b      	itete	eq
 80042aa:	784b      	ldrbeq	r3, [r1, #1]
 80042ac:	1c4a      	addne	r2, r1, #1
 80042ae:	1c8a      	addeq	r2, r1, #2
 80042b0:	2100      	movne	r1, #0
 80042b2:	bf08      	it	eq
 80042b4:	2101      	moveq	r1, #1
 80042b6:	3801      	subs	r0, #1
 80042b8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80042bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80042c0:	42a8      	cmp	r0, r5
 80042c2:	d1fb      	bne.n	80042bc <__sccl+0x1c>
 80042c4:	b90b      	cbnz	r3, 80042ca <__sccl+0x2a>
 80042c6:	1e50      	subs	r0, r2, #1
 80042c8:	bd70      	pop	{r4, r5, r6, pc}
 80042ca:	f081 0101 	eor.w	r1, r1, #1
 80042ce:	54e1      	strb	r1, [r4, r3]
 80042d0:	4610      	mov	r0, r2
 80042d2:	4602      	mov	r2, r0
 80042d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80042d8:	2d2d      	cmp	r5, #45	@ 0x2d
 80042da:	d005      	beq.n	80042e8 <__sccl+0x48>
 80042dc:	2d5d      	cmp	r5, #93	@ 0x5d
 80042de:	d016      	beq.n	800430e <__sccl+0x6e>
 80042e0:	2d00      	cmp	r5, #0
 80042e2:	d0f1      	beq.n	80042c8 <__sccl+0x28>
 80042e4:	462b      	mov	r3, r5
 80042e6:	e7f2      	b.n	80042ce <__sccl+0x2e>
 80042e8:	7846      	ldrb	r6, [r0, #1]
 80042ea:	2e5d      	cmp	r6, #93	@ 0x5d
 80042ec:	d0fa      	beq.n	80042e4 <__sccl+0x44>
 80042ee:	42b3      	cmp	r3, r6
 80042f0:	dcf8      	bgt.n	80042e4 <__sccl+0x44>
 80042f2:	3002      	adds	r0, #2
 80042f4:	461a      	mov	r2, r3
 80042f6:	3201      	adds	r2, #1
 80042f8:	4296      	cmp	r6, r2
 80042fa:	54a1      	strb	r1, [r4, r2]
 80042fc:	dcfb      	bgt.n	80042f6 <__sccl+0x56>
 80042fe:	1af2      	subs	r2, r6, r3
 8004300:	3a01      	subs	r2, #1
 8004302:	1c5d      	adds	r5, r3, #1
 8004304:	42b3      	cmp	r3, r6
 8004306:	bfa8      	it	ge
 8004308:	2200      	movge	r2, #0
 800430a:	18ab      	adds	r3, r5, r2
 800430c:	e7e1      	b.n	80042d2 <__sccl+0x32>
 800430e:	4610      	mov	r0, r2
 8004310:	e7da      	b.n	80042c8 <__sccl+0x28>

08004312 <__submore>:
 8004312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004316:	460c      	mov	r4, r1
 8004318:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800431a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800431e:	4299      	cmp	r1, r3
 8004320:	d11d      	bne.n	800435e <__submore+0x4c>
 8004322:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004326:	f7ff f92f 	bl	8003588 <_malloc_r>
 800432a:	b918      	cbnz	r0, 8004334 <__submore+0x22>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004338:	63a3      	str	r3, [r4, #56]	@ 0x38
 800433a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800433e:	6360      	str	r0, [r4, #52]	@ 0x34
 8004340:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8004344:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004348:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800434c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004350:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8004354:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8004358:	6020      	str	r0, [r4, #0]
 800435a:	2000      	movs	r0, #0
 800435c:	e7e8      	b.n	8004330 <__submore+0x1e>
 800435e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004360:	0077      	lsls	r7, r6, #1
 8004362:	463a      	mov	r2, r7
 8004364:	f000 f848 	bl	80043f8 <_realloc_r>
 8004368:	4605      	mov	r5, r0
 800436a:	2800      	cmp	r0, #0
 800436c:	d0de      	beq.n	800432c <__submore+0x1a>
 800436e:	eb00 0806 	add.w	r8, r0, r6
 8004372:	4601      	mov	r1, r0
 8004374:	4632      	mov	r2, r6
 8004376:	4640      	mov	r0, r8
 8004378:	f000 f830 	bl	80043dc <memcpy>
 800437c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8004380:	f8c4 8000 	str.w	r8, [r4]
 8004384:	e7e9      	b.n	800435a <__submore+0x48>

08004386 <memmove>:
 8004386:	4288      	cmp	r0, r1
 8004388:	b510      	push	{r4, lr}
 800438a:	eb01 0402 	add.w	r4, r1, r2
 800438e:	d902      	bls.n	8004396 <memmove+0x10>
 8004390:	4284      	cmp	r4, r0
 8004392:	4623      	mov	r3, r4
 8004394:	d807      	bhi.n	80043a6 <memmove+0x20>
 8004396:	1e43      	subs	r3, r0, #1
 8004398:	42a1      	cmp	r1, r4
 800439a:	d008      	beq.n	80043ae <memmove+0x28>
 800439c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043a4:	e7f8      	b.n	8004398 <memmove+0x12>
 80043a6:	4402      	add	r2, r0
 80043a8:	4601      	mov	r1, r0
 80043aa:	428a      	cmp	r2, r1
 80043ac:	d100      	bne.n	80043b0 <memmove+0x2a>
 80043ae:	bd10      	pop	{r4, pc}
 80043b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043b8:	e7f7      	b.n	80043aa <memmove+0x24>
	...

080043bc <_sbrk_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4d06      	ldr	r5, [pc, #24]	@ (80043d8 <_sbrk_r+0x1c>)
 80043c0:	2300      	movs	r3, #0
 80043c2:	4604      	mov	r4, r0
 80043c4:	4608      	mov	r0, r1
 80043c6:	602b      	str	r3, [r5, #0]
 80043c8:	f7fc fea6 	bl	8001118 <_sbrk>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_sbrk_r+0x1a>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_sbrk_r+0x1a>
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	20000274 	.word	0x20000274

080043dc <memcpy>:
 80043dc:	440a      	add	r2, r1
 80043de:	4291      	cmp	r1, r2
 80043e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80043e4:	d100      	bne.n	80043e8 <memcpy+0xc>
 80043e6:	4770      	bx	lr
 80043e8:	b510      	push	{r4, lr}
 80043ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043f2:	4291      	cmp	r1, r2
 80043f4:	d1f9      	bne.n	80043ea <memcpy+0xe>
 80043f6:	bd10      	pop	{r4, pc}

080043f8 <_realloc_r>:
 80043f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043fc:	4680      	mov	r8, r0
 80043fe:	4615      	mov	r5, r2
 8004400:	460c      	mov	r4, r1
 8004402:	b921      	cbnz	r1, 800440e <_realloc_r+0x16>
 8004404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004408:	4611      	mov	r1, r2
 800440a:	f7ff b8bd 	b.w	8003588 <_malloc_r>
 800440e:	b92a      	cbnz	r2, 800441c <_realloc_r+0x24>
 8004410:	f7ff f84e 	bl	80034b0 <_free_r>
 8004414:	2400      	movs	r4, #0
 8004416:	4620      	mov	r0, r4
 8004418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800441c:	f000 f906 	bl	800462c <_malloc_usable_size_r>
 8004420:	4285      	cmp	r5, r0
 8004422:	4606      	mov	r6, r0
 8004424:	d802      	bhi.n	800442c <_realloc_r+0x34>
 8004426:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800442a:	d8f4      	bhi.n	8004416 <_realloc_r+0x1e>
 800442c:	4629      	mov	r1, r5
 800442e:	4640      	mov	r0, r8
 8004430:	f7ff f8aa 	bl	8003588 <_malloc_r>
 8004434:	4607      	mov	r7, r0
 8004436:	2800      	cmp	r0, #0
 8004438:	d0ec      	beq.n	8004414 <_realloc_r+0x1c>
 800443a:	42b5      	cmp	r5, r6
 800443c:	462a      	mov	r2, r5
 800443e:	4621      	mov	r1, r4
 8004440:	bf28      	it	cs
 8004442:	4632      	movcs	r2, r6
 8004444:	f7ff ffca 	bl	80043dc <memcpy>
 8004448:	4621      	mov	r1, r4
 800444a:	4640      	mov	r0, r8
 800444c:	f7ff f830 	bl	80034b0 <_free_r>
 8004450:	463c      	mov	r4, r7
 8004452:	e7e0      	b.n	8004416 <_realloc_r+0x1e>

08004454 <_strtol_l.constprop.0>:
 8004454:	2b24      	cmp	r3, #36	@ 0x24
 8004456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800445a:	4686      	mov	lr, r0
 800445c:	4690      	mov	r8, r2
 800445e:	d801      	bhi.n	8004464 <_strtol_l.constprop.0+0x10>
 8004460:	2b01      	cmp	r3, #1
 8004462:	d106      	bne.n	8004472 <_strtol_l.constprop.0+0x1e>
 8004464:	f7fe fff8 	bl	8003458 <__errno>
 8004468:	2316      	movs	r3, #22
 800446a:	6003      	str	r3, [r0, #0]
 800446c:	2000      	movs	r0, #0
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004472:	4834      	ldr	r0, [pc, #208]	@ (8004544 <_strtol_l.constprop.0+0xf0>)
 8004474:	460d      	mov	r5, r1
 8004476:	462a      	mov	r2, r5
 8004478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800447c:	5d06      	ldrb	r6, [r0, r4]
 800447e:	f016 0608 	ands.w	r6, r6, #8
 8004482:	d1f8      	bne.n	8004476 <_strtol_l.constprop.0+0x22>
 8004484:	2c2d      	cmp	r4, #45	@ 0x2d
 8004486:	d12d      	bne.n	80044e4 <_strtol_l.constprop.0+0x90>
 8004488:	782c      	ldrb	r4, [r5, #0]
 800448a:	2601      	movs	r6, #1
 800448c:	1c95      	adds	r5, r2, #2
 800448e:	f033 0210 	bics.w	r2, r3, #16
 8004492:	d109      	bne.n	80044a8 <_strtol_l.constprop.0+0x54>
 8004494:	2c30      	cmp	r4, #48	@ 0x30
 8004496:	d12a      	bne.n	80044ee <_strtol_l.constprop.0+0x9a>
 8004498:	782a      	ldrb	r2, [r5, #0]
 800449a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800449e:	2a58      	cmp	r2, #88	@ 0x58
 80044a0:	d125      	bne.n	80044ee <_strtol_l.constprop.0+0x9a>
 80044a2:	786c      	ldrb	r4, [r5, #1]
 80044a4:	2310      	movs	r3, #16
 80044a6:	3502      	adds	r5, #2
 80044a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80044ac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80044b0:	2200      	movs	r2, #0
 80044b2:	fbbc f9f3 	udiv	r9, ip, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80044bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80044c0:	2f09      	cmp	r7, #9
 80044c2:	d81b      	bhi.n	80044fc <_strtol_l.constprop.0+0xa8>
 80044c4:	463c      	mov	r4, r7
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	dd27      	ble.n	800451a <_strtol_l.constprop.0+0xc6>
 80044ca:	1c57      	adds	r7, r2, #1
 80044cc:	d007      	beq.n	80044de <_strtol_l.constprop.0+0x8a>
 80044ce:	4581      	cmp	r9, r0
 80044d0:	d320      	bcc.n	8004514 <_strtol_l.constprop.0+0xc0>
 80044d2:	d101      	bne.n	80044d8 <_strtol_l.constprop.0+0x84>
 80044d4:	45a2      	cmp	sl, r4
 80044d6:	db1d      	blt.n	8004514 <_strtol_l.constprop.0+0xc0>
 80044d8:	fb00 4003 	mla	r0, r0, r3, r4
 80044dc:	2201      	movs	r2, #1
 80044de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044e2:	e7eb      	b.n	80044bc <_strtol_l.constprop.0+0x68>
 80044e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80044e6:	bf04      	itt	eq
 80044e8:	782c      	ldrbeq	r4, [r5, #0]
 80044ea:	1c95      	addeq	r5, r2, #2
 80044ec:	e7cf      	b.n	800448e <_strtol_l.constprop.0+0x3a>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1da      	bne.n	80044a8 <_strtol_l.constprop.0+0x54>
 80044f2:	2c30      	cmp	r4, #48	@ 0x30
 80044f4:	bf0c      	ite	eq
 80044f6:	2308      	moveq	r3, #8
 80044f8:	230a      	movne	r3, #10
 80044fa:	e7d5      	b.n	80044a8 <_strtol_l.constprop.0+0x54>
 80044fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004500:	2f19      	cmp	r7, #25
 8004502:	d801      	bhi.n	8004508 <_strtol_l.constprop.0+0xb4>
 8004504:	3c37      	subs	r4, #55	@ 0x37
 8004506:	e7de      	b.n	80044c6 <_strtol_l.constprop.0+0x72>
 8004508:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800450c:	2f19      	cmp	r7, #25
 800450e:	d804      	bhi.n	800451a <_strtol_l.constprop.0+0xc6>
 8004510:	3c57      	subs	r4, #87	@ 0x57
 8004512:	e7d8      	b.n	80044c6 <_strtol_l.constprop.0+0x72>
 8004514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004518:	e7e1      	b.n	80044de <_strtol_l.constprop.0+0x8a>
 800451a:	1c53      	adds	r3, r2, #1
 800451c:	d108      	bne.n	8004530 <_strtol_l.constprop.0+0xdc>
 800451e:	2322      	movs	r3, #34	@ 0x22
 8004520:	f8ce 3000 	str.w	r3, [lr]
 8004524:	4660      	mov	r0, ip
 8004526:	f1b8 0f00 	cmp.w	r8, #0
 800452a:	d0a0      	beq.n	800446e <_strtol_l.constprop.0+0x1a>
 800452c:	1e69      	subs	r1, r5, #1
 800452e:	e006      	b.n	800453e <_strtol_l.constprop.0+0xea>
 8004530:	b106      	cbz	r6, 8004534 <_strtol_l.constprop.0+0xe0>
 8004532:	4240      	negs	r0, r0
 8004534:	f1b8 0f00 	cmp.w	r8, #0
 8004538:	d099      	beq.n	800446e <_strtol_l.constprop.0+0x1a>
 800453a:	2a00      	cmp	r2, #0
 800453c:	d1f6      	bne.n	800452c <_strtol_l.constprop.0+0xd8>
 800453e:	f8c8 1000 	str.w	r1, [r8]
 8004542:	e794      	b.n	800446e <_strtol_l.constprop.0+0x1a>
 8004544:	0800473b 	.word	0x0800473b

08004548 <_strtol_r>:
 8004548:	f7ff bf84 	b.w	8004454 <_strtol_l.constprop.0>

0800454c <_strtoul_l.constprop.0>:
 800454c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004550:	4e34      	ldr	r6, [pc, #208]	@ (8004624 <_strtoul_l.constprop.0+0xd8>)
 8004552:	4686      	mov	lr, r0
 8004554:	460d      	mov	r5, r1
 8004556:	4628      	mov	r0, r5
 8004558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800455c:	5d37      	ldrb	r7, [r6, r4]
 800455e:	f017 0708 	ands.w	r7, r7, #8
 8004562:	d1f8      	bne.n	8004556 <_strtoul_l.constprop.0+0xa>
 8004564:	2c2d      	cmp	r4, #45	@ 0x2d
 8004566:	d12f      	bne.n	80045c8 <_strtoul_l.constprop.0+0x7c>
 8004568:	782c      	ldrb	r4, [r5, #0]
 800456a:	2701      	movs	r7, #1
 800456c:	1c85      	adds	r5, r0, #2
 800456e:	f033 0010 	bics.w	r0, r3, #16
 8004572:	d109      	bne.n	8004588 <_strtoul_l.constprop.0+0x3c>
 8004574:	2c30      	cmp	r4, #48	@ 0x30
 8004576:	d12c      	bne.n	80045d2 <_strtoul_l.constprop.0+0x86>
 8004578:	7828      	ldrb	r0, [r5, #0]
 800457a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800457e:	2858      	cmp	r0, #88	@ 0x58
 8004580:	d127      	bne.n	80045d2 <_strtoul_l.constprop.0+0x86>
 8004582:	786c      	ldrb	r4, [r5, #1]
 8004584:	2310      	movs	r3, #16
 8004586:	3502      	adds	r5, #2
 8004588:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800458c:	2600      	movs	r6, #0
 800458e:	fbb8 f8f3 	udiv	r8, r8, r3
 8004592:	fb03 f908 	mul.w	r9, r3, r8
 8004596:	ea6f 0909 	mvn.w	r9, r9
 800459a:	4630      	mov	r0, r6
 800459c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80045a0:	f1bc 0f09 	cmp.w	ip, #9
 80045a4:	d81c      	bhi.n	80045e0 <_strtoul_l.constprop.0+0x94>
 80045a6:	4664      	mov	r4, ip
 80045a8:	42a3      	cmp	r3, r4
 80045aa:	dd2a      	ble.n	8004602 <_strtoul_l.constprop.0+0xb6>
 80045ac:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80045b0:	d007      	beq.n	80045c2 <_strtoul_l.constprop.0+0x76>
 80045b2:	4580      	cmp	r8, r0
 80045b4:	d322      	bcc.n	80045fc <_strtoul_l.constprop.0+0xb0>
 80045b6:	d101      	bne.n	80045bc <_strtoul_l.constprop.0+0x70>
 80045b8:	45a1      	cmp	r9, r4
 80045ba:	db1f      	blt.n	80045fc <_strtoul_l.constprop.0+0xb0>
 80045bc:	fb00 4003 	mla	r0, r0, r3, r4
 80045c0:	2601      	movs	r6, #1
 80045c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045c6:	e7e9      	b.n	800459c <_strtoul_l.constprop.0+0x50>
 80045c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80045ca:	bf04      	itt	eq
 80045cc:	782c      	ldrbeq	r4, [r5, #0]
 80045ce:	1c85      	addeq	r5, r0, #2
 80045d0:	e7cd      	b.n	800456e <_strtoul_l.constprop.0+0x22>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1d8      	bne.n	8004588 <_strtoul_l.constprop.0+0x3c>
 80045d6:	2c30      	cmp	r4, #48	@ 0x30
 80045d8:	bf0c      	ite	eq
 80045da:	2308      	moveq	r3, #8
 80045dc:	230a      	movne	r3, #10
 80045de:	e7d3      	b.n	8004588 <_strtoul_l.constprop.0+0x3c>
 80045e0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80045e4:	f1bc 0f19 	cmp.w	ip, #25
 80045e8:	d801      	bhi.n	80045ee <_strtoul_l.constprop.0+0xa2>
 80045ea:	3c37      	subs	r4, #55	@ 0x37
 80045ec:	e7dc      	b.n	80045a8 <_strtoul_l.constprop.0+0x5c>
 80045ee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80045f2:	f1bc 0f19 	cmp.w	ip, #25
 80045f6:	d804      	bhi.n	8004602 <_strtoul_l.constprop.0+0xb6>
 80045f8:	3c57      	subs	r4, #87	@ 0x57
 80045fa:	e7d5      	b.n	80045a8 <_strtoul_l.constprop.0+0x5c>
 80045fc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8004600:	e7df      	b.n	80045c2 <_strtoul_l.constprop.0+0x76>
 8004602:	1c73      	adds	r3, r6, #1
 8004604:	d106      	bne.n	8004614 <_strtoul_l.constprop.0+0xc8>
 8004606:	2322      	movs	r3, #34	@ 0x22
 8004608:	f8ce 3000 	str.w	r3, [lr]
 800460c:	4630      	mov	r0, r6
 800460e:	b932      	cbnz	r2, 800461e <_strtoul_l.constprop.0+0xd2>
 8004610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004614:	b107      	cbz	r7, 8004618 <_strtoul_l.constprop.0+0xcc>
 8004616:	4240      	negs	r0, r0
 8004618:	2a00      	cmp	r2, #0
 800461a:	d0f9      	beq.n	8004610 <_strtoul_l.constprop.0+0xc4>
 800461c:	b106      	cbz	r6, 8004620 <_strtoul_l.constprop.0+0xd4>
 800461e:	1e69      	subs	r1, r5, #1
 8004620:	6011      	str	r1, [r2, #0]
 8004622:	e7f5      	b.n	8004610 <_strtoul_l.constprop.0+0xc4>
 8004624:	0800473b 	.word	0x0800473b

08004628 <_strtoul_r>:
 8004628:	f7ff bf90 	b.w	800454c <_strtoul_l.constprop.0>

0800462c <_malloc_usable_size_r>:
 800462c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004630:	1f18      	subs	r0, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	bfbc      	itt	lt
 8004636:	580b      	ldrlt	r3, [r1, r0]
 8004638:	18c0      	addlt	r0, r0, r3
 800463a:	4770      	bx	lr

0800463c <_init>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr

08004648 <_fini>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	bf00      	nop
 800464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464e:	bc08      	pop	{r3}
 8004650:	469e      	mov	lr, r3
 8004652:	4770      	bx	lr
