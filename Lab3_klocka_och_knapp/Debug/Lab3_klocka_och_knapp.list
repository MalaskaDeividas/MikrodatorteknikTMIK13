
Lab3_klocka_och_knapp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c84  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002e18  08002e18  00003e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e48  08002e48  00004080  2**0
                  CONTENTS
  4 .ARM          00000008  08002e48  08002e48  00003e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e50  08002e50  00004080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e50  08002e50  00003e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e54  08002e54  00003e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08002e58  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000080  08002ed8  00004080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08002ed8  00004248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ff7  00000000  00000000  000040b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ea  00000000  00000000  0000c0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a3  00000000  00000000  0000e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016210  00000000  00000000  0000e5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000895d  00000000  00000000  000247c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d12  00000000  00000000  0002d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3e32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002370  00000000  00000000  000b3e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000b61e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000080 	.word	0x20000080
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002e00 	.word	0x08002e00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000084 	.word	0x20000084
 80001d0:	08002e00 	.word	0x08002e00

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <button_mode>:
int BOUNCE_DELAY_NS = 20;
int unhandled_exti = 0;
int button_held = 0;


void button_mode(void){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

	int my_btn_pressed;

	while(1)
	{
		if(unhandled_exti)
 80004ca:	4b23      	ldr	r3, [pc, #140]	@ (8000558 <button_mode+0x94>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0fb      	beq.n	80004ca <button_mode+0x6>
		{
			//make debounce_time_start = current time
			if (debounce_time_start == 0){
 80004d2:	4b22      	ldr	r3, [pc, #136]	@ (800055c <button_mode+0x98>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d105      	bne.n	80004e6 <button_mode+0x22>
				debounce_time_start = HAL_GetTick();
 80004da:	f000 fd79 	bl	8000fd0 <HAL_GetTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <button_mode+0x98>)
 80004e4:	601a      	str	r2, [r3, #0]
			}

			//check if debounce time has passed
			if ((HAL_GetTick() - debounce_time_start) >= BOUNCE_DELAY_NS){
 80004e6:	f000 fd73 	bl	8000fd0 <HAL_GetTick>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a1b      	ldr	r2, [pc, #108]	@ (800055c <button_mode+0x98>)
 80004ee:	6812      	ldr	r2, [r2, #0]
 80004f0:	1a9b      	subs	r3, r3, r2
 80004f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000560 <button_mode+0x9c>)
 80004f4:	6812      	ldr	r2, [r2, #0]
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d329      	bcc.n	800054e <button_mode+0x8a>
				// Read the button state again after the delay
				my_btn_pressed = GPIO_PIN_RESET == HAL_GPIO_ReadPin(MY_BTN_GPIO_Port, MY_BTN_Pin);
 80004fa:	2101      	movs	r1, #1
 80004fc:	4819      	ldr	r0, [pc, #100]	@ (8000564 <button_mode+0xa0>)
 80004fe:	f001 f82d 	bl	800155c <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	bf0c      	ite	eq
 8000508:	2301      	moveq	r3, #1
 800050a:	2300      	movne	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	607b      	str	r3, [r7, #4]

				if (my_btn_pressed)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d009      	beq.n	800052a <button_mode+0x66>
				{
					//if button still pressed after debounce, count as valid press
					button_debounced_count++;
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <button_mode+0xa4>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b29a      	uxth	r2, r3
 800051e:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <button_mode+0xa4>)
 8000520:	801a      	strh	r2, [r3, #0]
					button_held = 1;
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <button_mode+0xa8>)
 8000524:	2201      	movs	r2, #1
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	e00b      	b.n	8000542 <button_mode+0x7e>


				}else if (button_held)
 800052a:	4b10      	ldr	r3, [pc, #64]	@ (800056c <button_mode+0xa8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d007      	beq.n	8000542 <button_mode+0x7e>
				{
					//button was released, show debounce count
					qs_put_big_num(button_debounced_count);
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <button_mode+0xa4>)
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 faf8 	bl	8000b2c <qs_put_big_num>
					button_held = 0;
 800053c:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <button_mode+0xa8>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]

					//display blue botton count aka button_exti_count
				}

				//reset debounce time and clear the flag
				debounce_time_start = 0;
 8000542:	4b06      	ldr	r3, [pc, #24]	@ (800055c <button_mode+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
				unhandled_exti = 0;
 8000548:	4b03      	ldr	r3, [pc, #12]	@ (8000558 <button_mode+0x94>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]

			}


            // Clear the unhandled_exti flag
            unhandled_exti = 0;
 800054e:	4b02      	ldr	r3, [pc, #8]	@ (8000558 <button_mode+0x94>)
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
		if(unhandled_exti)
 8000554:	e7b9      	b.n	80004ca <button_mode+0x6>
 8000556:	bf00      	nop
 8000558:	200000ec 	.word	0x200000ec
 800055c:	200000e8 	.word	0x200000e8
 8000560:	20000000 	.word	0x20000000
 8000564:	40020800 	.word	0x40020800
 8000568:	200000e6 	.word	0x200000e6
 800056c:	200000f0 	.word	0x200000f0

08000570 <HAL_GPIO_EXTI_Callback>:

	}

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == MY_BTN_Pin){
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d108      	bne.n	8000592 <HAL_GPIO_EXTI_Callback+0x22>
		button_exti_count++;
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x30>)
 800058a:	801a      	strh	r2, [r3, #0]
		unhandled_exti = 1;
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x34>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
	}
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200000e4 	.word	0x200000e4
 80005a4:	200000ec 	.word	0x200000ec

080005a8 <uart_print_menu>:

void uart_print_menu(string){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

	printf("Choose your density: \n");
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <uart_print_menu+0x18>)
 80005b2:	f002 f891 	bl	80026d8 <puts>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	08002e18 	.word	0x08002e18

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fc9b 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f833 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8c7 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f89b 	bl	8000710 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button_mode();
 80005da:	f7ff ff73 	bl	80004c4 <button_mode>

	  uart_print_menu();
 80005de:	f7ff ffe3 	bl	80005a8 <uart_print_menu>

	  for (int i = 0; i < 10; i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	e022      	b.n	800062e <main+0x6a>
	  {
		  uint32_t dly = 250;
 80005e8:	23fa      	movs	r3, #250	@ 0xfa
 80005ea:	603b      	str	r3, [r7, #0]
		  qs_put_big_num(i);			HAL_Delay(dly);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fa9b 	bl	8000b2c <qs_put_big_num>
 80005f6:	6838      	ldr	r0, [r7, #0]
 80005f8:	f000 fcf6 	bl	8000fe8 <HAL_Delay>
		  qs_put_digits(i, i, i, i, 0); HAL_Delay(dly);
 80005fc:	2300      	movs	r3, #0
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 fa62 	bl	8000ad0 <qs_put_digits>
 800060c:	6838      	ldr	r0, [r7, #0]
 800060e:	f000 fceb 	bl	8000fe8 <HAL_Delay>
		  qs_put_digits(i, i, i, i, 1); HAL_Delay(dly);
 8000612:	2301      	movs	r3, #1
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 fa57 	bl	8000ad0 <qs_put_digits>
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f000 fce0 	bl	8000fe8 <HAL_Delay>
	  for (int i = 0; i < 10; i++)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b09      	cmp	r3, #9
 8000632:	ddd9      	ble.n	80005e8 <main+0x24>
	  button_mode();
 8000634:	e7d1      	b.n	80005da <main+0x16>
	...

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	@ 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 f926 	bl	8002898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <SystemClock_Config+0xd0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <SystemClock_Config+0xd0>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <SystemClock_Config+0xd0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b23      	ldr	r3, [pc, #140]	@ (800070c <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000684:	4a21      	ldr	r2, [pc, #132]	@ (800070c <SystemClock_Config+0xd4>)
 8000686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ac:	2310      	movs	r3, #16
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 ff94 	bl	80015f0 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {

    Error_Handler();
 80006ce:	f000 f8ed 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f9f6 	bl	8001ae0 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fa:	f000 f8d7 	bl	80008ac <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f001 fbea 	bl	8001f20 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f8ab 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000009c 	.word	0x2000009c
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b48      	ldr	r3, [pc, #288]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a47      	ldr	r2, [pc, #284]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b45      	ldr	r3, [pc, #276]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a40      	ldr	r2, [pc, #256]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b3e      	ldr	r3, [pc, #248]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b3a      	ldr	r3, [pc, #232]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a39      	ldr	r2, [pc, #228]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b33      	ldr	r3, [pc, #204]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a32      	ldr	r2, [pc, #200]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <MX_GPIO_Init+0x13c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_DIO_Pin|SEG_CLK_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	210c      	movs	r1, #12
 80007ee:	482d      	ldr	r0, [pc, #180]	@ (80008a4 <MX_GPIO_Init+0x140>)
 80007f0:	f000 fecc 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2120      	movs	r1, #32
 80007f8:	482b      	ldr	r0, [pc, #172]	@ (80008a8 <MX_GPIO_Init+0x144>)
 80007fa:	f000 fec7 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000804:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4823      	ldr	r0, [pc, #140]	@ (80008a4 <MX_GPIO_Init+0x140>)
 8000816:	f000 fd1d 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : MY_BTN_Pin */
  GPIO_InitStruct.Pin = MY_BTN_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MY_BTN_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	481d      	ldr	r0, [pc, #116]	@ (80008a4 <MX_GPIO_Init+0x140>)
 8000830:	f000 fd10 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_DIO_Pin */
  GPIO_InitStruct.Pin = SEG_DIO_Pin;
 8000834:	2304      	movs	r3, #4
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000838:	2311      	movs	r3, #17
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEG_DIO_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4816      	ldr	r0, [pc, #88]	@ (80008a4 <MX_GPIO_Init+0x140>)
 800084c:	f000 fd02 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_CLK_Pin */
  GPIO_InitStruct.Pin = SEG_CLK_Pin;
 8000850:	2308      	movs	r3, #8
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEG_CLK_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	480f      	ldr	r0, [pc, #60]	@ (80008a4 <MX_GPIO_Init+0x140>)
 8000868:	f000 fcf4 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086c:	2320      	movs	r3, #32
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <MX_GPIO_Init+0x144>)
 8000884:	f000 fce6 	bl	8001254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2006      	movs	r0, #6
 800088e:	f000 fcaa 	bl	80011e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000892:	2006      	movs	r0, #6
 8000894:	f000 fcc3 	bl	800121e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	@ 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <TM1637_Delay>:
 *
 */
#define DELAY_NOP_COUNTER 250

void TM1637_Delay()
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
	for (int i = 0; i < DELAY_NOP_COUNTER; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	e003      	b.n	80008cc <TM1637_Delay+0x14>
	{
		__NOP();
 80008c4:	bf00      	nop
	for (int i = 0; i < DELAY_NOP_COUNTER; i++)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3301      	adds	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2bf9      	cmp	r3, #249	@ 0xf9
 80008d0:	ddf8      	ble.n	80008c4 <TM1637_Delay+0xc>
	}
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <TM1637_Strt>:


void TM1637_Strt()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);	TM1637_Delay();
 80008e4:	2201      	movs	r2, #1
 80008e6:	2104      	movs	r1, #4
 80008e8:	480a      	ldr	r0, [pc, #40]	@ (8000914 <TM1637_Strt+0x34>)
 80008ea:	f000 fe4f 	bl	800158c <HAL_GPIO_WritePin>
 80008ee:	f7ff ffe3 	bl	80008b8 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);	TM1637_Delay();
 80008f2:	2201      	movs	r2, #1
 80008f4:	2108      	movs	r1, #8
 80008f6:	4807      	ldr	r0, [pc, #28]	@ (8000914 <TM1637_Strt+0x34>)
 80008f8:	f000 fe48 	bl	800158c <HAL_GPIO_WritePin>
 80008fc:	f7ff ffdc 	bl	80008b8 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000900:	2200      	movs	r2, #0
 8000902:	2104      	movs	r1, #4
 8000904:	4803      	ldr	r0, [pc, #12]	@ (8000914 <TM1637_Strt+0x34>)
 8000906:	f000 fe41 	bl	800158c <HAL_GPIO_WritePin>
 800090a:	f7ff ffd5 	bl	80008b8 <TM1637_Delay>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40020800 	.word	0x40020800

08000918 <TM1637_Stop>:

void TM1637_Stop()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 800091c:	2200      	movs	r2, #0
 800091e:	2108      	movs	r1, #8
 8000920:	4814      	ldr	r0, [pc, #80]	@ (8000974 <TM1637_Stop+0x5c>)
 8000922:	f000 fe33 	bl	800158c <HAL_GPIO_WritePin>
 8000926:	f7ff ffc7 	bl	80008b8 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);	TM1637_Delay();
 800092a:	2201      	movs	r2, #1
 800092c:	2108      	movs	r1, #8
 800092e:	4811      	ldr	r0, [pc, #68]	@ (8000974 <TM1637_Stop+0x5c>)
 8000930:	f000 fe2c 	bl	800158c <HAL_GPIO_WritePin>
 8000934:	f7ff ffc0 	bl	80008b8 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000938:	2200      	movs	r2, #0
 800093a:	2108      	movs	r1, #8
 800093c:	480d      	ldr	r0, [pc, #52]	@ (8000974 <TM1637_Stop+0x5c>)
 800093e:	f000 fe25 	bl	800158c <HAL_GPIO_WritePin>
 8000942:	f7ff ffb9 	bl	80008b8 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000946:	2200      	movs	r2, #0
 8000948:	2104      	movs	r1, #4
 800094a:	480a      	ldr	r0, [pc, #40]	@ (8000974 <TM1637_Stop+0x5c>)
 800094c:	f000 fe1e 	bl	800158c <HAL_GPIO_WritePin>
 8000950:	f7ff ffb2 	bl	80008b8 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000954:	2201      	movs	r2, #1
 8000956:	2108      	movs	r1, #8
 8000958:	4806      	ldr	r0, [pc, #24]	@ (8000974 <TM1637_Stop+0x5c>)
 800095a:	f000 fe17 	bl	800158c <HAL_GPIO_WritePin>
 800095e:	f7ff ffab 	bl	80008b8 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000962:	2201      	movs	r2, #1
 8000964:	2104      	movs	r1, #4
 8000966:	4803      	ldr	r0, [pc, #12]	@ (8000974 <TM1637_Stop+0x5c>)
 8000968:	f000 fe10 	bl	800158c <HAL_GPIO_WritePin>
 800096c:	f7ff ffa4 	bl	80008b8 <TM1637_Delay>
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40020800 	.word	0x40020800

08000978 <TM1637_WriteByte>:

void TM1637_WriteByte(uint8_t byte)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	for (uint8_t c = 0; c < 8; c++) {
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e023      	b.n	80009d0 <TM1637_WriteByte+0x58>
		HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2108      	movs	r1, #8
 800098c:	4824      	ldr	r0, [pc, #144]	@ (8000a20 <TM1637_WriteByte+0xa8>)
 800098e:	f000 fdfd 	bl	800158c <HAL_GPIO_WritePin>
		if ( (byte & 0x01) == 0 )
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d105      	bne.n	80009a8 <TM1637_WriteByte+0x30>
		{
			HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2104      	movs	r1, #4
 80009a0:	481f      	ldr	r0, [pc, #124]	@ (8000a20 <TM1637_WriteByte+0xa8>)
 80009a2:	f000 fdf3 	bl	800158c <HAL_GPIO_WritePin>
 80009a6:	e004      	b.n	80009b2 <TM1637_WriteByte+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2104      	movs	r1, #4
 80009ac:	481c      	ldr	r0, [pc, #112]	@ (8000a20 <TM1637_WriteByte+0xa8>)
 80009ae:	f000 fded 	bl	800158c <HAL_GPIO_WritePin>
		}
		byte = byte >> 1;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	71fb      	strb	r3, [r7, #7]
		TM1637_Delay();
 80009b8:	f7ff ff7e 	bl	80008b8 <TM1637_Delay>
		HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2108      	movs	r1, #8
 80009c0:	4817      	ldr	r0, [pc, #92]	@ (8000a20 <TM1637_WriteByte+0xa8>)
 80009c2:	f000 fde3 	bl	800158c <HAL_GPIO_WritePin>
		TM1637_Delay();
 80009c6:	f7ff ff77 	bl	80008b8 <TM1637_Delay>
	for (uint8_t c = 0; c < 8; c++) {
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	3301      	adds	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b07      	cmp	r3, #7
 80009d4:	d9d8      	bls.n	8000988 <TM1637_WriteByte+0x10>
	}

	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2104      	movs	r1, #4
 80009da:	4811      	ldr	r0, [pc, #68]	@ (8000a20 <TM1637_WriteByte+0xa8>)
 80009dc:	f000 fdd6 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2108      	movs	r1, #8
 80009e4:	480e      	ldr	r0, [pc, #56]	@ (8000a20 <TM1637_WriteByte+0xa8>)
 80009e6:	f000 fdd1 	bl	800158c <HAL_GPIO_WritePin>
	TM1637_Delay();
 80009ea:	f7ff ff65 	bl	80008b8 <TM1637_Delay>
	while( HAL_GPIO_ReadPin(SEG_DIO_GPIO_Port, SEG_DIO_Pin) == GPIO_PIN_SET )
 80009ee:	bf00      	nop
 80009f0:	2104      	movs	r1, #4
 80009f2:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <TM1637_WriteByte+0xa8>)
 80009f4:	f000 fdb2 	bl	800155c <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d0f8      	beq.n	80009f0 <TM1637_WriteByte+0x78>
	{
		// Wait here until it goes low
	}
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2104      	movs	r1, #4
 8000a02:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <TM1637_WriteByte+0xa8>)
 8000a04:	f000 fdc2 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <TM1637_WriteByte+0xa8>)
 8000a0e:	f000 fdbd 	bl	800158c <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000a12:	f7ff ff51 	bl	80008b8 <TM1637_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020800 	.word	0x40020800

08000a24 <TM1637_WriteCmnd>:


void TM1637_WriteCmnd(uint8_t cmd)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	TM1637_Strt();
 8000a2e:	f7ff ff57 	bl	80008e0 <TM1637_Strt>
	TM1637_WriteByte(cmd);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff9f 	bl	8000978 <TM1637_WriteByte>
	TM1637_Stop();
 8000a3a:	f7ff ff6d 	bl	8000918 <TM1637_Stop>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <TM1637_WriteData>:

void TM1637_WriteData(uint8_t addr, uint8_t data)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	460a      	mov	r2, r1
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	4613      	mov	r3, r2
 8000a54:	71bb      	strb	r3, [r7, #6]
	TM1637_Strt();
 8000a56:	f7ff ff43 	bl	80008e0 <TM1637_Strt>
	TM1637_WriteByte(addr);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff8b 	bl	8000978 <TM1637_WriteByte>
	TM1637_WriteByte(data);
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff87 	bl	8000978 <TM1637_WriteByte>
	TM1637_Stop();
 8000a6a:	f7ff ff55 	bl	8000918 <TM1637_Stop>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <qs_put_bitmasks>:




void qs_put_bitmasks(uint8_t bm0, uint8_t bm1, uint8_t bm2, uint8_t bm3)
{
 8000a76:	b590      	push	{r4, r7, lr}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4608      	mov	r0, r1
 8000a80:	4611      	mov	r1, r2
 8000a82:	461a      	mov	r2, r3
 8000a84:	4623      	mov	r3, r4
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	4603      	mov	r3, r0
 8000a8a:	71bb      	strb	r3, [r7, #6]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	717b      	strb	r3, [r7, #5]
 8000a90:	4613      	mov	r3, r2
 8000a92:	713b      	strb	r3, [r7, #4]
	TM1637_WriteCmnd(0x44);
 8000a94:	2044      	movs	r0, #68	@ 0x44
 8000a96:	f7ff ffc5 	bl	8000a24 <TM1637_WriteCmnd>
	TM1637_WriteData(0xC0, bm0);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	20c0      	movs	r0, #192	@ 0xc0
 8000aa0:	f7ff ffd1 	bl	8000a46 <TM1637_WriteData>
	TM1637_WriteData(0xC1, bm1);
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	20c1      	movs	r0, #193	@ 0xc1
 8000aaa:	f7ff ffcc 	bl	8000a46 <TM1637_WriteData>
	TM1637_WriteData(0xC2, bm2);
 8000aae:	797b      	ldrb	r3, [r7, #5]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	20c2      	movs	r0, #194	@ 0xc2
 8000ab4:	f7ff ffc7 	bl	8000a46 <TM1637_WriteData>
	TM1637_WriteData(0xC3, bm3);
 8000ab8:	793b      	ldrb	r3, [r7, #4]
 8000aba:	4619      	mov	r1, r3
 8000abc:	20c3      	movs	r0, #195	@ 0xc3
 8000abe:	f7ff ffc2 	bl	8000a46 <TM1637_WriteData>
	TM1637_WriteCmnd(0x8A);
 8000ac2:	208a      	movs	r0, #138	@ 0x8a
 8000ac4:	f7ff ffae 	bl	8000a24 <TM1637_WriteCmnd>
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd90      	pop	{r4, r7, pc}

08000ad0 <qs_put_digits>:
	}
}


void qs_put_digits(uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t colon)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	4608      	mov	r0, r1
 8000ada:	4611      	mov	r1, r2
 8000adc:	461a      	mov	r2, r3
 8000ade:	4623      	mov	r3, r4
 8000ae0:	71fb      	strb	r3, [r7, #7]
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71bb      	strb	r3, [r7, #6]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	717b      	strb	r3, [r7, #5]
 8000aea:	4613      	mov	r3, r2
 8000aec:	713b      	strb	r3, [r7, #4]
	qs_put_bitmasks(seg_array[d0],
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <qs_put_digits+0x58>)
 8000af2:	5cd0      	ldrb	r0, [r2, r3]
					seg_array[d1] | (colon ? 0x80 : 0x00),
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	4a0c      	ldr	r2, [pc, #48]	@ (8000b28 <qs_put_digits+0x58>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	7e3a      	ldrb	r2, [r7, #24]
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	d002      	beq.n	8000b08 <qs_put_digits+0x38>
 8000b02:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8000b06:	e000      	b.n	8000b0a <qs_put_digits+0x3a>
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b25b      	sxtb	r3, r3
	qs_put_bitmasks(seg_array[d0],
 8000b0e:	b2d9      	uxtb	r1, r3
 8000b10:	797b      	ldrb	r3, [r7, #5]
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <qs_put_digits+0x58>)
 8000b14:	5cd2      	ldrb	r2, [r2, r3]
 8000b16:	793b      	ldrb	r3, [r7, #4]
 8000b18:	4c03      	ldr	r4, [pc, #12]	@ (8000b28 <qs_put_digits+0x58>)
 8000b1a:	5ce3      	ldrb	r3, [r4, r3]
 8000b1c:	f7ff ffab 	bl	8000a76 <qs_put_bitmasks>
					seg_array[d2],
					seg_array[d3]);
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	20000004 	.word	0x20000004

08000b2c <qs_put_big_num>:



void qs_put_big_num(uint16_t big_num)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
	uint8_t ones = (big_num /    1) % 10;
 8000b36:	88fa      	ldrh	r2, [r7, #6]
 8000b38:	4b2c      	ldr	r3, [pc, #176]	@ (8000bec <qs_put_big_num+0xc0>)
 8000b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b3e:	08d9      	lsrs	r1, r3, #3
 8000b40:	460b      	mov	r3, r1
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	440b      	add	r3, r1
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	733b      	strb	r3, [r7, #12]
	uint8_t tens = (big_num /   10) % 10;
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	4a26      	ldr	r2, [pc, #152]	@ (8000bec <qs_put_big_num+0xc0>)
 8000b52:	fba2 2303 	umull	r2, r3, r2, r3
 8000b56:	08db      	lsrs	r3, r3, #3
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <qs_put_big_num+0xc0>)
 8000b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b60:	08d9      	lsrs	r1, r3, #3
 8000b62:	460b      	mov	r3, r1
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	440b      	add	r3, r1
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	73fb      	strb	r3, [r7, #15]
	uint8_t huns = (big_num /  100) % 10;
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <qs_put_big_num+0xc4>)
 8000b74:	fba2 2303 	umull	r2, r3, r2, r3
 8000b78:	095b      	lsrs	r3, r3, #5
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <qs_put_big_num+0xc0>)
 8000b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b82:	08d9      	lsrs	r1, r3, #3
 8000b84:	460b      	mov	r3, r1
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	440b      	add	r3, r1
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	73bb      	strb	r3, [r7, #14]
	uint8_t thus = (big_num / 1000) % 10;
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <qs_put_big_num+0xc8>)
 8000b96:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9a:	099b      	lsrs	r3, r3, #6
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <qs_put_big_num+0xc0>)
 8000ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba4:	08d9      	lsrs	r1, r3, #3
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	440b      	add	r3, r1
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	737b      	strb	r3, [r7, #13]

	if (thus == 0)
 8000bb4:	7b7b      	ldrb	r3, [r7, #13]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10b      	bne.n	8000bd2 <qs_put_big_num+0xa6>
	{
		thus = QS_BLANK;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	737b      	strb	r3, [r7, #13]
		if (huns == 0)
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d106      	bne.n	8000bd2 <qs_put_big_num+0xa6>
		{
			huns = QS_BLANK;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	73bb      	strb	r3, [r7, #14]
			if (tens == 0)
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <qs_put_big_num+0xa6>
			{
				tens = QS_BLANK;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	qs_put_digits(thus, huns, tens, ones, 0);
 8000bd2:	7b3b      	ldrb	r3, [r7, #12]
 8000bd4:	7bfa      	ldrb	r2, [r7, #15]
 8000bd6:	7bb9      	ldrb	r1, [r7, #14]
 8000bd8:	7b78      	ldrb	r0, [r7, #13]
 8000bda:	2400      	movs	r4, #0
 8000bdc:	9400      	str	r4, [sp, #0]
 8000bde:	f7ff ff77 	bl	8000ad0 <qs_put_digits>
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	cccccccd 	.word	0xcccccccd
 8000bf0:	51eb851f 	.word	0x51eb851f
 8000bf4:	10624dd3 	.word	0x10624dd3

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	4a0f      	ldr	r2, [pc, #60]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c36:	2007      	movs	r0, #7
 8000c38:	f000 faca 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	@ 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a19      	ldr	r2, [pc, #100]	@ (8000ccc <HAL_UART_MspInit+0x84>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12b      	bne.n	8000cc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	4a17      	ldr	r2, [pc, #92]	@ (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a10      	ldr	r2, [pc, #64]	@ (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <HAL_UART_MspInit+0x8c>)
 8000cbe:	f000 fac9 	bl	8001254 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	@ 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <NMI_Handler+0x4>

08000ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <MemManage_Handler+0x4>

08000cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <UsageFault_Handler+0x4>

08000d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 f93b 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MY_BTN_Pin);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 fc40 	bl	80015c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e00a      	b.n	8000d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d56:	f3af 8000 	nop.w
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	b2ca      	uxtb	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf0      	blt.n	8000d56 <_read+0x12>
  }

  return len;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e009      	b.n	8000da4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf1      	blt.n	8000d90 <_write+0x12>
  }
  return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_close>:

int _close(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dde:	605a      	str	r2, [r3, #4]
  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f001 fd70 	bl	8002934 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20018000 	.word	0x20018000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	200000f4 	.word	0x200000f4
 8000e88:	20000248 	.word	0x20000248

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eb4:	f7ff ffea 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	@ (8000eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	@ (8000ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8000efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f001 fd2f 	bl	8002940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fb6f 	bl	80005c4 <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ee8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000ef4:	08002e58 	.word	0x08002e58
  ldr r2, =_sbss
 8000ef8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000efc:	20000248 	.word	0x20000248

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	@ (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f94f 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fe5e 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f967 	bl	800123a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f84:	f000 f92f 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000018 	.word	0x20000018
 8000fa0:	20000020 	.word	0x20000020
 8000fa4:	2000001c 	.word	0x2000001c

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000020 	.word	0x20000020
 8000fcc:	200000f8 	.word	0x200000f8

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200000f8 	.word	0x200000f8

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000020 	.word	0x20000020

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	@ (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	@ (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	@ 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff3e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff31 	bl	8001094 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e159      	b.n	8001524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 8148 	bne.w	800151e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d005      	beq.n	80012a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d130      	bne.n	8001308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 0201 	and.w	r2, r3, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b03      	cmp	r3, #3
 8001312:	d017      	beq.n	8001344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d123      	bne.n	8001398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80a2 	beq.w	800151e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b57      	ldr	r3, [pc, #348]	@ (800153c <HAL_GPIO_Init+0x2e8>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	4a56      	ldr	r2, [pc, #344]	@ (800153c <HAL_GPIO_Init+0x2e8>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ea:	4b54      	ldr	r3, [pc, #336]	@ (800153c <HAL_GPIO_Init+0x2e8>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f6:	4a52      	ldr	r2, [pc, #328]	@ (8001540 <HAL_GPIO_Init+0x2ec>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a49      	ldr	r2, [pc, #292]	@ (8001544 <HAL_GPIO_Init+0x2f0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d019      	beq.n	8001456 <HAL_GPIO_Init+0x202>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a48      	ldr	r2, [pc, #288]	@ (8001548 <HAL_GPIO_Init+0x2f4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0x1fe>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a47      	ldr	r2, [pc, #284]	@ (800154c <HAL_GPIO_Init+0x2f8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x1fa>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a46      	ldr	r2, [pc, #280]	@ (8001550 <HAL_GPIO_Init+0x2fc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x1f6>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a45      	ldr	r2, [pc, #276]	@ (8001554 <HAL_GPIO_Init+0x300>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x1f2>
 8001442:	2304      	movs	r3, #4
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x204>
 8001446:	2307      	movs	r3, #7
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x204>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x204>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x204>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x204>
 8001456:	2300      	movs	r3, #0
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001468:	4935      	ldr	r1, [pc, #212]	@ (8001540 <HAL_GPIO_Init+0x2ec>)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001476:	4b38      	ldr	r3, [pc, #224]	@ (8001558 <HAL_GPIO_Init+0x304>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149a:	4a2f      	ldr	r2, [pc, #188]	@ (8001558 <HAL_GPIO_Init+0x304>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001558 <HAL_GPIO_Init+0x304>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c4:	4a24      	ldr	r2, [pc, #144]	@ (8001558 <HAL_GPIO_Init+0x304>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ca:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <HAL_GPIO_Init+0x304>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <HAL_GPIO_Init+0x304>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <HAL_GPIO_Init+0x304>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001518:	4a0f      	ldr	r2, [pc, #60]	@ (8001558 <HAL_GPIO_Init+0x304>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3301      	adds	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b0f      	cmp	r3, #15
 8001528:	f67f aea2 	bls.w	8001270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3724      	adds	r7, #36	@ 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40013800 	.word	0x40013800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40013c00 	.word	0x40013c00

0800155c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffc6 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40013c00 	.word	0x40013c00

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e267      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d075      	beq.n	80016fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800160e:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b04      	cmp	r3, #4
 8001618:	d00c      	beq.n	8001634 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161a:	4b85      	ldr	r3, [pc, #532]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001622:	2b08      	cmp	r3, #8
 8001624:	d112      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001626:	4b82      	ldr	r3, [pc, #520]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001632:	d10b      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	4b7e      	ldr	r3, [pc, #504]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d05b      	beq.n	80016f8 <HAL_RCC_OscConfig+0x108>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d157      	bne.n	80016f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e242      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x74>
 8001656:	4b76      	ldr	r3, [pc, #472]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a75      	ldr	r2, [pc, #468]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x98>
 800166e:	4b70      	ldr	r3, [pc, #448]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6f      	ldr	r2, [pc, #444]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b6d      	ldr	r3, [pc, #436]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6c      	ldr	r2, [pc, #432]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001688:	4b69      	ldr	r3, [pc, #420]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a68      	ldr	r2, [pc, #416]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b66      	ldr	r3, [pc, #408]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a65      	ldr	r2, [pc, #404]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fc92 	bl	8000fd0 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fc8e 	bl	8000fd0 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	@ 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e207      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xc0>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc7e 	bl	8000fd0 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fc7a 	bl	8000fd0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	@ 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1f3      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	4b51      	ldr	r3, [pc, #324]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0xe8>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d063      	beq.n	80017ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001706:	4b4a      	ldr	r3, [pc, #296]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001712:	4b47      	ldr	r3, [pc, #284]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800171a:	2b08      	cmp	r3, #8
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171e:	4b44      	ldr	r3, [pc, #272]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	4b41      	ldr	r3, [pc, #260]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x152>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e1c7      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b3b      	ldr	r3, [pc, #236]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4937      	ldr	r1, [pc, #220]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	e03a      	b.n	80017ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001760:	4b34      	ldr	r3, [pc, #208]	@ (8001834 <HAL_RCC_OscConfig+0x244>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff fc33 	bl	8000fd0 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fc2f 	bl	8000fd0 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1a8      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4925      	ldr	r1, [pc, #148]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a2:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <HAL_RCC_OscConfig+0x244>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fc12 	bl	8000fd0 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fc0e 	bl	8000fd0 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e187      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d036      	beq.n	8001848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d016      	beq.n	8001810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_RCC_OscConfig+0x248>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fbf2 	bl	8000fd0 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fbee 	bl	8000fd0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e167      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x200>
 800180e:	e01b      	b.n	8001848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <HAL_RCC_OscConfig+0x248>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff fbdb 	bl	8000fd0 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	e00e      	b.n	800183c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff fbd7 	bl	8000fd0 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d907      	bls.n	800183c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e150      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
 8001830:	40023800 	.word	0x40023800
 8001834:	42470000 	.word	0x42470000
 8001838:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b88      	ldr	r3, [pc, #544]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800183e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1ea      	bne.n	800181e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8097 	beq.w	8001984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b81      	ldr	r3, [pc, #516]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	4a7c      	ldr	r2, [pc, #496]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	@ 0x40
 8001876:	4b7a      	ldr	r3, [pc, #488]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b77      	ldr	r3, [pc, #476]	@ (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4b74      	ldr	r3, [pc, #464]	@ (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a73      	ldr	r2, [pc, #460]	@ (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff fb97 	bl	8000fd0 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff fb93 	bl	8000fd0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e10c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a64 <HAL_RCC_OscConfig+0x474>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x2ea>
 80018cc:	4b64      	ldr	r3, [pc, #400]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d0:	4a63      	ldr	r2, [pc, #396]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x324>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x30c>
 80018e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0x324>
 80018fc:	4b58      	ldr	r3, [pc, #352]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001900:	4a57      	ldr	r2, [pc, #348]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	@ 0x70
 8001908:	4b55      	ldr	r3, [pc, #340]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190c:	4a54      	ldr	r2, [pc, #336]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d015      	beq.n	8001948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fb58 	bl	8000fd0 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff fb54 	bl	8000fd0 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0cb      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193a:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0ee      	beq.n	8001924 <HAL_RCC_OscConfig+0x334>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff fb42 	bl	8000fd0 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff fb3e 	bl	8000fd0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0b5      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001966:	4b3e      	ldr	r3, [pc, #248]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ee      	bne.n	8001950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001978:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	4a38      	ldr	r2, [pc, #224]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800197e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001982:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a1 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198e:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b08      	cmp	r3, #8
 8001998:	d05c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d141      	bne.n	8001a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <HAL_RCC_OscConfig+0x478>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb12 	bl	8000fd0 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fb0e 	bl	8000fd0 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e087      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	4b27      	ldr	r3, [pc, #156]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019dc:	019b      	lsls	r3, r3, #6
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	3b01      	subs	r3, #1
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	491b      	ldr	r1, [pc, #108]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <HAL_RCC_OscConfig+0x478>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fae7 	bl	8000fd0 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff fae3 	bl	8000fd0 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e05c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x416>
 8001a24:	e054      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <HAL_RCC_OscConfig+0x478>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fad0 	bl	8000fd0 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff facc 	bl	8000fd0 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e045      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x444>
 8001a52:	e03d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e038      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000
 8001a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_RCC_OscConfig+0x4ec>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d028      	beq.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d121      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d11a      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d111      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0cc      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b68      	ldr	r3, [pc, #416]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d90c      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b65      	ldr	r3, [pc, #404]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a58      	ldr	r2, [pc, #352]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a52      	ldr	r2, [pc, #328]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d044      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d119      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e067      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4934      	ldr	r1, [pc, #208]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff f9fe 	bl	8000fd0 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff f9fa 	bl	8000fd0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d20c      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f821 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490a      	ldr	r1, [pc, #40]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f95e 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08002e30 	.word	0x08002e30
 8001ca4:	20000018 	.word	0x20000018
 8001ca8:	2000001c 	.word	0x2000001c

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb0:	b094      	sub	sp, #80	@ 0x50
 8001cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc4:	4b79      	ldr	r3, [pc, #484]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d00d      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x40>
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	f200 80e1 	bhi.w	8001e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cde:	e0db      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4b73      	ldr	r3, [pc, #460]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce4:	e0db      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce6:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cea:	e0d8      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cec:	4b6f      	ldr	r3, [pc, #444]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d063      	beq.n	8001dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d02:	4b6a      	ldr	r3, [pc, #424]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	099b      	lsrs	r3, r3, #6
 8001d08:	2200      	movs	r2, #0
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d16:	2300      	movs	r3, #0
 8001d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d1e:	4622      	mov	r2, r4
 8001d20:	462b      	mov	r3, r5
 8001d22:	f04f 0000 	mov.w	r0, #0
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	0159      	lsls	r1, r3, #5
 8001d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d30:	0150      	lsls	r0, r2, #5
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4621      	mov	r1, r4
 8001d38:	1a51      	subs	r1, r2, r1
 8001d3a:	6139      	str	r1, [r7, #16]
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d50:	4659      	mov	r1, fp
 8001d52:	018b      	lsls	r3, r1, #6
 8001d54:	4651      	mov	r1, sl
 8001d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5a:	4651      	mov	r1, sl
 8001d5c:	018a      	lsls	r2, r1, #6
 8001d5e:	4651      	mov	r1, sl
 8001d60:	ebb2 0801 	subs.w	r8, r2, r1
 8001d64:	4659      	mov	r1, fp
 8001d66:	eb63 0901 	sbc.w	r9, r3, r1
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d7e:	4690      	mov	r8, r2
 8001d80:	4699      	mov	r9, r3
 8001d82:	4623      	mov	r3, r4
 8001d84:	eb18 0303 	adds.w	r3, r8, r3
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	eb49 0303 	adc.w	r3, r9, r3
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	024b      	lsls	r3, r1, #9
 8001da2:	4621      	mov	r1, r4
 8001da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da8:	4621      	mov	r1, r4
 8001daa:	024a      	lsls	r2, r1, #9
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001db2:	2200      	movs	r2, #0
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dbc:	f7fe fa0a 	bl	80001d4 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dc8:	e058      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dca:	4b38      	ldr	r3, [pc, #224]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	099b      	lsrs	r3, r3, #6
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de4:	4642      	mov	r2, r8
 8001de6:	464b      	mov	r3, r9
 8001de8:	f04f 0000 	mov.w	r0, #0
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	0159      	lsls	r1, r3, #5
 8001df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df6:	0150      	lsls	r0, r2, #5
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4641      	mov	r1, r8
 8001dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e02:	4649      	mov	r1, r9
 8001e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e20:	eb63 050b 	sbc.w	r5, r3, fp
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	00eb      	lsls	r3, r5, #3
 8001e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e32:	00e2      	lsls	r2, r4, #3
 8001e34:	4614      	mov	r4, r2
 8001e36:	461d      	mov	r5, r3
 8001e38:	4643      	mov	r3, r8
 8001e3a:	18e3      	adds	r3, r4, r3
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	464b      	mov	r3, r9
 8001e40:	eb45 0303 	adc.w	r3, r5, r3
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e52:	4629      	mov	r1, r5
 8001e54:	028b      	lsls	r3, r1, #10
 8001e56:	4621      	mov	r1, r4
 8001e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	028a      	lsls	r2, r1, #10
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e66:	2200      	movs	r2, #0
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	61fa      	str	r2, [r7, #28]
 8001e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e70:	f7fe f9b0 	bl	80001d4 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	3301      	adds	r3, #1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e96:	e002      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3750      	adds	r7, #80	@ 0x50
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	00f42400 	.word	0x00f42400
 8001eb4:	007a1200 	.word	0x007a1200

08001eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000018 	.word	0x20000018

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed4:	f7ff fff0 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0a9b      	lsrs	r3, r3, #10
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4903      	ldr	r1, [pc, #12]	@ (8001ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	08002e40 	.word	0x08002e40

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001efc:	f7ff ffdc 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0b5b      	lsrs	r3, r3, #13
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4903      	ldr	r1, [pc, #12]	@ (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	08002e40 	.word	0x08002e40

08001f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e042      	b.n	8001fb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fe7e 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	@ 0x24
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f82b 	bl	8001fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc4:	b0c0      	sub	sp, #256	@ 0x100
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fdc:	68d9      	ldr	r1, [r3, #12]
 8001fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	ea40 0301 	orr.w	r3, r0, r1
 8001fe8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002018:	f021 010c 	bic.w	r1, r1, #12
 800201c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002026:	430b      	orrs	r3, r1
 8002028:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800202a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800203a:	6999      	ldr	r1, [r3, #24]
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	ea40 0301 	orr.w	r3, r0, r1
 8002046:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4b8f      	ldr	r3, [pc, #572]	@ (800228c <UART_SetConfig+0x2cc>)
 8002050:	429a      	cmp	r2, r3
 8002052:	d005      	beq.n	8002060 <UART_SetConfig+0xa0>
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b8d      	ldr	r3, [pc, #564]	@ (8002290 <UART_SetConfig+0x2d0>)
 800205c:	429a      	cmp	r2, r3
 800205e:	d104      	bne.n	800206a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002060:	f7ff ff4a 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 8002064:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002068:	e003      	b.n	8002072 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800206a:	f7ff ff31 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 800206e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800207c:	f040 810c 	bne.w	8002298 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002084:	2200      	movs	r2, #0
 8002086:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800208a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800208e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002092:	4622      	mov	r2, r4
 8002094:	462b      	mov	r3, r5
 8002096:	1891      	adds	r1, r2, r2
 8002098:	65b9      	str	r1, [r7, #88]	@ 0x58
 800209a:	415b      	adcs	r3, r3
 800209c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800209e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020a2:	4621      	mov	r1, r4
 80020a4:	eb12 0801 	adds.w	r8, r2, r1
 80020a8:	4629      	mov	r1, r5
 80020aa:	eb43 0901 	adc.w	r9, r3, r1
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c2:	4690      	mov	r8, r2
 80020c4:	4699      	mov	r9, r3
 80020c6:	4623      	mov	r3, r4
 80020c8:	eb18 0303 	adds.w	r3, r8, r3
 80020cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020d0:	462b      	mov	r3, r5
 80020d2:	eb49 0303 	adc.w	r3, r9, r3
 80020d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020ee:	460b      	mov	r3, r1
 80020f0:	18db      	adds	r3, r3, r3
 80020f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80020f4:	4613      	mov	r3, r2
 80020f6:	eb42 0303 	adc.w	r3, r2, r3
 80020fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80020fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002100:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002104:	f7fe f866 	bl	80001d4 <__aeabi_uldivmod>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4b61      	ldr	r3, [pc, #388]	@ (8002294 <UART_SetConfig+0x2d4>)
 800210e:	fba3 2302 	umull	r2, r3, r3, r2
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	011c      	lsls	r4, r3, #4
 8002116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800211a:	2200      	movs	r2, #0
 800211c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002120:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002124:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002128:	4642      	mov	r2, r8
 800212a:	464b      	mov	r3, r9
 800212c:	1891      	adds	r1, r2, r2
 800212e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002130:	415b      	adcs	r3, r3
 8002132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002134:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002138:	4641      	mov	r1, r8
 800213a:	eb12 0a01 	adds.w	sl, r2, r1
 800213e:	4649      	mov	r1, r9
 8002140:	eb43 0b01 	adc.w	fp, r3, r1
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002150:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002154:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002158:	4692      	mov	sl, r2
 800215a:	469b      	mov	fp, r3
 800215c:	4643      	mov	r3, r8
 800215e:	eb1a 0303 	adds.w	r3, sl, r3
 8002162:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002166:	464b      	mov	r3, r9
 8002168:	eb4b 0303 	adc.w	r3, fp, r3
 800216c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800217c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002180:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002184:	460b      	mov	r3, r1
 8002186:	18db      	adds	r3, r3, r3
 8002188:	643b      	str	r3, [r7, #64]	@ 0x40
 800218a:	4613      	mov	r3, r2
 800218c:	eb42 0303 	adc.w	r3, r2, r3
 8002190:	647b      	str	r3, [r7, #68]	@ 0x44
 8002192:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002196:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800219a:	f7fe f81b 	bl	80001d4 <__aeabi_uldivmod>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <UART_SetConfig+0x2d4>)
 80021a6:	fba3 2301 	umull	r2, r3, r3, r1
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	2264      	movs	r2, #100	@ 0x64
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	1acb      	subs	r3, r1, r3
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021ba:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <UART_SetConfig+0x2d4>)
 80021bc:	fba3 2302 	umull	r2, r3, r3, r2
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021c8:	441c      	add	r4, r3
 80021ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ce:	2200      	movs	r2, #0
 80021d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021dc:	4642      	mov	r2, r8
 80021de:	464b      	mov	r3, r9
 80021e0:	1891      	adds	r1, r2, r2
 80021e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021e4:	415b      	adcs	r3, r3
 80021e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021ec:	4641      	mov	r1, r8
 80021ee:	1851      	adds	r1, r2, r1
 80021f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80021f2:	4649      	mov	r1, r9
 80021f4:	414b      	adcs	r3, r1
 80021f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002204:	4659      	mov	r1, fp
 8002206:	00cb      	lsls	r3, r1, #3
 8002208:	4651      	mov	r1, sl
 800220a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800220e:	4651      	mov	r1, sl
 8002210:	00ca      	lsls	r2, r1, #3
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	4603      	mov	r3, r0
 8002218:	4642      	mov	r2, r8
 800221a:	189b      	adds	r3, r3, r2
 800221c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002220:	464b      	mov	r3, r9
 8002222:	460a      	mov	r2, r1
 8002224:	eb42 0303 	adc.w	r3, r2, r3
 8002228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002238:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800223c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002240:	460b      	mov	r3, r1
 8002242:	18db      	adds	r3, r3, r3
 8002244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002246:	4613      	mov	r3, r2
 8002248:	eb42 0303 	adc.w	r3, r2, r3
 800224c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800224e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002252:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002256:	f7fd ffbd 	bl	80001d4 <__aeabi_uldivmod>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <UART_SetConfig+0x2d4>)
 8002260:	fba3 1302 	umull	r1, r3, r3, r2
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	2164      	movs	r1, #100	@ 0x64
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	3332      	adds	r3, #50	@ 0x32
 8002272:	4a08      	ldr	r2, [pc, #32]	@ (8002294 <UART_SetConfig+0x2d4>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	f003 0207 	and.w	r2, r3, #7
 800227e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4422      	add	r2, r4
 8002286:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002288:	e106      	b.n	8002498 <UART_SetConfig+0x4d8>
 800228a:	bf00      	nop
 800228c:	40011000 	.word	0x40011000
 8002290:	40011400 	.word	0x40011400
 8002294:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800229c:	2200      	movs	r2, #0
 800229e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80022a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80022aa:	4642      	mov	r2, r8
 80022ac:	464b      	mov	r3, r9
 80022ae:	1891      	adds	r1, r2, r2
 80022b0:	6239      	str	r1, [r7, #32]
 80022b2:	415b      	adcs	r3, r3
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022ba:	4641      	mov	r1, r8
 80022bc:	1854      	adds	r4, r2, r1
 80022be:	4649      	mov	r1, r9
 80022c0:	eb43 0501 	adc.w	r5, r3, r1
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	00eb      	lsls	r3, r5, #3
 80022ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022d2:	00e2      	lsls	r2, r4, #3
 80022d4:	4614      	mov	r4, r2
 80022d6:	461d      	mov	r5, r3
 80022d8:	4643      	mov	r3, r8
 80022da:	18e3      	adds	r3, r4, r3
 80022dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022e0:	464b      	mov	r3, r9
 80022e2:	eb45 0303 	adc.w	r3, r5, r3
 80022e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002306:	4629      	mov	r1, r5
 8002308:	008b      	lsls	r3, r1, #2
 800230a:	4621      	mov	r1, r4
 800230c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002310:	4621      	mov	r1, r4
 8002312:	008a      	lsls	r2, r1, #2
 8002314:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002318:	f7fd ff5c 	bl	80001d4 <__aeabi_uldivmod>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4b60      	ldr	r3, [pc, #384]	@ (80024a4 <UART_SetConfig+0x4e4>)
 8002322:	fba3 2302 	umull	r2, r3, r3, r2
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	011c      	lsls	r4, r3, #4
 800232a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800232e:	2200      	movs	r2, #0
 8002330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002334:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002338:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800233c:	4642      	mov	r2, r8
 800233e:	464b      	mov	r3, r9
 8002340:	1891      	adds	r1, r2, r2
 8002342:	61b9      	str	r1, [r7, #24]
 8002344:	415b      	adcs	r3, r3
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800234c:	4641      	mov	r1, r8
 800234e:	1851      	adds	r1, r2, r1
 8002350:	6139      	str	r1, [r7, #16]
 8002352:	4649      	mov	r1, r9
 8002354:	414b      	adcs	r3, r1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002364:	4659      	mov	r1, fp
 8002366:	00cb      	lsls	r3, r1, #3
 8002368:	4651      	mov	r1, sl
 800236a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800236e:	4651      	mov	r1, sl
 8002370:	00ca      	lsls	r2, r1, #3
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	4603      	mov	r3, r0
 8002378:	4642      	mov	r2, r8
 800237a:	189b      	adds	r3, r3, r2
 800237c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002380:	464b      	mov	r3, r9
 8002382:	460a      	mov	r2, r1
 8002384:	eb42 0303 	adc.w	r3, r2, r3
 8002388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002396:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80023a4:	4649      	mov	r1, r9
 80023a6:	008b      	lsls	r3, r1, #2
 80023a8:	4641      	mov	r1, r8
 80023aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023ae:	4641      	mov	r1, r8
 80023b0:	008a      	lsls	r2, r1, #2
 80023b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80023b6:	f7fd ff0d 	bl	80001d4 <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4611      	mov	r1, r2
 80023c0:	4b38      	ldr	r3, [pc, #224]	@ (80024a4 <UART_SetConfig+0x4e4>)
 80023c2:	fba3 2301 	umull	r2, r3, r3, r1
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2264      	movs	r2, #100	@ 0x64
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	1acb      	subs	r3, r1, r3
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	3332      	adds	r3, #50	@ 0x32
 80023d4:	4a33      	ldr	r2, [pc, #204]	@ (80024a4 <UART_SetConfig+0x4e4>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e0:	441c      	add	r4, r3
 80023e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023e6:	2200      	movs	r2, #0
 80023e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80023ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80023ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023f0:	4642      	mov	r2, r8
 80023f2:	464b      	mov	r3, r9
 80023f4:	1891      	adds	r1, r2, r2
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	415b      	adcs	r3, r3
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002400:	4641      	mov	r1, r8
 8002402:	1851      	adds	r1, r2, r1
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	4649      	mov	r1, r9
 8002408:	414b      	adcs	r3, r1
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002418:	4659      	mov	r1, fp
 800241a:	00cb      	lsls	r3, r1, #3
 800241c:	4651      	mov	r1, sl
 800241e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002422:	4651      	mov	r1, sl
 8002424:	00ca      	lsls	r2, r1, #3
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	4603      	mov	r3, r0
 800242c:	4642      	mov	r2, r8
 800242e:	189b      	adds	r3, r3, r2
 8002430:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002432:	464b      	mov	r3, r9
 8002434:	460a      	mov	r2, r1
 8002436:	eb42 0303 	adc.w	r3, r2, r3
 800243a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	663b      	str	r3, [r7, #96]	@ 0x60
 8002446:	667a      	str	r2, [r7, #100]	@ 0x64
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002454:	4649      	mov	r1, r9
 8002456:	008b      	lsls	r3, r1, #2
 8002458:	4641      	mov	r1, r8
 800245a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800245e:	4641      	mov	r1, r8
 8002460:	008a      	lsls	r2, r1, #2
 8002462:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002466:	f7fd feb5 	bl	80001d4 <__aeabi_uldivmod>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <UART_SetConfig+0x4e4>)
 8002470:	fba3 1302 	umull	r1, r3, r3, r2
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	2164      	movs	r1, #100	@ 0x64
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	3332      	adds	r3, #50	@ 0x32
 8002482:	4a08      	ldr	r2, [pc, #32]	@ (80024a4 <UART_SetConfig+0x4e4>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	f003 020f 	and.w	r2, r3, #15
 800248e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4422      	add	r2, r4
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800249e:	46bd      	mov	sp, r7
 80024a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024a4:	51eb851f 	.word	0x51eb851f

080024a8 <std>:
 80024a8:	2300      	movs	r3, #0
 80024aa:	b510      	push	{r4, lr}
 80024ac:	4604      	mov	r4, r0
 80024ae:	e9c0 3300 	strd	r3, r3, [r0]
 80024b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024b6:	6083      	str	r3, [r0, #8]
 80024b8:	8181      	strh	r1, [r0, #12]
 80024ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80024bc:	81c2      	strh	r2, [r0, #14]
 80024be:	6183      	str	r3, [r0, #24]
 80024c0:	4619      	mov	r1, r3
 80024c2:	2208      	movs	r2, #8
 80024c4:	305c      	adds	r0, #92	@ 0x5c
 80024c6:	f000 f9e7 	bl	8002898 <memset>
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <std+0x58>)
 80024cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80024ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <std+0x5c>)
 80024d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80024d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <std+0x60>)
 80024d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80024d6:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <std+0x64>)
 80024d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <std+0x68>)
 80024dc:	6224      	str	r4, [r4, #32]
 80024de:	429c      	cmp	r4, r3
 80024e0:	d006      	beq.n	80024f0 <std+0x48>
 80024e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80024e6:	4294      	cmp	r4, r2
 80024e8:	d002      	beq.n	80024f0 <std+0x48>
 80024ea:	33d0      	adds	r3, #208	@ 0xd0
 80024ec:	429c      	cmp	r4, r3
 80024ee:	d105      	bne.n	80024fc <std+0x54>
 80024f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80024f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024f8:	f000 ba46 	b.w	8002988 <__retarget_lock_init_recursive>
 80024fc:	bd10      	pop	{r4, pc}
 80024fe:	bf00      	nop
 8002500:	080026e9 	.word	0x080026e9
 8002504:	0800270b 	.word	0x0800270b
 8002508:	08002743 	.word	0x08002743
 800250c:	08002767 	.word	0x08002767
 8002510:	200000fc 	.word	0x200000fc

08002514 <stdio_exit_handler>:
 8002514:	4a02      	ldr	r2, [pc, #8]	@ (8002520 <stdio_exit_handler+0xc>)
 8002516:	4903      	ldr	r1, [pc, #12]	@ (8002524 <stdio_exit_handler+0x10>)
 8002518:	4803      	ldr	r0, [pc, #12]	@ (8002528 <stdio_exit_handler+0x14>)
 800251a:	f000 b869 	b.w	80025f0 <_fwalk_sglue>
 800251e:	bf00      	nop
 8002520:	20000024 	.word	0x20000024
 8002524:	08002c89 	.word	0x08002c89
 8002528:	20000034 	.word	0x20000034

0800252c <cleanup_stdio>:
 800252c:	6841      	ldr	r1, [r0, #4]
 800252e:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <cleanup_stdio+0x34>)
 8002530:	4299      	cmp	r1, r3
 8002532:	b510      	push	{r4, lr}
 8002534:	4604      	mov	r4, r0
 8002536:	d001      	beq.n	800253c <cleanup_stdio+0x10>
 8002538:	f000 fba6 	bl	8002c88 <_fflush_r>
 800253c:	68a1      	ldr	r1, [r4, #8]
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <cleanup_stdio+0x38>)
 8002540:	4299      	cmp	r1, r3
 8002542:	d002      	beq.n	800254a <cleanup_stdio+0x1e>
 8002544:	4620      	mov	r0, r4
 8002546:	f000 fb9f 	bl	8002c88 <_fflush_r>
 800254a:	68e1      	ldr	r1, [r4, #12]
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <cleanup_stdio+0x3c>)
 800254e:	4299      	cmp	r1, r3
 8002550:	d004      	beq.n	800255c <cleanup_stdio+0x30>
 8002552:	4620      	mov	r0, r4
 8002554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002558:	f000 bb96 	b.w	8002c88 <_fflush_r>
 800255c:	bd10      	pop	{r4, pc}
 800255e:	bf00      	nop
 8002560:	200000fc 	.word	0x200000fc
 8002564:	20000164 	.word	0x20000164
 8002568:	200001cc 	.word	0x200001cc

0800256c <global_stdio_init.part.0>:
 800256c:	b510      	push	{r4, lr}
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <global_stdio_init.part.0+0x30>)
 8002570:	4c0b      	ldr	r4, [pc, #44]	@ (80025a0 <global_stdio_init.part.0+0x34>)
 8002572:	4a0c      	ldr	r2, [pc, #48]	@ (80025a4 <global_stdio_init.part.0+0x38>)
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	4620      	mov	r0, r4
 8002578:	2200      	movs	r2, #0
 800257a:	2104      	movs	r1, #4
 800257c:	f7ff ff94 	bl	80024a8 <std>
 8002580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002584:	2201      	movs	r2, #1
 8002586:	2109      	movs	r1, #9
 8002588:	f7ff ff8e 	bl	80024a8 <std>
 800258c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002590:	2202      	movs	r2, #2
 8002592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002596:	2112      	movs	r1, #18
 8002598:	f7ff bf86 	b.w	80024a8 <std>
 800259c:	20000234 	.word	0x20000234
 80025a0:	200000fc 	.word	0x200000fc
 80025a4:	08002515 	.word	0x08002515

080025a8 <__sfp_lock_acquire>:
 80025a8:	4801      	ldr	r0, [pc, #4]	@ (80025b0 <__sfp_lock_acquire+0x8>)
 80025aa:	f000 b9ee 	b.w	800298a <__retarget_lock_acquire_recursive>
 80025ae:	bf00      	nop
 80025b0:	2000023d 	.word	0x2000023d

080025b4 <__sfp_lock_release>:
 80025b4:	4801      	ldr	r0, [pc, #4]	@ (80025bc <__sfp_lock_release+0x8>)
 80025b6:	f000 b9e9 	b.w	800298c <__retarget_lock_release_recursive>
 80025ba:	bf00      	nop
 80025bc:	2000023d 	.word	0x2000023d

080025c0 <__sinit>:
 80025c0:	b510      	push	{r4, lr}
 80025c2:	4604      	mov	r4, r0
 80025c4:	f7ff fff0 	bl	80025a8 <__sfp_lock_acquire>
 80025c8:	6a23      	ldr	r3, [r4, #32]
 80025ca:	b11b      	cbz	r3, 80025d4 <__sinit+0x14>
 80025cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025d0:	f7ff bff0 	b.w	80025b4 <__sfp_lock_release>
 80025d4:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <__sinit+0x28>)
 80025d6:	6223      	str	r3, [r4, #32]
 80025d8:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <__sinit+0x2c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f5      	bne.n	80025cc <__sinit+0xc>
 80025e0:	f7ff ffc4 	bl	800256c <global_stdio_init.part.0>
 80025e4:	e7f2      	b.n	80025cc <__sinit+0xc>
 80025e6:	bf00      	nop
 80025e8:	0800252d 	.word	0x0800252d
 80025ec:	20000234 	.word	0x20000234

080025f0 <_fwalk_sglue>:
 80025f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025f4:	4607      	mov	r7, r0
 80025f6:	4688      	mov	r8, r1
 80025f8:	4614      	mov	r4, r2
 80025fa:	2600      	movs	r6, #0
 80025fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002600:	f1b9 0901 	subs.w	r9, r9, #1
 8002604:	d505      	bpl.n	8002612 <_fwalk_sglue+0x22>
 8002606:	6824      	ldr	r4, [r4, #0]
 8002608:	2c00      	cmp	r4, #0
 800260a:	d1f7      	bne.n	80025fc <_fwalk_sglue+0xc>
 800260c:	4630      	mov	r0, r6
 800260e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002612:	89ab      	ldrh	r3, [r5, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d907      	bls.n	8002628 <_fwalk_sglue+0x38>
 8002618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800261c:	3301      	adds	r3, #1
 800261e:	d003      	beq.n	8002628 <_fwalk_sglue+0x38>
 8002620:	4629      	mov	r1, r5
 8002622:	4638      	mov	r0, r7
 8002624:	47c0      	blx	r8
 8002626:	4306      	orrs	r6, r0
 8002628:	3568      	adds	r5, #104	@ 0x68
 800262a:	e7e9      	b.n	8002600 <_fwalk_sglue+0x10>

0800262c <_puts_r>:
 800262c:	6a03      	ldr	r3, [r0, #32]
 800262e:	b570      	push	{r4, r5, r6, lr}
 8002630:	6884      	ldr	r4, [r0, #8]
 8002632:	4605      	mov	r5, r0
 8002634:	460e      	mov	r6, r1
 8002636:	b90b      	cbnz	r3, 800263c <_puts_r+0x10>
 8002638:	f7ff ffc2 	bl	80025c0 <__sinit>
 800263c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800263e:	07db      	lsls	r3, r3, #31
 8002640:	d405      	bmi.n	800264e <_puts_r+0x22>
 8002642:	89a3      	ldrh	r3, [r4, #12]
 8002644:	0598      	lsls	r0, r3, #22
 8002646:	d402      	bmi.n	800264e <_puts_r+0x22>
 8002648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800264a:	f000 f99e 	bl	800298a <__retarget_lock_acquire_recursive>
 800264e:	89a3      	ldrh	r3, [r4, #12]
 8002650:	0719      	lsls	r1, r3, #28
 8002652:	d502      	bpl.n	800265a <_puts_r+0x2e>
 8002654:	6923      	ldr	r3, [r4, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d135      	bne.n	80026c6 <_puts_r+0x9a>
 800265a:	4621      	mov	r1, r4
 800265c:	4628      	mov	r0, r5
 800265e:	f000 f8c5 	bl	80027ec <__swsetup_r>
 8002662:	b380      	cbz	r0, 80026c6 <_puts_r+0x9a>
 8002664:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002668:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800266a:	07da      	lsls	r2, r3, #31
 800266c:	d405      	bmi.n	800267a <_puts_r+0x4e>
 800266e:	89a3      	ldrh	r3, [r4, #12]
 8002670:	059b      	lsls	r3, r3, #22
 8002672:	d402      	bmi.n	800267a <_puts_r+0x4e>
 8002674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002676:	f000 f989 	bl	800298c <__retarget_lock_release_recursive>
 800267a:	4628      	mov	r0, r5
 800267c:	bd70      	pop	{r4, r5, r6, pc}
 800267e:	2b00      	cmp	r3, #0
 8002680:	da04      	bge.n	800268c <_puts_r+0x60>
 8002682:	69a2      	ldr	r2, [r4, #24]
 8002684:	429a      	cmp	r2, r3
 8002686:	dc17      	bgt.n	80026b8 <_puts_r+0x8c>
 8002688:	290a      	cmp	r1, #10
 800268a:	d015      	beq.n	80026b8 <_puts_r+0x8c>
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	6022      	str	r2, [r4, #0]
 8002692:	7019      	strb	r1, [r3, #0]
 8002694:	68a3      	ldr	r3, [r4, #8]
 8002696:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800269a:	3b01      	subs	r3, #1
 800269c:	60a3      	str	r3, [r4, #8]
 800269e:	2900      	cmp	r1, #0
 80026a0:	d1ed      	bne.n	800267e <_puts_r+0x52>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	da11      	bge.n	80026ca <_puts_r+0x9e>
 80026a6:	4622      	mov	r2, r4
 80026a8:	210a      	movs	r1, #10
 80026aa:	4628      	mov	r0, r5
 80026ac:	f000 f85f 	bl	800276e <__swbuf_r>
 80026b0:	3001      	adds	r0, #1
 80026b2:	d0d7      	beq.n	8002664 <_puts_r+0x38>
 80026b4:	250a      	movs	r5, #10
 80026b6:	e7d7      	b.n	8002668 <_puts_r+0x3c>
 80026b8:	4622      	mov	r2, r4
 80026ba:	4628      	mov	r0, r5
 80026bc:	f000 f857 	bl	800276e <__swbuf_r>
 80026c0:	3001      	adds	r0, #1
 80026c2:	d1e7      	bne.n	8002694 <_puts_r+0x68>
 80026c4:	e7ce      	b.n	8002664 <_puts_r+0x38>
 80026c6:	3e01      	subs	r6, #1
 80026c8:	e7e4      	b.n	8002694 <_puts_r+0x68>
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	6022      	str	r2, [r4, #0]
 80026d0:	220a      	movs	r2, #10
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e7ee      	b.n	80026b4 <_puts_r+0x88>
	...

080026d8 <puts>:
 80026d8:	4b02      	ldr	r3, [pc, #8]	@ (80026e4 <puts+0xc>)
 80026da:	4601      	mov	r1, r0
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	f7ff bfa5 	b.w	800262c <_puts_r>
 80026e2:	bf00      	nop
 80026e4:	20000030 	.word	0x20000030

080026e8 <__sread>:
 80026e8:	b510      	push	{r4, lr}
 80026ea:	460c      	mov	r4, r1
 80026ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026f0:	f000 f8fc 	bl	80028ec <_read_r>
 80026f4:	2800      	cmp	r0, #0
 80026f6:	bfab      	itete	ge
 80026f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80026fa:	89a3      	ldrhlt	r3, [r4, #12]
 80026fc:	181b      	addge	r3, r3, r0
 80026fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002702:	bfac      	ite	ge
 8002704:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002706:	81a3      	strhlt	r3, [r4, #12]
 8002708:	bd10      	pop	{r4, pc}

0800270a <__swrite>:
 800270a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800270e:	461f      	mov	r7, r3
 8002710:	898b      	ldrh	r3, [r1, #12]
 8002712:	05db      	lsls	r3, r3, #23
 8002714:	4605      	mov	r5, r0
 8002716:	460c      	mov	r4, r1
 8002718:	4616      	mov	r6, r2
 800271a:	d505      	bpl.n	8002728 <__swrite+0x1e>
 800271c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002720:	2302      	movs	r3, #2
 8002722:	2200      	movs	r2, #0
 8002724:	f000 f8d0 	bl	80028c8 <_lseek_r>
 8002728:	89a3      	ldrh	r3, [r4, #12]
 800272a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800272e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002732:	81a3      	strh	r3, [r4, #12]
 8002734:	4632      	mov	r2, r6
 8002736:	463b      	mov	r3, r7
 8002738:	4628      	mov	r0, r5
 800273a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800273e:	f000 b8e7 	b.w	8002910 <_write_r>

08002742 <__sseek>:
 8002742:	b510      	push	{r4, lr}
 8002744:	460c      	mov	r4, r1
 8002746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800274a:	f000 f8bd 	bl	80028c8 <_lseek_r>
 800274e:	1c43      	adds	r3, r0, #1
 8002750:	89a3      	ldrh	r3, [r4, #12]
 8002752:	bf15      	itete	ne
 8002754:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002756:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800275a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800275e:	81a3      	strheq	r3, [r4, #12]
 8002760:	bf18      	it	ne
 8002762:	81a3      	strhne	r3, [r4, #12]
 8002764:	bd10      	pop	{r4, pc}

08002766 <__sclose>:
 8002766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800276a:	f000 b89d 	b.w	80028a8 <_close_r>

0800276e <__swbuf_r>:
 800276e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002770:	460e      	mov	r6, r1
 8002772:	4614      	mov	r4, r2
 8002774:	4605      	mov	r5, r0
 8002776:	b118      	cbz	r0, 8002780 <__swbuf_r+0x12>
 8002778:	6a03      	ldr	r3, [r0, #32]
 800277a:	b90b      	cbnz	r3, 8002780 <__swbuf_r+0x12>
 800277c:	f7ff ff20 	bl	80025c0 <__sinit>
 8002780:	69a3      	ldr	r3, [r4, #24]
 8002782:	60a3      	str	r3, [r4, #8]
 8002784:	89a3      	ldrh	r3, [r4, #12]
 8002786:	071a      	lsls	r2, r3, #28
 8002788:	d501      	bpl.n	800278e <__swbuf_r+0x20>
 800278a:	6923      	ldr	r3, [r4, #16]
 800278c:	b943      	cbnz	r3, 80027a0 <__swbuf_r+0x32>
 800278e:	4621      	mov	r1, r4
 8002790:	4628      	mov	r0, r5
 8002792:	f000 f82b 	bl	80027ec <__swsetup_r>
 8002796:	b118      	cbz	r0, 80027a0 <__swbuf_r+0x32>
 8002798:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800279c:	4638      	mov	r0, r7
 800279e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	6922      	ldr	r2, [r4, #16]
 80027a4:	1a98      	subs	r0, r3, r2
 80027a6:	6963      	ldr	r3, [r4, #20]
 80027a8:	b2f6      	uxtb	r6, r6
 80027aa:	4283      	cmp	r3, r0
 80027ac:	4637      	mov	r7, r6
 80027ae:	dc05      	bgt.n	80027bc <__swbuf_r+0x4e>
 80027b0:	4621      	mov	r1, r4
 80027b2:	4628      	mov	r0, r5
 80027b4:	f000 fa68 	bl	8002c88 <_fflush_r>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d1ed      	bne.n	8002798 <__swbuf_r+0x2a>
 80027bc:	68a3      	ldr	r3, [r4, #8]
 80027be:	3b01      	subs	r3, #1
 80027c0:	60a3      	str	r3, [r4, #8]
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	6022      	str	r2, [r4, #0]
 80027c8:	701e      	strb	r6, [r3, #0]
 80027ca:	6962      	ldr	r2, [r4, #20]
 80027cc:	1c43      	adds	r3, r0, #1
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d004      	beq.n	80027dc <__swbuf_r+0x6e>
 80027d2:	89a3      	ldrh	r3, [r4, #12]
 80027d4:	07db      	lsls	r3, r3, #31
 80027d6:	d5e1      	bpl.n	800279c <__swbuf_r+0x2e>
 80027d8:	2e0a      	cmp	r6, #10
 80027da:	d1df      	bne.n	800279c <__swbuf_r+0x2e>
 80027dc:	4621      	mov	r1, r4
 80027de:	4628      	mov	r0, r5
 80027e0:	f000 fa52 	bl	8002c88 <_fflush_r>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d0d9      	beq.n	800279c <__swbuf_r+0x2e>
 80027e8:	e7d6      	b.n	8002798 <__swbuf_r+0x2a>
	...

080027ec <__swsetup_r>:
 80027ec:	b538      	push	{r3, r4, r5, lr}
 80027ee:	4b29      	ldr	r3, [pc, #164]	@ (8002894 <__swsetup_r+0xa8>)
 80027f0:	4605      	mov	r5, r0
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	460c      	mov	r4, r1
 80027f6:	b118      	cbz	r0, 8002800 <__swsetup_r+0x14>
 80027f8:	6a03      	ldr	r3, [r0, #32]
 80027fa:	b90b      	cbnz	r3, 8002800 <__swsetup_r+0x14>
 80027fc:	f7ff fee0 	bl	80025c0 <__sinit>
 8002800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002804:	0719      	lsls	r1, r3, #28
 8002806:	d422      	bmi.n	800284e <__swsetup_r+0x62>
 8002808:	06da      	lsls	r2, r3, #27
 800280a:	d407      	bmi.n	800281c <__swsetup_r+0x30>
 800280c:	2209      	movs	r2, #9
 800280e:	602a      	str	r2, [r5, #0]
 8002810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002814:	81a3      	strh	r3, [r4, #12]
 8002816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800281a:	e033      	b.n	8002884 <__swsetup_r+0x98>
 800281c:	0758      	lsls	r0, r3, #29
 800281e:	d512      	bpl.n	8002846 <__swsetup_r+0x5a>
 8002820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002822:	b141      	cbz	r1, 8002836 <__swsetup_r+0x4a>
 8002824:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002828:	4299      	cmp	r1, r3
 800282a:	d002      	beq.n	8002832 <__swsetup_r+0x46>
 800282c:	4628      	mov	r0, r5
 800282e:	f000 f8af 	bl	8002990 <_free_r>
 8002832:	2300      	movs	r3, #0
 8002834:	6363      	str	r3, [r4, #52]	@ 0x34
 8002836:	89a3      	ldrh	r3, [r4, #12]
 8002838:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800283c:	81a3      	strh	r3, [r4, #12]
 800283e:	2300      	movs	r3, #0
 8002840:	6063      	str	r3, [r4, #4]
 8002842:	6923      	ldr	r3, [r4, #16]
 8002844:	6023      	str	r3, [r4, #0]
 8002846:	89a3      	ldrh	r3, [r4, #12]
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	81a3      	strh	r3, [r4, #12]
 800284e:	6923      	ldr	r3, [r4, #16]
 8002850:	b94b      	cbnz	r3, 8002866 <__swsetup_r+0x7a>
 8002852:	89a3      	ldrh	r3, [r4, #12]
 8002854:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800285c:	d003      	beq.n	8002866 <__swsetup_r+0x7a>
 800285e:	4621      	mov	r1, r4
 8002860:	4628      	mov	r0, r5
 8002862:	f000 fa5f 	bl	8002d24 <__smakebuf_r>
 8002866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800286a:	f013 0201 	ands.w	r2, r3, #1
 800286e:	d00a      	beq.n	8002886 <__swsetup_r+0x9a>
 8002870:	2200      	movs	r2, #0
 8002872:	60a2      	str	r2, [r4, #8]
 8002874:	6962      	ldr	r2, [r4, #20]
 8002876:	4252      	negs	r2, r2
 8002878:	61a2      	str	r2, [r4, #24]
 800287a:	6922      	ldr	r2, [r4, #16]
 800287c:	b942      	cbnz	r2, 8002890 <__swsetup_r+0xa4>
 800287e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002882:	d1c5      	bne.n	8002810 <__swsetup_r+0x24>
 8002884:	bd38      	pop	{r3, r4, r5, pc}
 8002886:	0799      	lsls	r1, r3, #30
 8002888:	bf58      	it	pl
 800288a:	6962      	ldrpl	r2, [r4, #20]
 800288c:	60a2      	str	r2, [r4, #8]
 800288e:	e7f4      	b.n	800287a <__swsetup_r+0x8e>
 8002890:	2000      	movs	r0, #0
 8002892:	e7f7      	b.n	8002884 <__swsetup_r+0x98>
 8002894:	20000030 	.word	0x20000030

08002898 <memset>:
 8002898:	4402      	add	r2, r0
 800289a:	4603      	mov	r3, r0
 800289c:	4293      	cmp	r3, r2
 800289e:	d100      	bne.n	80028a2 <memset+0xa>
 80028a0:	4770      	bx	lr
 80028a2:	f803 1b01 	strb.w	r1, [r3], #1
 80028a6:	e7f9      	b.n	800289c <memset+0x4>

080028a8 <_close_r>:
 80028a8:	b538      	push	{r3, r4, r5, lr}
 80028aa:	4d06      	ldr	r5, [pc, #24]	@ (80028c4 <_close_r+0x1c>)
 80028ac:	2300      	movs	r3, #0
 80028ae:	4604      	mov	r4, r0
 80028b0:	4608      	mov	r0, r1
 80028b2:	602b      	str	r3, [r5, #0]
 80028b4:	f7fe fa7f 	bl	8000db6 <_close>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	d102      	bne.n	80028c2 <_close_r+0x1a>
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	b103      	cbz	r3, 80028c2 <_close_r+0x1a>
 80028c0:	6023      	str	r3, [r4, #0]
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	20000238 	.word	0x20000238

080028c8 <_lseek_r>:
 80028c8:	b538      	push	{r3, r4, r5, lr}
 80028ca:	4d07      	ldr	r5, [pc, #28]	@ (80028e8 <_lseek_r+0x20>)
 80028cc:	4604      	mov	r4, r0
 80028ce:	4608      	mov	r0, r1
 80028d0:	4611      	mov	r1, r2
 80028d2:	2200      	movs	r2, #0
 80028d4:	602a      	str	r2, [r5, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f7fe fa94 	bl	8000e04 <_lseek>
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	d102      	bne.n	80028e6 <_lseek_r+0x1e>
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	b103      	cbz	r3, 80028e6 <_lseek_r+0x1e>
 80028e4:	6023      	str	r3, [r4, #0]
 80028e6:	bd38      	pop	{r3, r4, r5, pc}
 80028e8:	20000238 	.word	0x20000238

080028ec <_read_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	4d07      	ldr	r5, [pc, #28]	@ (800290c <_read_r+0x20>)
 80028f0:	4604      	mov	r4, r0
 80028f2:	4608      	mov	r0, r1
 80028f4:	4611      	mov	r1, r2
 80028f6:	2200      	movs	r2, #0
 80028f8:	602a      	str	r2, [r5, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f7fe fa22 	bl	8000d44 <_read>
 8002900:	1c43      	adds	r3, r0, #1
 8002902:	d102      	bne.n	800290a <_read_r+0x1e>
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	b103      	cbz	r3, 800290a <_read_r+0x1e>
 8002908:	6023      	str	r3, [r4, #0]
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	20000238 	.word	0x20000238

08002910 <_write_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4d07      	ldr	r5, [pc, #28]	@ (8002930 <_write_r+0x20>)
 8002914:	4604      	mov	r4, r0
 8002916:	4608      	mov	r0, r1
 8002918:	4611      	mov	r1, r2
 800291a:	2200      	movs	r2, #0
 800291c:	602a      	str	r2, [r5, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	f7fe fa2d 	bl	8000d7e <_write>
 8002924:	1c43      	adds	r3, r0, #1
 8002926:	d102      	bne.n	800292e <_write_r+0x1e>
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	b103      	cbz	r3, 800292e <_write_r+0x1e>
 800292c:	6023      	str	r3, [r4, #0]
 800292e:	bd38      	pop	{r3, r4, r5, pc}
 8002930:	20000238 	.word	0x20000238

08002934 <__errno>:
 8002934:	4b01      	ldr	r3, [pc, #4]	@ (800293c <__errno+0x8>)
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000030 	.word	0x20000030

08002940 <__libc_init_array>:
 8002940:	b570      	push	{r4, r5, r6, lr}
 8002942:	4d0d      	ldr	r5, [pc, #52]	@ (8002978 <__libc_init_array+0x38>)
 8002944:	4c0d      	ldr	r4, [pc, #52]	@ (800297c <__libc_init_array+0x3c>)
 8002946:	1b64      	subs	r4, r4, r5
 8002948:	10a4      	asrs	r4, r4, #2
 800294a:	2600      	movs	r6, #0
 800294c:	42a6      	cmp	r6, r4
 800294e:	d109      	bne.n	8002964 <__libc_init_array+0x24>
 8002950:	4d0b      	ldr	r5, [pc, #44]	@ (8002980 <__libc_init_array+0x40>)
 8002952:	4c0c      	ldr	r4, [pc, #48]	@ (8002984 <__libc_init_array+0x44>)
 8002954:	f000 fa54 	bl	8002e00 <_init>
 8002958:	1b64      	subs	r4, r4, r5
 800295a:	10a4      	asrs	r4, r4, #2
 800295c:	2600      	movs	r6, #0
 800295e:	42a6      	cmp	r6, r4
 8002960:	d105      	bne.n	800296e <__libc_init_array+0x2e>
 8002962:	bd70      	pop	{r4, r5, r6, pc}
 8002964:	f855 3b04 	ldr.w	r3, [r5], #4
 8002968:	4798      	blx	r3
 800296a:	3601      	adds	r6, #1
 800296c:	e7ee      	b.n	800294c <__libc_init_array+0xc>
 800296e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002972:	4798      	blx	r3
 8002974:	3601      	adds	r6, #1
 8002976:	e7f2      	b.n	800295e <__libc_init_array+0x1e>
 8002978:	08002e50 	.word	0x08002e50
 800297c:	08002e50 	.word	0x08002e50
 8002980:	08002e50 	.word	0x08002e50
 8002984:	08002e54 	.word	0x08002e54

08002988 <__retarget_lock_init_recursive>:
 8002988:	4770      	bx	lr

0800298a <__retarget_lock_acquire_recursive>:
 800298a:	4770      	bx	lr

0800298c <__retarget_lock_release_recursive>:
 800298c:	4770      	bx	lr
	...

08002990 <_free_r>:
 8002990:	b538      	push	{r3, r4, r5, lr}
 8002992:	4605      	mov	r5, r0
 8002994:	2900      	cmp	r1, #0
 8002996:	d041      	beq.n	8002a1c <_free_r+0x8c>
 8002998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800299c:	1f0c      	subs	r4, r1, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bfb8      	it	lt
 80029a2:	18e4      	addlt	r4, r4, r3
 80029a4:	f000 f8e0 	bl	8002b68 <__malloc_lock>
 80029a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a20 <_free_r+0x90>)
 80029aa:	6813      	ldr	r3, [r2, #0]
 80029ac:	b933      	cbnz	r3, 80029bc <_free_r+0x2c>
 80029ae:	6063      	str	r3, [r4, #4]
 80029b0:	6014      	str	r4, [r2, #0]
 80029b2:	4628      	mov	r0, r5
 80029b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029b8:	f000 b8dc 	b.w	8002b74 <__malloc_unlock>
 80029bc:	42a3      	cmp	r3, r4
 80029be:	d908      	bls.n	80029d2 <_free_r+0x42>
 80029c0:	6820      	ldr	r0, [r4, #0]
 80029c2:	1821      	adds	r1, r4, r0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	bf01      	itttt	eq
 80029c8:	6819      	ldreq	r1, [r3, #0]
 80029ca:	685b      	ldreq	r3, [r3, #4]
 80029cc:	1809      	addeq	r1, r1, r0
 80029ce:	6021      	streq	r1, [r4, #0]
 80029d0:	e7ed      	b.n	80029ae <_free_r+0x1e>
 80029d2:	461a      	mov	r2, r3
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	b10b      	cbz	r3, 80029dc <_free_r+0x4c>
 80029d8:	42a3      	cmp	r3, r4
 80029da:	d9fa      	bls.n	80029d2 <_free_r+0x42>
 80029dc:	6811      	ldr	r1, [r2, #0]
 80029de:	1850      	adds	r0, r2, r1
 80029e0:	42a0      	cmp	r0, r4
 80029e2:	d10b      	bne.n	80029fc <_free_r+0x6c>
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	4401      	add	r1, r0
 80029e8:	1850      	adds	r0, r2, r1
 80029ea:	4283      	cmp	r3, r0
 80029ec:	6011      	str	r1, [r2, #0]
 80029ee:	d1e0      	bne.n	80029b2 <_free_r+0x22>
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	6053      	str	r3, [r2, #4]
 80029f6:	4408      	add	r0, r1
 80029f8:	6010      	str	r0, [r2, #0]
 80029fa:	e7da      	b.n	80029b2 <_free_r+0x22>
 80029fc:	d902      	bls.n	8002a04 <_free_r+0x74>
 80029fe:	230c      	movs	r3, #12
 8002a00:	602b      	str	r3, [r5, #0]
 8002a02:	e7d6      	b.n	80029b2 <_free_r+0x22>
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	1821      	adds	r1, r4, r0
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	bf04      	itt	eq
 8002a0c:	6819      	ldreq	r1, [r3, #0]
 8002a0e:	685b      	ldreq	r3, [r3, #4]
 8002a10:	6063      	str	r3, [r4, #4]
 8002a12:	bf04      	itt	eq
 8002a14:	1809      	addeq	r1, r1, r0
 8002a16:	6021      	streq	r1, [r4, #0]
 8002a18:	6054      	str	r4, [r2, #4]
 8002a1a:	e7ca      	b.n	80029b2 <_free_r+0x22>
 8002a1c:	bd38      	pop	{r3, r4, r5, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000244 	.word	0x20000244

08002a24 <sbrk_aligned>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	4e0f      	ldr	r6, [pc, #60]	@ (8002a64 <sbrk_aligned+0x40>)
 8002a28:	460c      	mov	r4, r1
 8002a2a:	6831      	ldr	r1, [r6, #0]
 8002a2c:	4605      	mov	r5, r0
 8002a2e:	b911      	cbnz	r1, 8002a36 <sbrk_aligned+0x12>
 8002a30:	f000 f9d6 	bl	8002de0 <_sbrk_r>
 8002a34:	6030      	str	r0, [r6, #0]
 8002a36:	4621      	mov	r1, r4
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f000 f9d1 	bl	8002de0 <_sbrk_r>
 8002a3e:	1c43      	adds	r3, r0, #1
 8002a40:	d103      	bne.n	8002a4a <sbrk_aligned+0x26>
 8002a42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002a46:	4620      	mov	r0, r4
 8002a48:	bd70      	pop	{r4, r5, r6, pc}
 8002a4a:	1cc4      	adds	r4, r0, #3
 8002a4c:	f024 0403 	bic.w	r4, r4, #3
 8002a50:	42a0      	cmp	r0, r4
 8002a52:	d0f8      	beq.n	8002a46 <sbrk_aligned+0x22>
 8002a54:	1a21      	subs	r1, r4, r0
 8002a56:	4628      	mov	r0, r5
 8002a58:	f000 f9c2 	bl	8002de0 <_sbrk_r>
 8002a5c:	3001      	adds	r0, #1
 8002a5e:	d1f2      	bne.n	8002a46 <sbrk_aligned+0x22>
 8002a60:	e7ef      	b.n	8002a42 <sbrk_aligned+0x1e>
 8002a62:	bf00      	nop
 8002a64:	20000240 	.word	0x20000240

08002a68 <_malloc_r>:
 8002a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a6c:	1ccd      	adds	r5, r1, #3
 8002a6e:	f025 0503 	bic.w	r5, r5, #3
 8002a72:	3508      	adds	r5, #8
 8002a74:	2d0c      	cmp	r5, #12
 8002a76:	bf38      	it	cc
 8002a78:	250c      	movcc	r5, #12
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	4606      	mov	r6, r0
 8002a7e:	db01      	blt.n	8002a84 <_malloc_r+0x1c>
 8002a80:	42a9      	cmp	r1, r5
 8002a82:	d904      	bls.n	8002a8e <_malloc_r+0x26>
 8002a84:	230c      	movs	r3, #12
 8002a86:	6033      	str	r3, [r6, #0]
 8002a88:	2000      	movs	r0, #0
 8002a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b64 <_malloc_r+0xfc>
 8002a92:	f000 f869 	bl	8002b68 <__malloc_lock>
 8002a96:	f8d8 3000 	ldr.w	r3, [r8]
 8002a9a:	461c      	mov	r4, r3
 8002a9c:	bb44      	cbnz	r4, 8002af0 <_malloc_r+0x88>
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	f7ff ffbf 	bl	8002a24 <sbrk_aligned>
 8002aa6:	1c43      	adds	r3, r0, #1
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	d158      	bne.n	8002b5e <_malloc_r+0xf6>
 8002aac:	f8d8 4000 	ldr.w	r4, [r8]
 8002ab0:	4627      	mov	r7, r4
 8002ab2:	2f00      	cmp	r7, #0
 8002ab4:	d143      	bne.n	8002b3e <_malloc_r+0xd6>
 8002ab6:	2c00      	cmp	r4, #0
 8002ab8:	d04b      	beq.n	8002b52 <_malloc_r+0xea>
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	4639      	mov	r1, r7
 8002abe:	4630      	mov	r0, r6
 8002ac0:	eb04 0903 	add.w	r9, r4, r3
 8002ac4:	f000 f98c 	bl	8002de0 <_sbrk_r>
 8002ac8:	4581      	cmp	r9, r0
 8002aca:	d142      	bne.n	8002b52 <_malloc_r+0xea>
 8002acc:	6821      	ldr	r1, [r4, #0]
 8002ace:	1a6d      	subs	r5, r5, r1
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	4630      	mov	r0, r6
 8002ad4:	f7ff ffa6 	bl	8002a24 <sbrk_aligned>
 8002ad8:	3001      	adds	r0, #1
 8002ada:	d03a      	beq.n	8002b52 <_malloc_r+0xea>
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	442b      	add	r3, r5
 8002ae0:	6023      	str	r3, [r4, #0]
 8002ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	bb62      	cbnz	r2, 8002b44 <_malloc_r+0xdc>
 8002aea:	f8c8 7000 	str.w	r7, [r8]
 8002aee:	e00f      	b.n	8002b10 <_malloc_r+0xa8>
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	1b52      	subs	r2, r2, r5
 8002af4:	d420      	bmi.n	8002b38 <_malloc_r+0xd0>
 8002af6:	2a0b      	cmp	r2, #11
 8002af8:	d917      	bls.n	8002b2a <_malloc_r+0xc2>
 8002afa:	1961      	adds	r1, r4, r5
 8002afc:	42a3      	cmp	r3, r4
 8002afe:	6025      	str	r5, [r4, #0]
 8002b00:	bf18      	it	ne
 8002b02:	6059      	strne	r1, [r3, #4]
 8002b04:	6863      	ldr	r3, [r4, #4]
 8002b06:	bf08      	it	eq
 8002b08:	f8c8 1000 	streq.w	r1, [r8]
 8002b0c:	5162      	str	r2, [r4, r5]
 8002b0e:	604b      	str	r3, [r1, #4]
 8002b10:	4630      	mov	r0, r6
 8002b12:	f000 f82f 	bl	8002b74 <__malloc_unlock>
 8002b16:	f104 000b 	add.w	r0, r4, #11
 8002b1a:	1d23      	adds	r3, r4, #4
 8002b1c:	f020 0007 	bic.w	r0, r0, #7
 8002b20:	1ac2      	subs	r2, r0, r3
 8002b22:	bf1c      	itt	ne
 8002b24:	1a1b      	subne	r3, r3, r0
 8002b26:	50a3      	strne	r3, [r4, r2]
 8002b28:	e7af      	b.n	8002a8a <_malloc_r+0x22>
 8002b2a:	6862      	ldr	r2, [r4, #4]
 8002b2c:	42a3      	cmp	r3, r4
 8002b2e:	bf0c      	ite	eq
 8002b30:	f8c8 2000 	streq.w	r2, [r8]
 8002b34:	605a      	strne	r2, [r3, #4]
 8002b36:	e7eb      	b.n	8002b10 <_malloc_r+0xa8>
 8002b38:	4623      	mov	r3, r4
 8002b3a:	6864      	ldr	r4, [r4, #4]
 8002b3c:	e7ae      	b.n	8002a9c <_malloc_r+0x34>
 8002b3e:	463c      	mov	r4, r7
 8002b40:	687f      	ldr	r7, [r7, #4]
 8002b42:	e7b6      	b.n	8002ab2 <_malloc_r+0x4a>
 8002b44:	461a      	mov	r2, r3
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	42a3      	cmp	r3, r4
 8002b4a:	d1fb      	bne.n	8002b44 <_malloc_r+0xdc>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	6053      	str	r3, [r2, #4]
 8002b50:	e7de      	b.n	8002b10 <_malloc_r+0xa8>
 8002b52:	230c      	movs	r3, #12
 8002b54:	6033      	str	r3, [r6, #0]
 8002b56:	4630      	mov	r0, r6
 8002b58:	f000 f80c 	bl	8002b74 <__malloc_unlock>
 8002b5c:	e794      	b.n	8002a88 <_malloc_r+0x20>
 8002b5e:	6005      	str	r5, [r0, #0]
 8002b60:	e7d6      	b.n	8002b10 <_malloc_r+0xa8>
 8002b62:	bf00      	nop
 8002b64:	20000244 	.word	0x20000244

08002b68 <__malloc_lock>:
 8002b68:	4801      	ldr	r0, [pc, #4]	@ (8002b70 <__malloc_lock+0x8>)
 8002b6a:	f7ff bf0e 	b.w	800298a <__retarget_lock_acquire_recursive>
 8002b6e:	bf00      	nop
 8002b70:	2000023c 	.word	0x2000023c

08002b74 <__malloc_unlock>:
 8002b74:	4801      	ldr	r0, [pc, #4]	@ (8002b7c <__malloc_unlock+0x8>)
 8002b76:	f7ff bf09 	b.w	800298c <__retarget_lock_release_recursive>
 8002b7a:	bf00      	nop
 8002b7c:	2000023c 	.word	0x2000023c

08002b80 <__sflush_r>:
 8002b80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b88:	0716      	lsls	r6, r2, #28
 8002b8a:	4605      	mov	r5, r0
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	d454      	bmi.n	8002c3a <__sflush_r+0xba>
 8002b90:	684b      	ldr	r3, [r1, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	dc02      	bgt.n	8002b9c <__sflush_r+0x1c>
 8002b96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	dd48      	ble.n	8002c2e <__sflush_r+0xae>
 8002b9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b9e:	2e00      	cmp	r6, #0
 8002ba0:	d045      	beq.n	8002c2e <__sflush_r+0xae>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002ba8:	682f      	ldr	r7, [r5, #0]
 8002baa:	6a21      	ldr	r1, [r4, #32]
 8002bac:	602b      	str	r3, [r5, #0]
 8002bae:	d030      	beq.n	8002c12 <__sflush_r+0x92>
 8002bb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002bb2:	89a3      	ldrh	r3, [r4, #12]
 8002bb4:	0759      	lsls	r1, r3, #29
 8002bb6:	d505      	bpl.n	8002bc4 <__sflush_r+0x44>
 8002bb8:	6863      	ldr	r3, [r4, #4]
 8002bba:	1ad2      	subs	r2, r2, r3
 8002bbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002bbe:	b10b      	cbz	r3, 8002bc4 <__sflush_r+0x44>
 8002bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bc2:	1ad2      	subs	r2, r2, r3
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002bc8:	6a21      	ldr	r1, [r4, #32]
 8002bca:	4628      	mov	r0, r5
 8002bcc:	47b0      	blx	r6
 8002bce:	1c43      	adds	r3, r0, #1
 8002bd0:	89a3      	ldrh	r3, [r4, #12]
 8002bd2:	d106      	bne.n	8002be2 <__sflush_r+0x62>
 8002bd4:	6829      	ldr	r1, [r5, #0]
 8002bd6:	291d      	cmp	r1, #29
 8002bd8:	d82b      	bhi.n	8002c32 <__sflush_r+0xb2>
 8002bda:	4a2a      	ldr	r2, [pc, #168]	@ (8002c84 <__sflush_r+0x104>)
 8002bdc:	410a      	asrs	r2, r1
 8002bde:	07d6      	lsls	r6, r2, #31
 8002be0:	d427      	bmi.n	8002c32 <__sflush_r+0xb2>
 8002be2:	2200      	movs	r2, #0
 8002be4:	6062      	str	r2, [r4, #4]
 8002be6:	04d9      	lsls	r1, r3, #19
 8002be8:	6922      	ldr	r2, [r4, #16]
 8002bea:	6022      	str	r2, [r4, #0]
 8002bec:	d504      	bpl.n	8002bf8 <__sflush_r+0x78>
 8002bee:	1c42      	adds	r2, r0, #1
 8002bf0:	d101      	bne.n	8002bf6 <__sflush_r+0x76>
 8002bf2:	682b      	ldr	r3, [r5, #0]
 8002bf4:	b903      	cbnz	r3, 8002bf8 <__sflush_r+0x78>
 8002bf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8002bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002bfa:	602f      	str	r7, [r5, #0]
 8002bfc:	b1b9      	cbz	r1, 8002c2e <__sflush_r+0xae>
 8002bfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c02:	4299      	cmp	r1, r3
 8002c04:	d002      	beq.n	8002c0c <__sflush_r+0x8c>
 8002c06:	4628      	mov	r0, r5
 8002c08:	f7ff fec2 	bl	8002990 <_free_r>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c10:	e00d      	b.n	8002c2e <__sflush_r+0xae>
 8002c12:	2301      	movs	r3, #1
 8002c14:	4628      	mov	r0, r5
 8002c16:	47b0      	blx	r6
 8002c18:	4602      	mov	r2, r0
 8002c1a:	1c50      	adds	r0, r2, #1
 8002c1c:	d1c9      	bne.n	8002bb2 <__sflush_r+0x32>
 8002c1e:	682b      	ldr	r3, [r5, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0c6      	beq.n	8002bb2 <__sflush_r+0x32>
 8002c24:	2b1d      	cmp	r3, #29
 8002c26:	d001      	beq.n	8002c2c <__sflush_r+0xac>
 8002c28:	2b16      	cmp	r3, #22
 8002c2a:	d11e      	bne.n	8002c6a <__sflush_r+0xea>
 8002c2c:	602f      	str	r7, [r5, #0]
 8002c2e:	2000      	movs	r0, #0
 8002c30:	e022      	b.n	8002c78 <__sflush_r+0xf8>
 8002c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	e01b      	b.n	8002c72 <__sflush_r+0xf2>
 8002c3a:	690f      	ldr	r7, [r1, #16]
 8002c3c:	2f00      	cmp	r7, #0
 8002c3e:	d0f6      	beq.n	8002c2e <__sflush_r+0xae>
 8002c40:	0793      	lsls	r3, r2, #30
 8002c42:	680e      	ldr	r6, [r1, #0]
 8002c44:	bf08      	it	eq
 8002c46:	694b      	ldreq	r3, [r1, #20]
 8002c48:	600f      	str	r7, [r1, #0]
 8002c4a:	bf18      	it	ne
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	eba6 0807 	sub.w	r8, r6, r7
 8002c52:	608b      	str	r3, [r1, #8]
 8002c54:	f1b8 0f00 	cmp.w	r8, #0
 8002c58:	dde9      	ble.n	8002c2e <__sflush_r+0xae>
 8002c5a:	6a21      	ldr	r1, [r4, #32]
 8002c5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002c5e:	4643      	mov	r3, r8
 8002c60:	463a      	mov	r2, r7
 8002c62:	4628      	mov	r0, r5
 8002c64:	47b0      	blx	r6
 8002c66:	2800      	cmp	r0, #0
 8002c68:	dc08      	bgt.n	8002c7c <__sflush_r+0xfc>
 8002c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c72:	81a3      	strh	r3, [r4, #12]
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c7c:	4407      	add	r7, r0
 8002c7e:	eba8 0800 	sub.w	r8, r8, r0
 8002c82:	e7e7      	b.n	8002c54 <__sflush_r+0xd4>
 8002c84:	dfbffffe 	.word	0xdfbffffe

08002c88 <_fflush_r>:
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	690b      	ldr	r3, [r1, #16]
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	b913      	cbnz	r3, 8002c98 <_fflush_r+0x10>
 8002c92:	2500      	movs	r5, #0
 8002c94:	4628      	mov	r0, r5
 8002c96:	bd38      	pop	{r3, r4, r5, pc}
 8002c98:	b118      	cbz	r0, 8002ca2 <_fflush_r+0x1a>
 8002c9a:	6a03      	ldr	r3, [r0, #32]
 8002c9c:	b90b      	cbnz	r3, 8002ca2 <_fflush_r+0x1a>
 8002c9e:	f7ff fc8f 	bl	80025c0 <__sinit>
 8002ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f3      	beq.n	8002c92 <_fflush_r+0xa>
 8002caa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002cac:	07d0      	lsls	r0, r2, #31
 8002cae:	d404      	bmi.n	8002cba <_fflush_r+0x32>
 8002cb0:	0599      	lsls	r1, r3, #22
 8002cb2:	d402      	bmi.n	8002cba <_fflush_r+0x32>
 8002cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cb6:	f7ff fe68 	bl	800298a <__retarget_lock_acquire_recursive>
 8002cba:	4628      	mov	r0, r5
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	f7ff ff5f 	bl	8002b80 <__sflush_r>
 8002cc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cc4:	07da      	lsls	r2, r3, #31
 8002cc6:	4605      	mov	r5, r0
 8002cc8:	d4e4      	bmi.n	8002c94 <_fflush_r+0xc>
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	059b      	lsls	r3, r3, #22
 8002cce:	d4e1      	bmi.n	8002c94 <_fflush_r+0xc>
 8002cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cd2:	f7ff fe5b 	bl	800298c <__retarget_lock_release_recursive>
 8002cd6:	e7dd      	b.n	8002c94 <_fflush_r+0xc>

08002cd8 <__swhatbuf_r>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	460c      	mov	r4, r1
 8002cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ce0:	2900      	cmp	r1, #0
 8002ce2:	b096      	sub	sp, #88	@ 0x58
 8002ce4:	4615      	mov	r5, r2
 8002ce6:	461e      	mov	r6, r3
 8002ce8:	da0d      	bge.n	8002d06 <__swhatbuf_r+0x2e>
 8002cea:	89a3      	ldrh	r3, [r4, #12]
 8002cec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	bf14      	ite	ne
 8002cf6:	2340      	movne	r3, #64	@ 0x40
 8002cf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	6031      	str	r1, [r6, #0]
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	b016      	add	sp, #88	@ 0x58
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
 8002d06:	466a      	mov	r2, sp
 8002d08:	f000 f848 	bl	8002d9c <_fstat_r>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	dbec      	blt.n	8002cea <__swhatbuf_r+0x12>
 8002d10:	9901      	ldr	r1, [sp, #4]
 8002d12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002d16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002d1a:	4259      	negs	r1, r3
 8002d1c:	4159      	adcs	r1, r3
 8002d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d22:	e7eb      	b.n	8002cfc <__swhatbuf_r+0x24>

08002d24 <__smakebuf_r>:
 8002d24:	898b      	ldrh	r3, [r1, #12]
 8002d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d28:	079d      	lsls	r5, r3, #30
 8002d2a:	4606      	mov	r6, r0
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	d507      	bpl.n	8002d40 <__smakebuf_r+0x1c>
 8002d30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	6123      	str	r3, [r4, #16]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	6163      	str	r3, [r4, #20]
 8002d3c:	b003      	add	sp, #12
 8002d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d40:	ab01      	add	r3, sp, #4
 8002d42:	466a      	mov	r2, sp
 8002d44:	f7ff ffc8 	bl	8002cd8 <__swhatbuf_r>
 8002d48:	9f00      	ldr	r7, [sp, #0]
 8002d4a:	4605      	mov	r5, r0
 8002d4c:	4639      	mov	r1, r7
 8002d4e:	4630      	mov	r0, r6
 8002d50:	f7ff fe8a 	bl	8002a68 <_malloc_r>
 8002d54:	b948      	cbnz	r0, 8002d6a <__smakebuf_r+0x46>
 8002d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d5a:	059a      	lsls	r2, r3, #22
 8002d5c:	d4ee      	bmi.n	8002d3c <__smakebuf_r+0x18>
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	81a3      	strh	r3, [r4, #12]
 8002d68:	e7e2      	b.n	8002d30 <__smakebuf_r+0xc>
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	6020      	str	r0, [r4, #0]
 8002d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d72:	81a3      	strh	r3, [r4, #12]
 8002d74:	9b01      	ldr	r3, [sp, #4]
 8002d76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002d7a:	b15b      	cbz	r3, 8002d94 <__smakebuf_r+0x70>
 8002d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d80:	4630      	mov	r0, r6
 8002d82:	f000 f81d 	bl	8002dc0 <_isatty_r>
 8002d86:	b128      	cbz	r0, 8002d94 <__smakebuf_r+0x70>
 8002d88:	89a3      	ldrh	r3, [r4, #12]
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	81a3      	strh	r3, [r4, #12]
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	431d      	orrs	r5, r3
 8002d98:	81a5      	strh	r5, [r4, #12]
 8002d9a:	e7cf      	b.n	8002d3c <__smakebuf_r+0x18>

08002d9c <_fstat_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	4d07      	ldr	r5, [pc, #28]	@ (8002dbc <_fstat_r+0x20>)
 8002da0:	2300      	movs	r3, #0
 8002da2:	4604      	mov	r4, r0
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	602b      	str	r3, [r5, #0]
 8002daa:	f7fe f810 	bl	8000dce <_fstat>
 8002dae:	1c43      	adds	r3, r0, #1
 8002db0:	d102      	bne.n	8002db8 <_fstat_r+0x1c>
 8002db2:	682b      	ldr	r3, [r5, #0]
 8002db4:	b103      	cbz	r3, 8002db8 <_fstat_r+0x1c>
 8002db6:	6023      	str	r3, [r4, #0]
 8002db8:	bd38      	pop	{r3, r4, r5, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000238 	.word	0x20000238

08002dc0 <_isatty_r>:
 8002dc0:	b538      	push	{r3, r4, r5, lr}
 8002dc2:	4d06      	ldr	r5, [pc, #24]	@ (8002ddc <_isatty_r+0x1c>)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	4608      	mov	r0, r1
 8002dca:	602b      	str	r3, [r5, #0]
 8002dcc:	f7fe f80f 	bl	8000dee <_isatty>
 8002dd0:	1c43      	adds	r3, r0, #1
 8002dd2:	d102      	bne.n	8002dda <_isatty_r+0x1a>
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	b103      	cbz	r3, 8002dda <_isatty_r+0x1a>
 8002dd8:	6023      	str	r3, [r4, #0]
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
 8002ddc:	20000238 	.word	0x20000238

08002de0 <_sbrk_r>:
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	4d06      	ldr	r5, [pc, #24]	@ (8002dfc <_sbrk_r+0x1c>)
 8002de4:	2300      	movs	r3, #0
 8002de6:	4604      	mov	r4, r0
 8002de8:	4608      	mov	r0, r1
 8002dea:	602b      	str	r3, [r5, #0]
 8002dec:	f7fe f818 	bl	8000e20 <_sbrk>
 8002df0:	1c43      	adds	r3, r0, #1
 8002df2:	d102      	bne.n	8002dfa <_sbrk_r+0x1a>
 8002df4:	682b      	ldr	r3, [r5, #0]
 8002df6:	b103      	cbz	r3, 8002dfa <_sbrk_r+0x1a>
 8002df8:	6023      	str	r3, [r4, #0]
 8002dfa:	bd38      	pop	{r3, r4, r5, pc}
 8002dfc:	20000238 	.word	0x20000238

08002e00 <_init>:
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e02:	bf00      	nop
 8002e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e06:	bc08      	pop	{r3}
 8002e08:	469e      	mov	lr, r3
 8002e0a:	4770      	bx	lr

08002e0c <_fini>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr
